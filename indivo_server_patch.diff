diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/codingsystems/data/complete/HL7_V3_VACCINES.txt indivo_server/codingsystems/data/complete/HL7_V3_VACCINES.txt
--- fyoung-indivo_server_1_0-3f85dc7/codingsystems/data/complete/HL7_V3_VACCINES.txt	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/codingsystems/data/complete/HL7_V3_VACCINES.txt	2012-02-27 16:19:31.000000000 -0500
@@ -0,0 +1 @@
+84|Hep A, ped/adol, 3 dose|hepatitis A vaccine, pediatric/adolescent dosage, 3 dose schedule|C1548492
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/codingsystems/data/complete/LOINCDB.TXT indivo_server/codingsystems/data/complete/LOINCDB.TXT
--- fyoung-indivo_server_1_0-3f85dc7/codingsystems/data/complete/LOINCDB.TXT	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/codingsystems/data/complete/LOINCDB.TXT	2012-02-27 16:19:31.000000000 -0500
@@ -0,0 +1,10 @@
+"LOINC_NUM"	"COMPONENT"	"PROPERTY"	"TIME_ASPCT"	"SYSTEM"	"SCALE_TYP"	"METHOD_TYP"	"RELAT_NMS"	"CLASS"	"SOURCE"	"DT_LAST_CH"	"CHNG_TYPE"	"COMMENTS"	"ANSWERLIST"	"STATUS"	"MAP_TO"	"SCOPE"	"CONSUMER_NAME"	"IPCC_UNITS"	"REFERENCE"	"EXACT_CMP_SY"	"MOLAR_MASS"	"CLASSTYPE"	"FORMULA"	"SPECIES"	"EXMPL_ANSWERS"	"ACSSYM"	"BASE_NAME"	"FINAL"	"NAACCR_ID"	"CODE_TABLE"	"SETROOT"	"PANELELEMENTS"	"SURVEY_QUEST_TEXT"	"SURVEY_QUEST_SRC"	"UNITSREQUIRED"	"SUBMITTED_UNITS"	"RELATEDNAMES2"	"SHORTNAME"	"ORDER_OBS"	"CDISC_COMMON_TESTS"	"HL7_FIELD_SUBFIELD_ID"	"EXTERNAL_COPYRIGHT_NOTICE"	"EXAMPLE_UNITS"	"INPC_PERCENTAGE"	"LONG_COMMON_NAME"	"HL7_V2_DATATYPE"	"HL7_V3_DATATYPE"	"CURATED_RANGE_AND_UNITS"	"DOCUMENT_SECTION"	"DEFINITION_DESCRIPTION_HELP"	"EXAMPLE_UCUM_UNITS"
+"1006-6"	"Direct antiglobulin test.IgG specific reagent"	"Imp"	"Pt"	"RBC"	"Nom"			"BLDBK"	"SH"	"20041122"	"NAM"											1						"Y"			0						"Immune globulin G; Immunoglobulin G; DAT IgG-Sp Reag; Direct coombs test; DCT; DAGT; Direct Coomb; Interpretation; Interp; Impression; Impressions; Point in time; Random; Erythrocytes; Red blood corpusles; Red blood cells; Nominal; Dir; Antiglob; Spec; BLOOD BANK"	"DAT IgG-Sp Reag RBC-Imp"	"Observation"					3.359404E-04	"Direct antiglobulin test.IgG specific reagent [interpretation] on Red Blood Cells"						
+"10066-9"	"S' wave amplitude.lead V3"	"Elpot"	"Pt"	"Heart"	"Qn"	"EKG"	"S prime amplitude; ECG; Cardiac"	"EKG.MEAS"	"CH"	"19980820"	"NAM"											2						"Y"			0				"Y"		"; S' wave Amp L-V3; S wave Amp L-V3; PB; Electrical potential; Voltage; Point in time; Random; Hrt; Cardiac; Quantitative; QNT; Quant; Quan; Electrocardiogram; Electrocardiograph; ECG; S prime; EKG.MEASUREMENTS; EKG.MEASUREMENTS"	"S' wave Amp L-V3"	"Observation"					0	"S' wave amplitude in lead V3"	"NM"	"PQ"				
+"10067-7"	"S' wave amplitude.lead V4"	"Elpot"	"Pt"	"Heart"	"Qn"	"EKG"	"S prime amplitude; ECG; Cardiac"	"EKG.MEAS"	"CH"	"19980820"	"NAM"											2						"Y"			0				"Y"		"; S wave Amp L-V4; S' wave Amp L-V4; PB; Electrical potential; Voltage; Point in time; Random; Hrt; Cardiac; Quantitative; QNT; Quant; Quan; Electrocardiogram; Electrocardiograph; ECG; S prime; EKG.MEASUREMENTS; EKG.MEASUREMENTS"	"S' wave Amp L-V4"	"Observation"					0	"S' wave amplitude in lead V4"	"NM"	"PQ"				
+"10068-5"	"S' wave amplitude.lead V5"	"Elpot"	"Pt"	"Heart"	"Qn"	"EKG"	"S prime amplitude; ECG; Cardiac"	"EKG.MEAS"	"CH"	"19980820"	"NAM"											2						"Y"			0				"Y"		"; S' wave Amp L-V5; S wave Amp L-V5; PB; Electrical potential; Voltage; Point in time; Random; Hrt; Cardiac; Quantitative; QNT; Quant; Quan; Electrocardiogram; Electrocardiograph; ECG; S prime; EKG.MEASUREMENTS; EKG.MEASUREMENTS"	"S' wave Amp L-V5"	"Observation"					0	"S' wave amplitude in lead V5"	"NM"	"PQ"				
+"10069-3"	"S' wave amplitude.lead V6"	"Elpot"	"Pt"	"Heart"	"Qn"	"EKG"	"S prime amplitude; ECG; Cardiac"	"EKG.MEAS"	"CH"	"19980820"	"NAM"											2						"Y"			0				"Y"		"; S' wave Amp L-V6; S wave Amp L-V6; PB; Electrical potential; Voltage; Point in time; Random; Hrt; Cardiac; Quantitative; QNT; Quant; Quan; Electrocardiogram; Electrocardiograph; ECG; S prime; EKG.MEASUREMENTS; EKG.MEASUREMENTS"	"S' wave Amp L-V6"	"Observation"					0	"S' wave amplitude in lead V6"	"NM"	"PQ"				
+"10070-1"	"S' wave duration.lead AVF"	"Time"	"Pt"	"Heart"	"Qn"	"EKG"	"S prime duration; ECG; Cardiac"	"EKG.MEAS"	"CH"	"19980820"	"NAM"											2						"Y"			0				"Y"		"; S' wave dur L-AVF; S wave dur L-AVF; PB; Durat; Point in time; Random; Hrt; Cardiac; Quantitative; QNT; Quant; Quan; Electrocardiogram; Electrocardiograph; ECG; S prime; EKG.MEASUREMENTS; EKG.MEASUREMENTS"	"S' wave dur L-AVF"	"Observation"					0	"S' wave duration in lead AVF"	"NM"	"PQ"				
+"10071-9"	"S' wave duration.lead AVL"	"Time"	"Pt"	"Heart"	"Qn"	"EKG"	"S prime duration; ECG; Cardiac"	"EKG.MEAS"	"CH"	"19980820"	"NAM"											2						"Y"			0				"Y"		"; S' wave dur L-AVL; S wave dur L-AVL; PB; Durat; Point in time; Random; Hrt; Cardiac; Quantitative; QNT; Quant; Quan; Electrocardiogram; Electrocardiograph; ECG; S prime; EKG.MEASUREMENTS; EKG.MEASUREMENTS"	"S' wave dur L-AVL"	"Observation"					0	"S' wave duration in lead AVL"	"NM"	"PQ"				
+"10029-7"	"R' wave duration.lead V2"	"Time"	"Pt"	"Heart"	"Qn"	"EKG"	"R prime duration; ECG; Cardiac"	"EKG.MEAS"	"CH"	"19980820"	"NAM"											2						"Y"			0				"Y"		"; R' wave dur L-V2; R wave dur L-V2; PB; Durat; Point in time; Random; Hrt; Cardiac; Quantitative; QNT; Quant; Quan; Electrocardiogram; Electrocardiograph; ECG; R prime; Right; EKG.MEASUREMENTS; EKG.MEASUREMENTS"	"R' wave dur L-V2"	"Observation"					0	"R' wave duration in lead V2"	"NM"	"PQ"				
+"10030-5"	"R' wave duration.lead V3"	"Time"	"Pt"	"Heart"	"Qn"	"EKG"	"R prime duration; ECG; Cardiac"	"EKG.MEAS"	"CH"	"19980820"	"NAM"											2						"Y"			0				"Y"		"; R wave dur L-V3; R' wave dur L-V3; PB; Durat; Point in time; Random; Hrt; Cardiac; Quantitative; QNT; Quant; Quan; Electrocardiogram; Electrocardiograph; ECG; R prime; Right; EKG.MEASUREMENTS; EKG.MEASUREMENTS"	"R' wave dur L-V3"	"Observation"					0	"R' wave duration in lead V3"	"NM"	"PQ"				
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/codingsystems/data/complete/RxTerms201005.txt indivo_server/codingsystems/data/complete/RxTerms201005.txt
--- fyoung-indivo_server_1_0-3f85dc7/codingsystems/data/complete/RxTerms201005.txt	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/codingsystems/data/complete/RxTerms201005.txt	2012-02-27 16:19:31.000000000 -0500
@@ -0,0 +1,5 @@
+RXCUI|GENERIC_RXCUI|TTY|FULL_NAME|RXN_DOSE_FORM|FULL_GENERIC_NAME|BRAND_NAME|DISPLAY_NAME|ROUTE|NEW_DOSE_FORM|STRENGTH|SUPPRESS_FOR|DISPLAY_NAME_SYNONYM|IS_RETIRED
+104490|314231|SBD|Simvastatin 10 MG Oral Tablet [Zocor]|Oral Tablet|Simvastatin 10 MG Oral Tablet|ZOCOR|ZOCOR (Oral-pill)|Oral-pill|Tabs|10 mg|||
+104491|312961|SBD|Simvastatin 20 MG Oral Tablet [Zocor]|Oral Tablet|Simvastatin 20 MG Oral Tablet|ZOCOR|ZOCOR (Oral-pill)|Oral-pill|Tabs|20 mg|||
+104531|312897|SBD|salmeterol 0.021 MG/ACTUAT Inhalant Solution [Serevent]|Inhalant Solution|salmeterol 0.021 MG/ACTUAT Inhalant Solution|SEREVENT|SEREVENT (Inhalant)|Inhalant|Sol|0.021 mg/puff|||
+104532|318142|SBD|salmeterol 0.05 MG/ACTUAT Inhalant Powder [Serevent Diskus]|Inhalant Powder|salmeterol 0.05 MG/ACTUAT Inhalant Powder|SEREVENT DISKUS|SEREVENT DISKUS (Inhalant)|Inhalant|Pwdr|0.05 mg/puff|||
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/codingsystems/data/complete/SNOMEDCT_CORE_SUBSET_200911_utf8.txt indivo_server/codingsystems/data/complete/SNOMEDCT_CORE_SUBSET_200911_utf8.txt
--- fyoung-indivo_server_1_0-3f85dc7/codingsystems/data/complete/SNOMEDCT_CORE_SUBSET_200911_utf8.txt	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/codingsystems/data/complete/SNOMEDCT_CORE_SUBSET_200911_utf8.txt	2012-02-27 16:19:31.000000000 -0500
@@ -0,0 +1 @@
+38341003|Hypertensive disorder, systemic arterial (disorder)|Current|C0020538|7|3.0824|200907|False||
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/django.wsgi indivo_server/django.wsgi
--- fyoung-indivo_server_1_0-3f85dc7/django.wsgi	2012-02-27 12:31:32.000000000 -0500
+++ indivo_server/django.wsgi	2012-03-23 10:53:58.000000000 -0400
@@ -1,5 +1,10 @@
 import os
 import sys
+
+# Uncomment the following 2 lines if you are running from a virtualenv setup
+#activate_this = '/home/fby/indivo/bin/activate_this.py'
+#execfile(activate_this, dict(__file__=activate_this))
+
 from django.core.handlers.wsgi import WSGIHandler
 
 sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/accesscontrol/__init__.py indivo_server/indivo/accesscontrol/__init__.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/accesscontrol/__init__.py	2012-02-27 12:31:32.000000000 -0500
+++ indivo_server/indivo/accesscontrol/__init__.py	2012-04-26 15:10:52.000000000 -0400
@@ -73,10 +73,24 @@
            account_inbox_message_attachment_accept,
            account_message_archive,
            account_notifications,
+           account_sent,
+           account_sent_message,
+           account_sent_message_archive,
            account_permissions]
   AccessRule('Account Management No Admin App', 
              account_management_no_admin_app, views)           
 
+  #
+  # FBY: This allows an account to sent a message to anothor account.
+  #      It may not be possible for an account to send a message to itself
+  #      but that should not be an issue.
+  #
+  def send_account_message_no_admin_app(principal, account, **unused_args):
+    return not (principal.isSame(account))
+  views = [send_account_message]
+  AccessRule('Send Account Message No Admin App', 
+             send_account_message_no_admin_app, views)
+  
   def account_management_admin_app_only(principal, **unused_args):
     """Any admin app."""
     return principal.isType('MachineApp')
@@ -273,7 +287,21 @@
   views = [measurement_list,
            immunization_list,
            allergy_list,
+           device_list,
+           healthmeasurement_list,
+           medicationschedule_list,
+           healthactionoccurrence_list,
+           healthactionschedule_list,
+           healthactionplan_list,
+           healthactionresult_list,
            medication_list,
+           medicationorder_list,
+           medicationfill_list,
+           medicationadministration_list,
+           medicationscheduleitem_list,
+           equipmentscheduleitem_list,
+           adherenceitem_list,
+           videomessage_list,
            procedure_list,
            problem_list,
            equipment_list,
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/document_processing.py indivo_server/indivo/document_processing/document_processing.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/document_processing.py	2012-02-27 12:31:32.000000000 -0500
+++ indivo_server/indivo/document_processing/document_processing.py	2012-04-26 15:10:52.000000000 -0400
@@ -16,16 +16,30 @@
 from django.db import transaction
 from django.core.files.base import ContentFile
 
-from idp_objs.allergy               import IDP_Allergy
-from idp_objs.equipment             import IDP_Equipment
-from idp_objs.measurement           import IDP_Measurement
-from idp_objs.immunization          import IDP_Immunization
-from idp_objs.lab                   import IDP_Lab
-from idp_objs.medication            import IDP_Medication
-from idp_objs.problem               import IDP_Problem
-from idp_objs.procedure             import IDP_Procedure
-from idp_objs.simple_clinical_note  import IDP_SimpleClinicalNote
-from idp_objs.vitals                import IDP_Vitals
+from idp_objs.allergy                   import IDP_Allergy
+from idp_objs.equipment                 import IDP_Equipment
+from idp_objs.measurement               import IDP_Measurement
+from idp_objs.immunization              import IDP_Immunization
+from idp_objs.lab                       import IDP_Lab
+from idp_objs.medication                import IDP_Medication
+from idp_objs.medicationscheduleitem    import IDP_MedicationScheduleItem
+from idp_objs.equipmentscheduleitem     import IDP_EquipmentScheduleItem
+from idp_objs.medicationadministration  import IDP_MedicationAdministration
+from idp_objs.medicationfill            import IDP_MedicationFill
+from idp_objs.medicationorder           import IDP_MedicationOrder
+from idp_objs.adherenceitem             import IDP_AdherenceItem
+from idp_objs.videomessage              import IDP_VideoMessage
+from idp_objs.problem                   import IDP_Problem
+from idp_objs.procedure                 import IDP_Procedure
+from idp_objs.simple_clinical_note      import IDP_SimpleClinicalNote
+from idp_objs.vitals                    import IDP_Vitals
+from idp_objs.healthactionplan          import IDP_HealthActionPlan
+from idp_objs.healthactionresult        import IDP_HealthActionResult
+from idp_objs.healthactionoccurrence    import IDP_HealthActionOccurrence
+from idp_objs.healthactionschedule      import IDP_HealthActionSchedule
+from idp_objs.device                    import IDP_Device
+from idp_objs.healthmeasurement         import IDP_HealthMeasurement
+from idp_objs.medicationschedule        import IDP_MedicationSchedule
 
 DP_DOBJ_PROCESS   = 'process'
 DP_DOBJ_POST_DATA = 'post_data'
@@ -37,9 +51,23 @@
                   'http://indivo.org/vocab/xml/documents#Immunization'  :   {'class' : 'IDP_Immunization',  'stylesheet' : 'immunization', 'schema' : 'immunization'},
                   'http://indivo.org/vocab/xml/documents#Lab'           :   {'class' : 'IDP_Lab',           'stylesheet' : 'lab', 'schema' : 'lab'},
                   'http://indivo.org/vocab/xml/documents#Medication'    :   {'class' : 'IDP_Medication',    'stylesheet' : 'medication', 'schema' : 'medication'},
+                  'http://indivo.org/vocab/xml/documents#MedicationScheduleItem'    :   {'class' : 'IDP_MedicationScheduleItem',    'stylesheet' : 'medicationscheduleitem', 'schema' : 'medicationscheduleitem'},
+                  'http://indivo.org/vocab/xml/documents#EquipmentScheduleItem'     :   {'class' : 'IDP_EquipmentScheduleItem',    'stylesheet' : 'equipmentscheduleitem', 'schema' : 'equipmentscheduleitem'},
+                  'http://indivo.org/vocab/xml/documents#MedicationAdministration'  :   {'class' : 'IDP_MedicationAdministration',    'stylesheet' : 'medicationadministration', 'schema' : 'medicationadministration'},
+                  'http://indivo.org/vocab/xml/documents#MedicationFill'            :   {'class' : 'IDP_MedicationFill',    'stylesheet' : 'medicationfill', 'schema' : 'medicationfill'},
+                  'http://indivo.org/vocab/xml/documents#MedicationOrder'           :   {'class' : 'IDP_MedicationOrder',    'stylesheet' : 'medicationorder', 'schema' : 'medicationorder'},
+                  'http://indivo.org/vocab/xml/documents#AdherenceItem'             :   {'class' : 'IDP_AdherenceItem',    'stylesheet' : 'adherenceitem', 'schema' : 'adherenceitem'},
+                  'http://indivo.org/vocab/xml/documents#VideoMessage'              :   {'class' : 'IDP_VideoMessage',    'stylesheet' : 'videomessage', 'schema' : 'videomessage'},
                   'http://indivo.org/vocab/xml/documents#Problem'       :   {'class' : 'IDP_Problem',       'stylesheet' : 'problem', 'schema' : 'problem'},
                   'http://indivo.org/vocab/xml/documents#Procedure'     :   {'class' : 'IDP_Procedure',     'stylesheet' : 'procedure', 'schema' : 'procedure'},
-                  'http://indivo.org/vocab/xml/documents#VitalSign'     :   {'class' : 'IDP_Vitals',        'stylesheet' : 'vitalsign', 'schema' : 'vitals'}
+                  'http://indivo.org/vocab/xml/documents#VitalSign'     :   {'class' : 'IDP_Vitals',        'stylesheet' : 'vitalsign', 'schema' : 'vitals'},
+                  'http://indivo.org/vocab/xml/documents#HealthActionPlan'     :   {'class' : 'IDP_HealthActionPlan',        'stylesheet' : 'healthactionplan', 'schema' : 'healthactionplan'},
+                  'http://indivo.org/vocab/xml/documents#HealthActionResult'     :   {'class' : 'IDP_HealthActionResult',        'stylesheet' : 'healthactionresult', 'schema' : 'healthactionresult'},
+                  'http://indivo.org/vocab/xml/documents#HealthActionOccurrence'     :   {'class' : 'IDP_HealthActionOccurrence',        'stylesheet' : 'healthactionoccurrence', 'schema' : 'healthactionoccurrence'},
+                  'http://indivo.org/vocab/xml/documents#HealthActionSchedule'     :   {'class' : 'IDP_HealthActionSchedule',        'stylesheet' : 'healthactionschedule', 'schema' : 'healthactionschedule'},
+                  'http://indivo.org/vocab/xml/documents#Device'     :   {'class' : 'IDP_Device',        'stylesheet' : 'device', 'schema' : 'device'},
+                  'http://indivo.org/vocab/xml/documents#HealthMeasurement'     :   {'class' : 'IDP_HealthMeasurement',        'stylesheet' : 'healthmeasurement', 'schema' : 'healthmeasurement'},
+                  'http://indivo.org/vocab/xml/documents#MedicationSchedule'     :   {'class' : 'IDP_MedicationSchedule',        'stylesheet' : 'medicationschedule', 'schema' : 'medicationschedule'}
                 }
 
 DEFAULT_PREFIX= "http://indivo.org/vocab/xml/documents#"
@@ -200,7 +228,10 @@
       # If dp_data_obj has a process method then use it
       # else use document_processing standard
       if hasattr(dp_data_obj, DP_DOBJ_PROCESS):
-        doc_data = dp_data_obj.process(self.root_node_name, self.transformed_dom)
+        if self.root_node_name in ('HealthActionPlan', 'HealthActionResult'):
+          doc_data = dp_data_obj.process(self.root_node_name, self.transformed_dom, self.content)
+        else:
+          doc_data = dp_data_obj.process(self.root_node_name, self.transformed_dom)
       else:
         doc_data = self.parse_standard_facts_doc(self.root_node_name, self.transformed_dom)
 
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/idp_objs/adherenceitem.py indivo_server/indivo/document_processing/idp_objs/adherenceitem.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/idp_objs/adherenceitem.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/document_processing/idp_objs/adherenceitem.py	2012-02-21 07:36:45.000000000 -0500
@@ -0,0 +1,44 @@
+from indivo.lib import iso8601
+from indivo.models import AdherenceItem
+
+XML = 'xml'
+DOM = 'dom'
+
+class IDP_AdherenceItem:
+
+  def post_data(self, 
+    name=None,
+    name_type=None,
+    name_value=None,
+    name_abbrev=None,
+    reportedBy=None,
+    dateReported=None,
+    recurrenceIndex=None,
+    adherence=None,
+    nonadherenceReason=None):
+
+    """
+    SZ: More error checking needs to be performed in this method
+    """
+
+    try:
+      """
+      Elliot: 3/4 changed parse_utc_date to parse_date
+      """
+      if dateReported:
+        dateReported = iso8601.parse_date(dateReported)
+
+      adherenceitem_obj = AdherenceItem.objects.create(   
+                            name=name,
+                            name_type=name_type,
+                            name_value=name_value,
+                            name_abbrev=name_abbrev,
+                            reported_by=reportedBy,
+                            date_reported=dateReported,
+                            recurrence_index=recurrenceIndex,
+                            adherence=adherence,
+                            nonadherence_reason=nonadherenceReason)
+
+      return adherenceitem_obj
+    except Exception, e:
+      raise ValueError("problem processing medicationscheduleitem report " + str(e))
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/idp_objs/device.py indivo_server/indivo/document_processing/idp_objs/device.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/idp_objs/device.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/document_processing/idp_objs/device.py	2012-04-20 18:58:28.000000000 -0400
@@ -0,0 +1,57 @@
+from indivo.lib import iso8601
+from indivo.models import Device
+
+XML = 'xml'
+DOM = 'dom'
+
+class IDP_Device:
+
+  def post_data(self, name=None,
+                      name_type=None,
+                      name_value=None,
+                      name_abbrev=None,
+                      identity=None,
+                      identity_type=None,
+                      identity_value=None,
+                      identity_abbrev=None,
+                      type=None,
+                      type_type=None,
+                      type_value=None,
+                      type_abbrev=None,
+                      indication=None,
+                      vendor=None,
+                      vendor_type=None,
+                      vendor_value=None,
+                      vendor_abbrev=None,
+                      description=None,
+                      specification=None,
+                      certification=None):
+    """
+    SZ: More error checking needs to be performed in this method
+    """
+
+    try:
+      device_obj = Device.objects.create( name=name,
+                                          name_type=name_type,
+                                          name_value=name_value,
+                                          name_abbrev=name_abbrev,
+                                          identity=identity,
+                                          identity_type=identity_type,
+                                          identity_value=identity_value,
+                                          identity_abbrev=identity_abbrev,
+                                          type=type,
+                                          type_type=type_type,
+                                          type_value=type_value,
+                                          type_abbrev=type_abbrev,
+                                          indication=indication,
+                                          vendor=vendor,
+                                          vendor_type=vendor_type,
+                                          vendor_value=vendor_value,
+                                          vendor_abbrev=vendor_abbrev,
+                                          description=description,
+                                          specification=specification,
+                                          certification=certification)
+
+      return device_obj
+    except Exception, e:
+      raise ValueError("problem processing device report " + str(e))
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/idp_objs/equipmentscheduleitem.py indivo_server/indivo/document_processing/idp_objs/equipmentscheduleitem.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/idp_objs/equipmentscheduleitem.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/document_processing/idp_objs/equipmentscheduleitem.py	2012-02-21 07:36:45.000000000 -0500
@@ -0,0 +1,83 @@
+from indivo.lib import iso8601
+from indivo.models import EquipmentScheduleItem
+
+XML = 'xml'
+DOM = 'dom'
+
+class IDP_EquipmentScheduleItem:
+
+  def post_data(self, name=None,
+                      name_type=None,
+                      name_value=None,
+                      name_abbrev=None,
+                      scheduledBy=None,
+                      dateScheduled=None,
+                      dateStart=None,
+                      dateEnd=None,
+                      recurrenceRule_frequency=None,
+                      recurrenceRule_frequency_type=None,
+                      recurrenceRule_frequency_value=None,
+                      recurrenceRule_frequency_abbrev=None,
+                      recurrenceRule_interval=None,
+                      recurrenceRule_interval_type=None,
+                      recurrenceRule_interval_value=None,
+                      recurrenceRule_interval_abbrev=None,
+                      recurrenceRule_dateUntil=None,
+                      recurrenceRule_count=None,
+											instructions=None):
+
+    """
+    SZ: More error checking needs to be performed in this method
+    """
+
+    try:
+      if dateScheduled:
+        """
+        Elliot: 3/4 changed parse_utc_date to parse_date to handle XML:datetime
+        """
+        dateScheduled = iso8601.parse_date(dateScheduled)
+
+      if dateStart:
+        """
+        Elliot: 3/4 changed parse_utc_date to parse_date to handle XML:datetime
+        """
+        dateStart = iso8601.parse_date(dateStart)
+
+      if dateEnd:
+        """
+        Elliot: 3/4 changed parse_utc_date to parse_date to handle XML:datetime
+        """
+        dateEnd = iso8601.parse_date(dateEnd)
+
+      if recurrenceRule_dateUntil:
+        """
+        Elliot: 3/4 changed parse_utc_date to parse_date to handle XML:datetime
+        """
+        recurrenceRule_dateUntil = iso8601.parse_date(recurrenceRule_dateUntil)
+
+      equipmentscheduleitem_obj = EquipmentScheduleItem.objects.create(   
+                      name=name,
+                      name_type=name_type,
+                      name_value=name_value,
+                      name_abbrev=name_abbrev,
+                      scheduled_by=scheduledBy,
+											date_scheduled=dateScheduled,
+                      date_start=dateStart,
+                      date_end=dateEnd,
+                      recurrencerule_frequency=recurrenceRule_frequency,
+                      recurrencerule_frequency_type=recurrenceRule_frequency_type,
+                      recurrencerule_frequency_value=recurrenceRule_frequency_value,
+                      recurrencerule_frequency_abbrev=recurrenceRule_frequency_abbrev,
+                      recurrencerule_interval=recurrenceRule_interval,
+                      recurrencerule_interval_type=recurrenceRule_interval_type,
+                      recurrencerule_interval_value=recurrenceRule_interval_value,
+                      recurrencerule_interval_abbrev=recurrenceRule_interval_abbrev,
+                      recurrencerule_dateuntil=recurrenceRule_dateUntil,
+                      recurrencerule_count=recurrenceRule_count,
+											instructions=instructions)
+
+      return equipmentscheduleitem_obj
+    except Exception, e:
+      print "Error: " + str(e)
+      raise ValueError("problem processing equipmentscheduleitem report " + str(e))
+
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/idp_objs/healthactionoccurrence.py indivo_server/indivo/document_processing/idp_objs/healthactionoccurrence.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/idp_objs/healthactionoccurrence.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/document_processing/idp_objs/healthactionoccurrence.py	2012-04-19 17:04:31.000000000 -0400
@@ -0,0 +1,27 @@
+from indivo.lib import iso8601
+from indivo.models import HealthActionOccurrence
+
+XML = 'xml'
+DOM = 'dom'
+
+class IDP_HealthActionOccurrence:
+
+  def post_data(self, name=None,
+                      name_type=None,
+                      name_value=None,
+                      name_abbrev=None,
+                      recurrenceIndex=None):
+    """
+    SZ: More error checking needs to be performed in this method
+    """
+
+    try:
+      healthactionoccurrence_obj = HealthActionOccurrence.objects.create(name=name,
+                                                                         name_type=name_type,
+                                                                         name_value=name_value,
+                                                                         name_abbrev=name_abbrev,
+                                                                         recurrenceIndex=recurrenceIndex)
+
+      return healthactionoccurrence_obj
+    except Exception, e:
+      raise ValueError("problem processing healthactionoccurrence report " + str(e))
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/idp_objs/healthactionplan.py indivo_server/indivo/document_processing/idp_objs/healthactionplan.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/idp_objs/healthactionplan.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/document_processing/idp_objs/healthactionplan.py	2012-04-25 08:42:40.000000000 -0400
@@ -0,0 +1,527 @@
+from indivo.lib import iso8601
+from indivo.models import HealthActionPlan
+from indivo.models import Actions
+from indivo.models import StopConditions
+from indivo.models import Targets
+from indivo.models import MeasurementPlans
+from indivo.models import DevicePlans
+from indivo.models import MedicationPlans
+from lxml import etree
+from StringIO import StringIO
+import pprint
+
+class IDP_HealthActionPlan:
+
+    def process(self, root_node_name, xmldom, original_xml):
+        """
+        moving this to etree
+        """
+        retval_facts = []
+
+        hap = etree.XML(original_xml)
+        actions_element = hap.find('{http://indivo.org/vocab/xml/documents#}actions')
+        # force the actions_element subtree to contain newlines after each element
+        xml_str = etree.tostring(actions_element, pretty_print=True, method="xml")
+        actions_element = etree.XML(xml_str)
+
+        # if there is a DOM, use etree find
+        if xmldom is not None:
+            for fact in xmldom.findall('fact'):
+                # make a dictionary of the immediate children tags of the fact
+                new_fact = dict([(e.tag, e.text) for e in fact.getchildren()])
+                new_fact['actions'] = etree.tostring(fact.find('actions'))
+                actions_xml = etree.tostring(actions_element).split('\n')
+                clean_actions_xml = [tag.strip() for tag in actions_xml]
+                clean_actions_xml[0] = '<actions>'
+                new_fact['actions_xml'] = ''.join(clean_actions_xml)
+                #new_fact['actions_xml'] = new_fact['actions_xml'].replace('<action xsi:type="ActionGroup">', '<action type="ActionGroup">')
+                #new_fact['actions_xml'] = new_fact['actions_xml'].replace('<action xsi:type="ActionStep">', '<action type="ActionStep">')
+                retval_facts.append(new_fact)
+
+        if retval_facts:
+            return retval_facts
+        return False
+
+    def post_data(self, name=None,
+                        name_type=None,
+                        name_value=None,
+                        name_abbrev=None,
+                        planType=None,
+                        plannedBy=None,
+                        datePlanned=None,
+                        dateExpires=None,
+                        indication=None,
+                        instructions=None,
+                        system=None,
+                        system_type=None,
+                        system_value=None,
+                        system_abbrev=None,
+                        actions=None,
+                        actions_xml=None):
+        try:
+            #
+            # The first thing to do is to save just the HealthActionPlan record
+            #
+            if datePlanned: datePlanned = iso8601.parse_date(datePlanned)
+            if dateExpires: dateExpires = iso8601.parse_date(dateExpires)
+ 
+            healthactionplan_obj = HealthActionPlan.objects.create(name=name,
+                                                                   name_type=name_type,
+                                                                   name_value=name_value,
+                                                                   name_abbrev=name_abbrev,
+                                                                   planType=planType,
+                                                                   plannedBy=plannedBy,
+                                                                   datePlanned=datePlanned,
+                                                                   dateExpires=dateExpires,
+                                                                   indication=indication,
+                                                                   instructions=instructions,
+                                                                   system=system,
+                                                                   system_type=system_type,
+                                                                   system_value=system_value,
+                                                                   system_abbrev=system_abbrev,
+                                                                   actions=actions_xml)
+
+            #
+            # With the healthactionplan_obj, take the value of the "id" field
+            # and store it in each action record's healthactionplan_id field
+            #
+
+
+            #import pdb; pdb.set_trace()
+            #root = etree.XML(actions_xml)
+            #print etree.tostring(root, pretty_print=True, method="xml")
+            context = etree.iterparse(StringIO(actions), events=("start", "end"))
+
+            stopCondition = {}
+            target = {}
+            measurementPlan = {}
+            devicePlan = {}
+            medicationPlan = {}
+            groupplan = {}
+            stepplan = {}
+            action_type = ''
+
+            parent_tag = []
+
+            action_obj = None
+
+            #import pdb; pdb.set_trace()
+            for action, elem in context:
+                #print("%s: %s :%s" % (action, elem.tag, elem.text))
+                if elem.tag in ("actions", "stopConditions", "targets", "measurementPlans", "devicePlans", "medicationPlans"):
+                    # I don't care about these tags
+                    continue
+
+                if action == "start":
+
+                    #if elem.tag == "ActionStep":
+                    if elem.tag in ("ActionGroup", "ActionStep"):
+                        #print "Start ", elem.tag
+                        if action_type == "ActionGroup":
+                            #print "Start ", elem.tag
+
+                            #
+                            # For every action record stored, use the id attribute of action_obj
+                            # and store it in the action_id field of the following tables
+                            #
+                            action_obj = Actions.objects.create(action_type='ActionGroup',
+                                                   state='Start',
+                                                   healthactionplan_id=healthactionplan_obj.id,
+                                                   position=groupplan.get('position', None),
+                                                   position_type=groupplan.get('position_type', None),
+                                                   position_value=groupplan.get('position_value', None),
+                                                   position_abbrev=groupplan.get('position_abbrev', None),
+                                                   repeatCount=groupplan.get('repeatCount', 0))
+
+                            if groupplan.has_key('stopConditions'):
+                                for a_stopCondition in groupplan['stopConditions']:
+                                    StopConditions.objects.create(action_id=action_obj.id,
+                                                                  name=a_stopCondition.get('name', None),
+                                                                  name_type=a_stopCondition.get('name_type', None),
+                                                                  name_value=a_stopCondition.get('name_value', None),
+                                                                  name_abbrev=a_stopCondition.get('name_abbrev', None),
+                                                                  value_textvalue=a_stopCondition.get('value_textvalue', None),
+                                                                  value_value=a_stopCondition.get('value_value', None),
+                                                                  value_unit=a_stopCondition.get('value_unit', None),
+                                                                  value_unit_type=a_stopCondition.get('value_unit_type', None),
+                                                                  value_unit_value=a_stopCondition.get('value_unit_value', None),
+                                                                  value_unit_abbrev=a_stopCondition.get('value_unit_abbrev', None),
+                                                                  operator=a_stopCondition.get('operator', None),
+                                                                  operator_type=a_stopCondition.get('operator_type', None),
+                                                                  operator_value=a_stopCondition.get('operator_value', None),
+                                                                  operator_abbrev=a_stopCondition.get('operator_abbrev', None),
+                                                                  detail=a_stopCondition.get('detail', None),
+                                                                  detail_type=a_stopCondition.get('detail_type', None),
+                                                                  detail_value=a_stopCondition.get('detail_value', None),
+                                                                  detail_abbrev=a_stopCondition.get('detail_abbrev', None))
+
+                            if groupplan.has_key('targets'):
+                                for a_target in groupplan['targets']:
+                                    Targets.objects.create(action_id=action_obj.id,
+                                                           name=a_target.get('name', None),
+                                                           name_type=a_target.get('name_type', None),
+                                                           name_value=a_target.get('name_value', None),
+                                                           name_abbrev=a_target.get('name_abbrev', None),
+                                                           minimumValue_textvalue=a_target.get('minimumValue_textvalue', None),
+                                                           minimumValue_value=a_target.get('minimumValue_value', None),
+                                                           minimumValue_unit=a_target.get('minimumValue_unit', None),
+                                                           minimumValue_unit_type=a_target.get('minimumValue_unit_type', None),
+                                                           minimumValue_unit_value=a_target.get('minimumValue_unit_value', None),
+                                                           minimumValue_unit_abbrev=a_target.get('minimumValue_unit_abbrev', None),
+                                                           maximumValue_textvalue=a_target.get('maximumValue_textvalue', None),
+                                                           maximumValue_value=a_target.get('maximumValue_value', None),
+                                                           maximumValue_unit=a_target.get('maximumValue_unit', None),
+                                                           maximumValue_unit_type=a_target.get('maximumValue_unit_type', None),
+                                                           maximumValue_unit_value=a_target.get('maximumValue_unit_value', None),
+                                                           maximumValue_unit_abbrev=a_target.get('maximumValue_unit_abbrev', None),
+                                                           securityLevel=a_target.get('securityLevel', None),
+                                                           securityLevel_type=a_target.get('securityLevel_type', None),
+                                                           securityLevel_value=a_target.get('securityLevel_value', None),
+                                                           securityLevel_abbrev=a_target.get('securityLevel_abbrev', None))
+
+                            if groupplan.has_key('measurementPlans'):
+                                for a_measurementPlan in groupplan['measurementPlans']:
+                                    MeasurementPlans.objects.create(action_id=action_obj.id,
+                                                                    name=a_measurementPlan.get('name', None),
+                                                                    name_type=a_measurementPlan.get('name_type', None),
+                                                                    name_value=a_measurementPlan.get('name_value', None),
+                                                                    name_abbrev=a_measurementPlan.get('name_abbrev', None),
+                                                                    type=a_measurementPlan.get('type', None),
+                                                                    type_type=a_measurementPlan.get('type_type', None),
+                                                                    type_value=a_measurementPlan.get('type_value', None),
+                                                                    type_abbrev=a_measurementPlan.get('type_abbrev', None),
+                                                                    aggregationFunction=a_measurementPlan.get('aggregationFunction', None),
+                                                                    aggregationFunction_type=a_measurementPlan.get('aggregationFunction_type', None),
+                                                                    aggregationFunction_value=a_measurementPlan.get('aggregationFunction_value', None),
+                                                                    aggregationFunction_abbrev=a_measurementPlan.get('aggregationFunction_abbrev', None))
+
+                            if groupplan.has_key('devicePlans'):
+                                for a_devicePlan in groupplan['devicePlans']:
+                                    DevicePlans.objects.create(action_id=action_obj.id,
+                                                               name=a_devicePlan.get('name', None),
+                                                               name_type=a_devicePlan.get('name_type', None),
+                                                               name_value=a_devicePlan.get('name_value', None),
+                                                               name_abbrev=a_devicePlan.get('name_abbrev', None),
+                                                               type=a_devicePlan.get('type', None),
+                                                               type_type=a_devicePlan.get('type_type', None),
+                                                               type_value=a_devicePlan.get('type_value', None),
+                                                               type_abbrev=a_devicePlan.get('type_abbrev', None),
+                                                               value_textvalue=a_devicePlan.get('value_textvalue', None),
+                                                               value_value=a_devicePlan.get('value_value', None),
+                                                               value_unit=a_devicePlan.get('value_unit', None),
+                                                               value_unit_type=a_devicePlan.get('value_unit_type', None),
+                                                               value_unit_value=a_devicePlan.get('value_unit_value', None),
+                                                               value_unit_abbrev=a_devicePlan.get('value_unit_abbrev', None),
+                                                               site=a_devicePlan.get('site', None),
+                                                               site_type=a_devicePlan.get('site_type', None),
+                                                               site_value=a_devicePlan.get('site_value', None),
+                                                               site_abbrev=a_devicePlan.get('site_abbrev', None),
+                                                               instructions=a_devicePlan.get('instructions', None))
+
+                            if groupplan.has_key('medicationPlans'):
+                                for a_medicationPlan in groupplan['medicationPlans']:
+                                    MedicationPlans.objects.create(action_id=action_obj.id,
+                                                                   name=a_medicationPlan.get('name', None),
+                                                                   name_type=a_medicationPlan.get('name_type', None),
+                                                                   name_value=a_medicationPlan.get('name_value', None),
+                                                                   name_abbrev=a_medicationPlan.get('name_abbrev', None),
+                                                                   indication=a_medicationPlan.get('instructions', None),
+                                                                   dose_textvalue=a_medicationPlan.get('dose_textvalue', None),
+                                                                   dose_value=a_medicationPlan.get('dose_value', None),
+                                                                   dose_unit=a_medicationPlan.get('dose_unit', None),
+                                                                   dose_unit_type=a_medicationPlan.get('dose_unit_type', None),
+                                                                   dose_unit_value=a_medicationPlan.get('dose_unit_value', None),
+                                                                   dose_unit_abbrev=a_medicationPlan.get('dose_unit_abbrev', None),
+                                                                   route=a_medicationPlan.get('route', None),
+                                                                   route_type=a_medicationPlan.get('route_type', None),
+                                                                   route_value=a_medicationPlan.get('route_value', None),
+                                                                   route_abbrev=a_medicationPlan.get('route_abbrev', None))
+
+                            #
+                            # Prepare the following lists for the next ActionGroup tag
+                            #
+                            groupplan['stopConditions'] = []
+                            groupplan['targets'] = []
+                            groupplan['measurementPlans'] = []
+                            groupplan['devicePlans'] = []
+                            groupplan['medicationPlans'] = []
+                        
+                        if elem.tag == "ActionGroup":
+                            #
+                            # Make preparations for another ActionGroup element
+                            #
+                            action_type = 'ActionGroup'
+                            groupplan = {"action_type" : "ActionGroup"}
+                            groupplan['state'] = 'start'
+                            groupplan['repeatCount'] = None
+                            parent_tag.insert(0, elem.tag)
+
+                        if elem.tag == 'ActionStep':
+                            #
+                            # Make preparations for another ActionGroup element
+                            #
+                            action_type = 'ActionStep'
+                            stepplan = {"action_type" : "ActionStep"}
+                            stepplan['state'] = 'start'
+                            stepplan['name'] = None
+                            stepplan['name_type'] = None
+                            stepplan['name_value'] = None
+                            stepplan['name_abbrev'] = None
+                            stepplan['type'] = None
+                            stepplan['type_type'] = None
+                            stepplan['type_value'] = None
+                            stepplan['type_abbrev'] = None
+                            stepplan['additionalDetails'] = None
+                            stepplan['instructions'] = None
+                            parent_tag.insert(0, elem.tag)
+                        
+                        continue
+
+                    if elem.tag in ("stopCondition", "target", "measurementPlan", "devicePlan", "medicationPlan"):
+                        parent_tag.insert(0, elem.tag)
+                        continue
+
+                    #if len(parent_tag) == 0: continue
+
+                    if parent_tag[0] in ("stopCondition", "target", "measurementPlan", "devicePlan", "medicationPlan"):
+                        #print parent_tag[0], ' : ', elem.tag, ' : ', elem.text
+                        if parent_tag[0] == "stopCondition":
+                            stopCondition[elem.tag] = elem.text
+                            continue
+                        if parent_tag[0] == "target":
+                            target[elem.tag] = elem.text
+                            continue
+                        if parent_tag[0] == "measurementPlan":
+                            measurementPlan[elem.tag] = elem.text
+                            continue
+                        if parent_tag[0] == "devicePlan":
+                            devicePlan[elem.tag] = elem.text
+                            continue
+                        if parent_tag[0] == "medicationPlan":
+                            medicationPlan[elem.tag] = elem.text
+                            continue
+
+                    if parent_tag[0] == 'ActionGroup':
+                        groupplan[elem.tag] = elem.text
+                    if parent_tag[0] == 'ActionStep':
+                        stepplan[elem.tag] = elem.text
+
+
+                if action == "end":
+                    
+                    if elem.tag in ("stopCondition", "target", "measurementPlan", "devicePlan", "medicationPlan"):
+                        #print "***GROUP*****"
+                        #pprint.pprint(groupplan)
+                        #print "------STEP---"
+                        #pprint.pprint(stepplan)
+                        #print parent_tag[0], ' : ', elem.tag, ' : ', elem.text
+                        if elem.tag == "stopCondition" and len(stopCondition) > 0:
+                            if action_type == 'ActionGroup':
+                                if groupplan.has_key('stopConditions'):
+                                    groupplan['stopConditions'].append(stopCondition)
+                                else:
+                                    groupplan['stopConditions'] = [stopCondition,]
+                            else:
+                                if stepplan.has_key('stopConditions'):
+                                    stepplan['stopConditions'].append(stopCondition)
+                                else:
+                                    stepplan['stopConditions'] = [stopCondition,]
+                            stopCondition = {}
+                        if elem.tag == "target" and len(target) > 0:
+                            if action_type == 'ActionGroup':
+                                if groupplan.has_key('targets'):
+                                    groupplan['targets'].append(target)
+                                else:
+                                    groupplan['targets'] = [target,]
+                            else:
+                                if stepplan.has_key('targets'):
+                                    stepplan['targets'].append(target)
+                                else:
+                                    stepplan['targets'] = [target,]
+                            target = {}
+                        if elem.tag == "measurementPlan" and len(measurementPlan) > 0:
+                            if action_type == 'ActionGroup':
+                                if groupplan.has_key('measurementPlans'):
+                                    groupplan['measurementPlans'].append(measurementPlan)
+                                else:
+                                    groupplan['measurementPlans'] = [measurementPlan,]
+                            else:
+                                if stepplan.has_key('measurementPlans'):
+                                    stepplan['measurementPlans'].append(measurementPlan)
+                                else:
+                                    stepplan['measurementPlans'] = [measurementPlan,]
+                            measurementPlan = {}
+                        if elem.tag == "devicePlan" and len(devicePlan) > 0:
+                            if action_type == 'ActionGroup':
+                                if groupplan.has_key('devicePlans'):
+                                    groupplan['devicePlans'].append(devicePlan)
+                                else:
+                                    groupplan['devicePlans'] = [devicePlan,]
+                            else:
+                                if stepplan.has_key('devicePlan'):
+                                    stepplan['devicePlans'].append(devicePlan)
+                                else:
+                                    stepplan['devicePlans'] = [devicePlan,]
+                            devicePlan = {}
+                        if elem.tag == "medicationPlan" and len(medicationPlan) > 0:
+                            if action_type == 'ActionGroup':
+                                if groupplan.has_key('medicationPlans'):
+                                    groupplan['medicationPlans'].append(medicationPlan)
+                                else:
+                                    groupplan['medicationPlans'] = [medicationPlan,]
+                            else:
+                                if stepplan.has_key('medicationPlans'):
+                                    stepplan['medicationPlans'].append(medicationPlan)
+                                else:
+                                    stepplan['medicationPlans'] = [medicationPlan,]
+                            medicationPlan = {}
+                        parent_tag.pop(0)
+                        continue
+
+                    if elem.tag in ("ActionGroup", "ActionStep"):
+                        #print "End ", elem.tag
+                        if parent_tag[0] == "ActionStep":
+                            #
+                            # For every action record stored, use the id attribute of action_obj
+                            # and store it in the action_id field of the following tables
+                            #
+                            action_obj = Actions.objects.create(action_type=stepplan['action_type'],
+                                                                state=stepplan['state'],
+                                                                healthactionplan_id=healthactionplan_obj.id,
+                                                                position=stepplan.get('position', None),
+                                                                position_type=stepplan.get('position_type', None),
+                                                                position_value=stepplan.get('position_value', None),
+                                                                position_abbrev=stepplan.get('position_abbrev', None),
+                                                                name=stepplan.get('name', None),
+                                                                name_type=stepplan.get('name_type', None),
+                                                                name_value=stepplan.get('name_value', None),
+                                                                name_abbrev=stepplan.get('name_abbrev', None),
+                                                                type=stepplan.get('type', None),
+                                                                type_type=stepplan.get('type_type', None),
+                                                                type_value=stepplan.get('type_value', None),
+                                                                type_abbrev=stepplan.get('type_abbrev', None),
+                                                                additionalDetails=stepplan.get('additionalDetails', None),
+                                                                instructions=stepplan.get('instructions', None))
+
+                            if stepplan.has_key('stopConditions'):
+                                for a_stopCondition in stepplan['stopConditions']:
+                                    StopConditions.objects.create(action_id=action_obj.id,
+                                                                  name=a_stopCondition.get('name', None),
+                                                                  name_type=a_stopCondition.get('name_type', None),
+                                                                  name_value=a_stopCondition.get('name_value', None),
+                                                                  name_abbrev=a_stopCondition.get('name_abbrev', None),
+                                                                  value_textvalue=a_stopCondition.get('value_textvalue', None),
+                                                                  value_value=a_stopCondition.get('value_value', None),
+                                                                  value_unit=a_stopCondition.get('value_unit', None),
+                                                                  value_unit_type=a_stopCondition.get('value_unit_type', None),
+                                                                  value_unit_value=a_stopCondition.get('value_unit_value', None),
+                                                                  value_unit_abbrev=a_stopCondition.get('value_unit_abbrev', None),
+                                                                  operator=a_stopCondition.get('operator', None),
+                                                                  operator_type=a_stopCondition.get('operator_type', None),
+                                                                  operator_value=a_stopCondition.get('operator_value', None),
+                                                                  operator_abbrev=a_stopCondition.get('operator_abbrev', None),
+                                                                  detail=a_stopCondition.get('detail', None),
+                                                                  detail_type=a_stopCondition.get('detail_type', None),
+                                                                  detail_value=a_stopCondition.get('detail_value', None),
+                                                                  detail_abbrev=a_stopCondition.get('detail_abbrev', None))
+
+                            if stepplan.has_key('targets'):
+                                for a_target in stepplan['targets']:
+                                    Targets.objects.create(action_id=action_obj.id,
+                                                           name=a_target.get('name', None),
+                                                           name_type=a_target.get('name_type', None),
+                                                           name_value=a_target.get('name_value', None),
+                                                           name_abbrev=a_target.get('name_abbrev', None),
+                                                           minimumValue_textvalue=a_target.get('minimumValue_textvalue', None),
+                                                           minimumValue_value=a_target.get('minimumValue_value', None),
+                                                           minimumValue_unit=a_target.get('minimumValue_unit', None),
+                                                           minimumValue_unit_type=a_target.get('minimumValue_unit_type', None),
+                                                           minimumValue_unit_value=a_target.get('minimumValue_unit_value', None),
+                                                           minimumValue_unit_abbrev=a_target.get('minimumValue_unit_abbrev', None),
+                                                           maximumValue_textvalue=a_target.get('maximumValue_textvalue', None),
+                                                           maximumValue_value=a_target.get('maximumValue_value', None),
+                                                           maximumValue_unit=a_target.get('maximumValue_unit', None),
+                                                           maximumValue_unit_type=a_target.get('maximumValue_unit_type', None),
+                                                           maximumValue_unit_value=a_target.get('maximumValue_unit_value', None),
+                                                           maximumValue_unit_abbrev=a_target.get('maximumValue_unit_abbrev', None),
+                                                           securityLevel=a_target.get('securityLevel', None),
+                                                           securityLevel_type=a_target.get('securityLevel_type', None),
+                                                           securityLevel_value=a_target.get('securityLevel_value', None),
+                                                           securityLevel_abbrev=a_target.get('securityLevel_abbrev', None))
+
+                            if stepplan.has_key('measurementPlans'):
+                                for a_measurementPlan in stepplan['measurementPlans']:
+                                    MeasurementPlans.objects.create(action_id=action_obj.id,
+                                                                    name=a_measurementPlan.get('name', None),
+                                                                    name_type=a_measurementPlan.get('name_type', None),
+                                                                    name_value=a_measurementPlan.get('name_value', None),
+                                                                    name_abbrev=a_measurementPlan.get('name_abbrev', None),
+                                                                    type=a_measurementPlan.get('type', None),
+                                                                    type_type=a_measurementPlan.get('type_type', None),
+                                                                    type_value=a_measurementPlan.get('type_value', None),
+                                                                    type_abbrev=a_measurementPlan.get('type_abbrev', None),
+                                                                    aggregationFunction=a_measurementPlan.get('aggregationFunction', None),
+                                                                    aggregationFunction_type=a_measurementPlan.get('aggregationFunction_type', None),
+                                                                    aggregationFunction_value=a_measurementPlan.get('aggregationFunction_value', None),
+                                                                    aggregationFunction_abbrev=a_measurementPlan.get('aggregationFunction_abbrev', None))
+
+                            if stepplan.has_key('devicePlans'):
+                                for a_devicePlan in stepplan['devicePlans']:
+                                    DevicePlans.objects.create(action_id=action_obj.id,
+                                                               name=a_devicePlan.get('name', None),
+                                                               name_type=a_devicePlan.get('name_type', None),
+                                                               name_value=a_devicePlan.get('name_value', None),
+                                                               name_abbrev=a_devicePlan.get('name_abbrev', None),
+                                                               type=a_devicePlan.get('type', None),
+                                                               type_type=a_devicePlan.get('type_type', None),
+                                                               type_value=a_devicePlan.get('type_value', None),
+                                                               type_abbrev=a_devicePlan.get('type_abbrev', None),
+                                                               value_textvalue=a_devicePlan.get('value_textvalue', None),
+                                                               value_value=a_devicePlan.get('value_value', None),
+                                                               value_unit=a_devicePlan.get('value_unit', None),
+                                                               value_unit_type=a_devicePlan.get('value_unit_type', None),
+                                                               value_unit_value=a_devicePlan.get('value_unit_value', None),
+                                                               value_unit_abbrev=a_devicePlan.get('value_unit_abbrev', None),
+                                                               site=a_devicePlan.get('site', None),
+                                                               site_type=a_devicePlan.get('site_type', None),
+                                                               site_value=a_devicePlan.get('site_value', None),
+                                                               site_abbrev=a_devicePlan.get('site_abbrev', None),
+                                                               instructions=a_devicePlan.get('instructions', None))
+
+                            if stepplan.has_key('medicationPlans'):
+                                for a_medicationPlan in stepplan['medicationPlans']:
+                                    MedicationPlans.objects.create(action_id=action_obj.id,
+                                                                   name=a_medicationPlan.get('name', None),
+                                                                   name_type=a_medicationPlan.get('name_type', None),
+                                                                   name_value=a_medicationPlan.get('name_value', None),
+                                                                   name_abbrev=a_medicationPlan.get('name_abbrev', None),
+                                                                   indication=a_medicationPlan.get('instructions', None),
+                                                                   dose_textvalue=a_medicationPlan.get('dose_textvalue', None),
+                                                                   dose_value=a_medicationPlan.get('dose_value', None),
+                                                                   dose_unit=a_medicationPlan.get('dose_unit', None),
+                                                                   dose_unit_type=a_medicationPlan.get('dose_unit_type', None),
+                                                                   dose_unit_value=a_medicationPlan.get('dose_unit_value', None),
+                                                                   dose_unit_abbrev=a_medicationPlan.get('dose_unit_abbrev', None),
+                                                                   route=a_medicationPlan.get('route', None),
+                                                                   route_type=a_medicationPlan.get('route_type', None),
+                                                                   route_value=a_medicationPlan.get('route_value', None),
+                                                                   route_abbrev=a_medicationPlan.get('route_abbrev', None))
+
+                            #
+                            # Prepare the following lists for the next ActionStep tag
+                            #
+                            stepplan['stopConditions'] = []
+                            stepplan['targets'] = []
+                            stepplan['measurementPlans'] = []
+                            stepplan['devicePlans'] = []
+                            stepplan['medicationPlans'] = []
+
+                        Actions.objects.create(action_type=elem.tag,
+                                               state='end',
+                                               healthactionplan_id=healthactionplan_obj.id)
+                        parent_tag.pop(0)
+                        continue
+            
+            return healthactionplan_obj
+        except Exception, e:
+              raise ValueError("problem processing healthactionplan report " + str(e))
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/idp_objs/healthactionresult.py indivo_server/indivo/document_processing/idp_objs/healthactionresult.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/idp_objs/healthactionresult.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/document_processing/idp_objs/healthactionresult.py	2012-04-24 20:05:48.000000000 -0400
@@ -0,0 +1,553 @@
+from indivo.lib import iso8601
+from indivo.models import HealthActionResult
+from indivo.models import ActionResults
+from indivo.models import StopConditionResults
+from indivo.models import Occurrences
+from indivo.models import Measurements
+from indivo.models import DeviceResults
+from indivo.models import MedicationAdministrations
+from lxml import etree
+from StringIO import StringIO
+
+class IDP_HealthActionResult:
+
+    def process(self, root_node_name, xmldom, original_xml):
+        """
+        moving this to etree
+        """
+        retval_facts = []
+
+        hap = etree.XML(original_xml)
+        actions_element = hap.find('{http://indivo.org/vocab/xml/documents#}actions')
+        # force the actions_element subtree to contain newlines after each element
+        xml_str = etree.tostring(actions_element, pretty_print=True, method="xml")
+        actions_element = etree.XML(xml_str)
+
+        # if there is a DOM, use etree find
+        if xmldom is not None:
+            for fact in xmldom.findall('fact'):
+                # make a dictionary of the immediate children tags of the fact
+                new_fact = dict([(e.tag, e.text) for e in fact.getchildren()])
+                new_fact['actions'] = etree.tostring(fact.find('actions'))
+                actions_xml = etree.tostring(actions_element).split('\n')
+                clean_actions_xml = [tag.strip() for tag in actions_xml]
+                clean_actions_xml[0] = '<actions>'
+                new_fact['actions_xml'] = ''.join(clean_actions_xml)
+                #new_fact['actions_xml'] = new_fact['actions_xml'].replace('<action xsi:type="ActionGroupResult">', '<action type="ActionGroupResult">')
+                #new_fact['actions_xml'] = new_fact['actions_xml'].replace('<action xsi:type="ActionStepResult">', '<action type="ActionStepResult">')
+                retval_facts.append(new_fact)
+
+        if retval_facts:
+            return retval_facts
+        return False
+
+    def post_data(self, name=None,
+                        name_type=None,
+                        name_value=None,
+                        name_abbrev=None,
+                        planType=None,
+                        reportedBy=None,
+                        dateReported=None,
+                        actions=None,
+                        actions_xml=None):
+        OCCURRENCE_TEST = False
+        try:
+            #
+            # The first thing to do is to save just the HealthActionPlan record
+            #
+
+            # Convert datetime field
+            if dateReported: dateReported = iso8601.parse_date(dateReported)
+ 
+            healthactionresult_obj = HealthActionResult.objects.create(name=name,
+                                                                     name_type=name_type,
+                                                                     name_value=name_value,
+                                                                     name_abbrev=name_abbrev,
+                                                                     planType=planType,
+                                                                     reportedBy=reportedBy,
+                                                                     dateReported=dateReported,
+                                                                     actions=actions_xml)
+
+            #
+            # With the healthactionresult_obj, take the value of the "id" field
+            # and store it in each action record's healthactionresult_id field
+            #
+
+
+            #import pdb; pdb.set_trace()
+            #root = etree.XML(actions_xml)
+            #print etree.tostring(root, pretty_print=True, method="xml")
+            context = etree.iterparse(StringIO(actions), events=("start", "end"))
+
+            occurrence = {}
+            measurement = {}
+            deviceResult = {}
+            medicationAdministration = {}
+            occurrence_stopCondition = {}
+            occurrence_measurement = {}
+            occurrence_deviceResult = {}
+            occurrence_medicationAdministration = {}
+            groupresult = {}
+            stepresult = {}
+            action_type = ''
+
+            parent_tag = []
+
+            action_obj = None
+
+
+            #import pdb; pdb.set_trace()
+            for action, elem in context:
+                #print("%s: %s :%s" % (action, elem.tag, elem.text))
+                if elem.tag in ("actions", "occurrences", "measurements", "deviceResults", "medicationAdministrations"):
+                    # I don't care about these tags
+                    continue
+
+                if action == "start":
+                    #if elem.tag == "ActionStepResult":
+                    if elem.tag in ("ActionGroupResult", "ActionStepResult"):
+                        #print "Start ", elem.tag
+                        if action_type == "ActionGroupResult":
+                            #print "Start ", elem.tag
+
+                            #
+                            # For every action record stored, use the id attribute of action_obj
+                            # and store it in the action_id field of the following tables
+                            #
+                            action_obj = ActionResults.objects.create(action_type='ActionGroupResult',
+                                                   state='Start',
+                                                   healthactionresult_id=healthactionresult_obj.id,
+                                                   name=groupresult.get('name', None),
+                                                   name_type=groupresult.get('name_type', None),
+                                                   name_value=groupresult.get('name_value', None),
+                                                   name_abbrev=groupresult.get('name_abbrev', None))
+
+                            if groupresult.has_key('measurements'):
+                                for a_measurement in groupresult['measurements']:
+                                    Measurements.objects.create(action_id=action_obj.id,
+                                                                occurrence_id=None,
+                                                                name=a_measurement.get('name', None),
+                                                                name_type=a_measurement.get('name_type', None),
+                                                                name_value=a_measurement.get('name_value', None),
+                                                                name_abbrev=a_measurement.get('name_abbrev', None),
+                                                                type=a_measurement.get('type', None),
+                                                                type_type=a_measurement.get('type_type', None),
+                                                                type_value=a_measurement.get('type_value', None),
+                                                                type_abbrev=a_measurement.get('type_abbrev', None),
+                                                                value_textvalue=a_measurement.get('value_textvalue', None),
+                                                                value_value=a_measurement.get('value_value', None),
+                                                                value_unit=a_measurement.get('value_unit', None),
+                                                                value_unit_type=a_measurement.get('value_unit_type', None),
+                                                                value_unit_value=a_measurement.get('value_unit_value', None),
+                                                                value_unit_abbrev=a_measurement.get('value_unit_abbrev', None),
+                                                                aggregationFunction=a_measurement.get('aggregationFunction', None),
+                                                                aggregationFunction_type=a_measurement.get('aggregationFunction_type', None),
+                                                                aggregationFunction_value=a_measurement.get('aggregationFunction_value', None),
+                                                                aggregationFunction_abbrev=a_measurement.get('aggregationFunction_abbrev', None))
+
+                            if groupresult.has_key('deviceResults'):
+                                for a_devicePlan in groupresult['deviceResults']:
+                                    DeviceResults.objects.create(action_id=action_obj.id,
+                                                                 occurrence_id=None,
+                                                                 name=a_devicePlan.get('name', None),
+                                                                 name_type=a_devicePlan.get('name_type', None),
+                                                                 name_value=a_devicePlan.get('name_value', None),
+                                                                 name_abbrev=a_devicePlan.get('name_abbrev', None),
+                                                                 type=a_devicePlan.get('type', None),
+                                                                 type_type=a_devicePlan.get('type_type', None),
+                                                                 type_value=a_devicePlan.get('type_value', None),
+                                                                 type_abbrev=a_devicePlan.get('type_abbrev', None),
+                                                                 value_textvalue=a_devicePlan.get('value_textvalue', None),
+                                                                 value_value=a_devicePlan.get('value_value', None),
+                                                                 value_unit=a_devicePlan.get('value_unit', None),
+                                                                 value_unit_type=a_devicePlan.get('value_unit_type', None),
+                                                                 value_unit_value=a_devicePlan.get('value_unit_value', None),
+                                                                 value_unit_abbrev=a_devicePlan.get('value_unit_abbrev', None),
+                                                                 site=a_devicePlan.get('site', None),
+                                                                 site_type=a_devicePlan.get('site_type', None),
+                                                                 site_value=a_devicePlan.get('site_value', None),
+                                                                 site_abbrev=a_devicePlan.get('site_abbrev', None))
+
+                            if groupresult.has_key('medicationAdministrations'):
+                                for a_medicationAdministration in groupresult['medicationAdministrations']:
+                                    MedicationAdministrations.objects.create(action_id=action_obj.id,
+                                                                             occurrence_id=None,
+                                                                             name=a_medicationAdministration.get('name', None),
+                                                                             name_type=a_medicationAdministration.get('name_type', None),
+                                                                             name_value=a_medicationAdministration.get('name_value', None),
+                                                                             name_abbrev=a_medicationAdministration.get('name_abbrev', None),
+                                                                             dose=a_medicationAdministration.get('dose', None),
+                                                                             dose_type=a_medicationAdministration.get('dose_type', None),
+                                                                             dose_value=a_medicationAdministration.get('dose_value', None),
+                                                                             dose_abbrev=a_medicationAdministration.get('dose_abbrev', None),
+                                                                             route_textvalue=a_medicationAdministration.get('route_textvalue', None),
+                                                                             route_value=a_medicationAdministration.get('route_value', None),
+                                                                             route_unit=a_medicationAdministration.get('route_unit', None),
+                                                                             route_unit_type=a_medicationAdministration.get('route_unit_type', None),
+                                                                             route_unit_value=a_medicationAdministration.get('route_unit_value', None),
+                                                                             route_unit_abbrev=a_medicationAdministration.get('route_unit_abbrev', None))
+
+                            #
+                            # Prepare the following lists for the next ActionGroupResult tag
+                            #
+                            groupresult['measurements'] = []
+                            groupresult['deviceResults'] = []
+                            groupresult['medicationAdministrations'] = []
+                        
+                        if elem.tag == "ActionGroupResult":
+                            #
+                            # Make preparations for another ActionGroupResult element
+                            #
+                            action_type = 'ActionGroupResult'
+                            groupresult = {"action_type" : "ActionGroupResult"}
+                            groupresult['state'] = 'start'
+                            groupresult['repeatCount'] = None
+                            parent_tag.insert(0, elem.tag)
+
+                        if elem.tag == 'ActionStepResult':
+                            #
+                            # Make preparations for another ActionGroupResult element
+                            #
+                            action_type = 'ActionStepResult'
+                            stepresult = {"action_type" : "ActionStepResult"}
+                            stepresult['state'] = 'start'
+                            stepresult['name'] = None
+                            stepresult['name_type'] = None
+                            stepresult['name_value'] = None
+                            stepresult['name_abbrev'] = None
+                            stepresult['type'] = None
+                            stepresult['type_type'] = None
+                            stepresult['type_value'] = None
+                            stepresult['type_abbrev'] = None
+                            stepresult['additionalDetails'] = None
+                            stepresult['instructions'] = None
+                            parent_tag.insert(0, elem.tag)
+                        
+                        continue
+
+                    if elem.tag in ("occurrence", "stopCondition", "measurement", "deviceResult", "medicationAdministration"):
+                        parent_tag.insert(0, elem.tag)
+                        continue
+
+                    #if len(parent_tag) == 0: continue
+                    if parent_tag[0] in ("occurrence", "stopCondition", "measurement", "deviceResult", "medicationAdministration"):
+                        #print parent_tag[0], ' : ', elem.tag, ' : ', elem.text
+                        if parent_tag[0] == "occurrence":
+                            occurrence[elem.tag] = elem.text
+                            OCCURRENCE_TEST = True
+                            continue
+                        if parent_tag[0] == "stopCondition":
+                            if OCCURRENCE_TEST:
+                                occurrence_stopCondition[elem.tag] = elem.text
+                            else:
+                                continue
+                        if parent_tag[0] == "measurement":
+                            if OCCURRENCE_TEST:
+                                occurrence_measurement[elem.tag] = elem.text
+                            else:
+                                measurement[elem.tag] = elem.text
+                            continue
+                        if parent_tag[0] == "deviceResult":
+                            if OCCURRENCE_TEST:
+                                occurrence_deviceResult[elem.tag] = elem.text
+                            else:
+                                deviceResult[elem.tag] = elem.text
+                            continue
+                        if parent_tag[0] == "medicationAdministration":
+                            if OCCURRENCE_TEST:
+                                occurrence_medicationAdministration[elem.tag] = elem.text
+                            else:
+                                medicationAdministration[elem.tag] = elem.text
+                            continue
+
+                    if parent_tag[0] == 'ActionGroupResult':
+                        groupresult[elem.tag] = elem.text
+                    if parent_tag[0] == 'ActionStepResult':
+                        stepresult[elem.tag] = elem.text
+
+
+                if action == "end":
+                    if elem.tag in ("occurrence", "stopCondition", "measurement", "deviceResult", "medicationAdministration"):
+                        #print "***GROUP*****"
+                        #pprint.pprint(groupresult)
+                        #print "------STEP---"
+                        #pprint.pprint(stepresult)
+                        #print parent_tag[0], ' : ', elem.tag, ' : ', elem.text
+                        if elem.tag == "occurrence" and len(occurrence) > 0: # <== This test may have to change...
+                            OCCURRENCE_TEST = False
+                            if action_type == 'ActionStepResult':
+                                if stepresult.has_key('occurrences'):
+                                    stepresult['occurrences'].append(occurrence)
+                                else:
+                                    stepresult['occurrences'] = [occurrence,]
+                                occurrence = {}
+                        if elem.tag == "stopCondition" and len(occurrence_stopCondition) > 0:
+                            if action_type == 'ActionStepResult':
+                                if OCCURRENCE_TEST:
+                                    if stepresult.has_key('occurrence_stopCondition'):
+                                        stepresult['occurrence_stopCondition'].append(occurrence_stopCondition)
+                                    else:
+                                        stepresult['occurrence_stopCondition'] = [occurrence_stopCondition,]
+                                    occurrence_stopCondition = {}
+                        if elem.tag == "measurement" and (len(measurement) > 0 or len(occurrence_measurement) > 0):
+                            if action_type == 'ActionGroupResult':
+                                if groupresult.has_key('measurements'):
+                                    groupresult['measurements'].append(measurement)
+                                else:
+                                    groupresult['measurements'] = [measurement,]
+                                measurement = {}
+                            else:
+                                if OCCURRENCE_TEST:
+                                    if stepresult.has_key('occurrence_measurements'):
+                                        stepresult['occurrence_measurements'].append(occurrence_measurement)
+                                    else:
+                                        stepresult['occurrence_measurements'] = [occurrence_measurement,]
+                                    occurrence_measurement = {}
+                                else:
+                                    if stepresult.has_key('measurements'):
+                                        stepresult['measurements'].append(measurement)
+                                    else:
+                                        stepresult['measurements'] = [measurement,]
+                                    measurement = {}
+                        if elem.tag == "deviceResult" and (len(deviceResult) > 0 or len(occurrence_deviceResult) > 0):
+                            if action_type == 'ActionGroupResult':
+                                if groupresult.has_key('deviceResults'):
+                                    groupresult['deviceResults'].append(deviceResult)
+                                else:
+                                    groupresult['deviceResults'] = [deviceResult,]
+                                deviceResult = {}
+                            else:
+                                if OCCURRENCE_TEST:
+                                    if stepresult.has_key('occurrence_deviceResults'):
+                                        stepresult['occurrence_deviceResults'].append(occurrence_deviceResult)
+                                    else:
+                                        stepresult['occurrence_deviceResults'] = [occurrence_deviceResult,]
+                                    occurrence_deviceResult = {}
+                                else:
+                                    if stepresult.has_key('deviceResults'):
+                                        stepresult['deviceResults'].append(deviceResult)
+                                    else:
+                                        stepresult['deviceResults'] = [deviceResult,]
+                                    deviceResult = {}
+                        if elem.tag == "medicationAdministration" and \
+                                (len(medicationAdministration) > 0 or len(occurrence_medicationAdministration) > 0):
+                            if action_type == 'ActionGroupResult':
+                                if groupresult.has_key('medicationAdministrations'):
+                                    groupresult['medicationAdministrations'].append(medicationAdministration)
+                                else:
+                                    groupresult['medicationAdministrations'] = [medicationAdministration,]
+                                medicationAdministration = {}
+                            else:
+                                if OCCURRENCE_TEST:
+                                    if stepresult.has_key('occurrence_medicationAdministrations'):
+                                        stepresult['occurrence_medicationAdministrations'].append(occurrence_medicationAdministration)
+                                    else:
+                                        stepresult['occurrence_medicationAdministrations'] = [occurrence_medicationAdministration,]
+                                    occurrence_medicationAdministration = {}
+                                else:
+                                    if stepresult.has_key('medicationAdministrations'):
+                                        stepresult['medicationAdministrations'].append(medicationAdministration)
+                                    else:
+                                        stepresult['medicationAdministrations'] = [medicationAdministration,]
+                                    medicationAdministration = {}
+                        parent_tag.pop(0)
+                        continue
+
+                    if elem.tag in ("ActionGroupResult", "ActionStepResult"):
+                        #print "End ", elem.tag
+                        if parent_tag[0] == "ActionStepResult":
+                            #
+                            # For every action record stored, use the id attribute of action_obj
+                            # and store it in the action_id field of the following tables
+                            #
+                            action_obj = ActionResults.objects.create(action_type='ActionStepResult',
+                                                                state='Start',
+                                                                healthactionresult_id=healthactionresult_obj.id,
+                                                                name=stepresult.get('name', None),
+                                                                name_type=stepresult.get('name_type', None),
+                                                                name_value=stepresult.get('name_value', None),
+                                                                name_abbrev=stepresult.get('name_abbrev', None))
+
+                            if stepresult.has_key('occurrences'):
+                                for an_occurrence in stepresult['occurrences']:
+                                    # Convert datetime fields
+                                    startTime = an_occurrence.get('startTime', None)
+                                    if startTime != None:
+                                        startTime = iso8601.parse_date(startTime)
+                                    endTime = an_occurrence.get('endTime', None)
+                                    if endTime != None:
+                                        endTime = iso8601.parse_date(endTime)
+                                    occurrence_obj = Occurrences.objects.create(action_id=action_obj.id,
+                                                                                startTime=startTime,
+                                                                                endTime=endTime,
+                                                                                additionalDetails=an_occurrence.get('additionalDetails', None))
+
+                                    # TODO: Add code responsible for creating the measurements, devicePlans and medicationAdministrations
+                                    #       records which relate to this the Occurrence record created above
+                                    if stepresult.has_key('occurrence_stopCondition'):
+                                        for a_stopCondition in stepresult['occurrence_stopCondition']:
+                                            StopConditionResults.objects.create(action_id=action_obj.id,
+                                                                                occurrence_id=occurrence_obj.id,
+                                                                                name=a_stopCondition.get('name', None),
+                                                                                name_type=a_stopCondition.get('name_type', None),
+                                                                                name_value=a_stopCondition.get('name_value', None),
+                                                                                name_abbrev=a_stopCondition.get('name_abbrev', None),
+                                                                                value_textvalue=a_stopCondition.get('value_textvalue', None),
+                                                                                value_value=a_stopCondition.get('value_value', None),
+                                                                                value_unit=a_stopCondition.get('value_unit', None),
+                                                                                value_unit_type=a_stopCondition.get('value_unit_type', None),
+                                                                                value_unit_value=a_stopCondition.get('value_unit_value', None),
+                                                                                value_unit_abbrev=a_stopCondition.get('value_unit_abbrev', None))
+
+                                    if stepresult.has_key('occurrence_measurements'):
+                                        for a_measurement in stepresult['occurrence_measurements']:
+                                            Measurements.objects.create(action_id=action_obj.id,
+                                                                        occurrence_id=occurrence_obj.id,
+                                                                        name=a_measurement.get('name', None),
+                                                                        name_type=a_measurement.get('name_type', None),
+                                                                        name_value=a_measurement.get('name_value', None),
+                                                                        name_abbrev=a_measurement.get('name_abbrev', None),
+                                                                        type=a_measurement.get('type', None),
+                                                                        type_type=a_measurement.get('type_type', None),
+                                                                        type_value=a_measurement.get('type_value', None),
+                                                                        type_abbrev=a_measurement.get('type_abbrev', None),
+                                                                        value_textvalue=an_occurrence.get('value_textvalue', None),
+                                                                        value_value=a_measurement.get('value_value', None),
+                                                                        value_unit=a_measurement.get('value_unit', None),
+                                                                        value_unit_type=a_measurement.get('value_unit_type', None),
+                                                                        value_unit_value=a_measurement.get('value_unit_value', None),
+                                                                        value_unit_abbrev=a_measurement.get('value_unit_abbrev', None),
+                                                                        aggregationFunction=a_measurement.get('aggregationFunction', None),
+                                                                        aggregationFunction_type=a_measurement.get('aggregationFunction_type', None),
+                                                                        aggregationFunction_value=a_measurement.get('aggregationFunction_value', None),
+                                                                        aggregationFunction_abbrev=a_measurement.get('aggregationFunction_abbrev', None))
+
+                                    if stepresult.has_key('occurrence_deviceResults'):
+                                        for a_devicePlan in stepresult['occurrence_deviceResults']:
+                                            DeviceResults.objects.create(action_id=action_obj.id,
+                                                                         occurrence_id=occurrence_obj.id,
+                                                                         name=a_devicePlan.get('name', None),
+                                                                         name_type=a_devicePlan.get('name_type', None),
+                                                                         name_value=a_devicePlan.get('name_value', None),
+                                                                         name_abbrev=a_devicePlan.get('name_abbrev', None),
+                                                                         type=a_devicePlan.get('type', None),
+                                                                         type_type=a_devicePlan.get('type_type', None),
+                                                                         type_value=a_devicePlan.get('type_value', None),
+                                                                         type_abbrev=a_devicePlan.get('type_abbrev', None),
+                                                                         value_textvalue=a_devicePlan.get('value_textvalue', None),
+                                                                         value_value=a_devicePlan.get('value_value', None),
+                                                                         value_unit=a_devicePlan.get('value_unit', None),
+                                                                         value_unit_type=a_devicePlan.get('value_unit_type', None),
+                                                                         value_unit_value=a_devicePlan.get('value_unit_value', None),
+                                                                         value_unit_abbrev=a_devicePlan.get('value_unit_abbrev', None),
+                                                                         site=a_devicePlan.get('site', None),
+                                                                         site_type=a_devicePlan.get('site_type', None),
+                                                                         site_value=a_devicePlan.get('site_value', None),
+                                                                         site_abbrev=a_devicePlan.get('site_abbrev', None))
+
+                                    if stepresult.has_key('occurrence_medicationAdministrations'):
+                                        for a_medicationAdministration in stepresult['occurrence_medicationAdministrations']:
+                                            MedicationAdministrations.objects.create(action_id=action_obj.id,
+                                                                                     occurrence_id=occurrence_obj.id,
+                                                                                     name=a_medicationAdministration.get('name', None),
+                                                                                     name_type=a_medicationAdministration.get('name_type', None),
+                                                                                     name_value=a_medicationAdministration.get('name_value', None),
+                                                                                     name_abbrev=a_medicationAdministration.get('name_abbrev', None),
+                                                                                     dose=a_medicationAdministration.get('dose', None),
+                                                                                     dose_type=a_medicationAdministration.get('dose_type', None),
+                                                                                     dose_value=a_medicationAdministration.get('dose_value', None),
+                                                                                     dose_abbrev=a_medicationAdministration.get('dose_abbrev', None),
+                                                                                     route_textvalue=a_medicationAdministration.get('route_textvalue', None),
+                                                                                     route_value=a_medicationAdministration.get('route_value', None),
+                                                                                     route_unit=a_medicationAdministration.get('route_unit', None),
+                                                                                     route_unit_type=a_medicationAdministration.get('route_unit_type', None),
+                                                                                     route_unit_value=a_medicationAdministration.get('route_unit_value', None),
+                                                                                     route_unit_abbrev=a_medicationAdministration.get('route_unit_abbrev', None))
+
+
+                            if stepresult.has_key('measurements'):
+                                for a_measurement in stepresult['measurements']:
+                                    Measurements.objects.create(action_id=action_obj.id,
+                                                                occurrence_id=None,
+                                                                name=a_measurement.get('name', None),
+                                                                name_type=a_measurement.get('name_type', None),
+                                                                name_value=a_measurement.get('name_value', None),
+                                                                name_abbrev=a_measurement.get('name_abbrev', None),
+                                                                type=a_measurement.get('type', None),
+                                                                type_type=a_measurement.get('type_type', None),
+                                                                type_value=a_measurement.get('type_value', None),
+                                                                type_abbrev=a_measurement.get('type_abbrev', None),
+                                                                value_textvalue=an_occurrence.get('value_textvalue', None),
+                                                                value_value=a_measurement.get('value_value', None),
+                                                                value_unit=a_measurement.get('value_unit', None),
+                                                                value_unit_type=a_measurement.get('value_unit_type', None),
+                                                                value_unit_value=a_measurement.get('value_unit_value', None),
+                                                                value_unit_abbrev=a_measurement.get('value_unit_abbrev', None),
+                                                                aggregationFunction=a_measurement.get('aggregationFunction', None),
+                                                                aggregationFunction_type=a_measurement.get('aggregationFunction_type', None),
+                                                                aggregationFunction_value=a_measurement.get('aggregationFunction_value', None),
+                                                                aggregationFunction_abbrev=a_measurement.get('aggregationFunction_abbrev', None))
+
+                            if stepresult.has_key('deviceResults'):
+                                for a_devicePlan in stepresult['deviceResults']:
+                                    DeviceResults.objects.create(action_id=action_obj.id,
+                                                                 occurrence_id=None,
+                                                                 name=a_devicePlan.get('name', None),
+                                                                 name_type=a_devicePlan.get('name_type', None),
+                                                                 name_value=a_devicePlan.get('name_value', None),
+                                                                 name_abbrev=a_devicePlan.get('name_abbrev', None),
+                                                                 type=a_devicePlan.get('type', None),
+                                                                 type_type=a_devicePlan.get('type_type', None),
+                                                                 type_value=a_devicePlan.get('type_value', None),
+                                                                 type_abbrev=a_devicePlan.get('type_abbrev', None),
+                                                                 value_textvalue=a_devicePlan.get('value_textvalue', None),
+                                                                 value_value=a_devicePlan.get('value_value', None),
+                                                                 value_unit=a_devicePlan.get('value_unit', None),
+                                                                 value_unit_type=a_devicePlan.get('value_unit_type', None),
+                                                                 value_unit_value=a_devicePlan.get('value_unit_value', None),
+                                                                 value_unit_abbrev=a_devicePlan.get('value_unit_abbrev', None),
+                                                                 site=a_devicePlan.get('site', None),
+                                                                 site_type=a_devicePlan.get('site_type', None),
+                                                                 site_value=a_devicePlan.get('site_value', None),
+                                                                 site_abbrev=a_devicePlan.get('site_abbrev', None))
+
+                            if stepresult.has_key('medicationAdministrations'):
+                                for a_medicationAdministration in stepresult['medicationAdministrations']:
+                                    MedicationAdministrations.objects.create(action_id=action_obj.id,
+                                                                             occurrence_id=None,
+                                                                             name=a_medicationAdministration.get('name', None),
+                                                                             name_type=a_medicationAdministration.get('name_type', None),
+                                                                             name_value=a_medicationAdministration.get('name_value', None),
+                                                                             name_abbrev=a_medicationAdministration.get('name_abbrev', None),
+                                                                             dose=a_medicationAdministration.get('dose', None),
+                                                                             dose_type=a_medicationAdministration.get('dose_type', None),
+                                                                             dose_value=a_medicationAdministration.get('dose_value', None),
+                                                                             dose_abbrev=a_medicationAdministration.get('dose_abbrev', None),
+                                                                             route_textvalue=a_medicationAdministration.get('route_textvalue', None),
+                                                                             route_value=a_medicationAdministration.get('route_value', None),
+                                                                             route_unit=a_medicationAdministration.get('route_unit', None),
+                                                                             route_unit_type=a_medicationAdministration.get('route_unit_type', None),
+                                                                             route_unit_value=a_medicationAdministration.get('route_unit_value', None),
+                                                                             route_unit_abbrev=a_medicationAdministration.get('route_unit_abbrev', None))
+
+                            #
+                            # Prepare the following lists for the next ActionStepResult tag
+                            #
+                            stepresult['measurements'] = []
+                            stepresult['deviceResults'] = []
+                            stepresult['medicationAdministrations'] = []
+                            stepresult['occurrences'] = []
+                            stepresult['occurrence_stopCondition'] = []
+                            stepresult['occurrence_measurements'] = []
+                            stepresult['occurrence_deviceResults'] = []
+                            stepresult['occurrence_medicationAdministrations'] = []
+
+                        ActionResults.objects.create(action_type=elem.tag,
+                                                     state='end',
+                                                     healthactionresult_id=healthactionresult_obj.id)
+                        parent_tag.pop(0)
+                        continue
+            
+            return healthactionresult_obj
+        except Exception, e:
+              raise ValueError("problem processing healthactionresult report " + str(e))
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/idp_objs/healthactionschedule.py indivo_server/indivo/document_processing/idp_objs/healthactionschedule.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/idp_objs/healthactionschedule.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/document_processing/idp_objs/healthactionschedule.py	2012-04-19 17:04:31.000000000 -0400
@@ -0,0 +1,68 @@
+from indivo.lib import iso8601
+from indivo.models import HealthActionSchedule
+
+XML = 'xml'
+DOM = 'dom'
+
+class IDP_HealthActionSchedule:
+
+  def post_data(self, name=None,
+                      name_type=None,
+                      name_value=None,
+                      name_abbrev=None,
+                      scheduledBy=None,
+                      dateScheduled=None,
+                      dateStart=None,
+                      dateEnd=None,
+                      recurrenceRule_frequency=None,
+                      recurrenceRule_frequency_type=None,
+                      recurrenceRule_frequency_value=None,
+                      recurrenceRule_frequency_abbrev=None,
+                      recurrenceRule_interval=None,
+                      recurrenceRule_interval_type=None,
+                      recurrenceRule_interval_value=None,
+                      recurrenceRule_interval_abbrev=None,
+                      recurrenceRule_count=None,
+                      dose_textvalue=None,
+                      dose_value=None,
+                      dose_unit=None,
+                      dose_unit_type=None,
+                      dose_unit_value=None,
+                      dose_unit_abbrev=None,
+                      instructions=None):
+    """
+    SZ: More error checking needs to be performed in this method
+    """
+    if dateScheduled: dateScheduled = iso8601.parse_date(dateScheduled)
+    if dateStart: dateStart = iso8601.parse_date(dateStart)
+    if dateEnd: dateEnd = iso8601.parse_date(dateEnd)
+
+    try:
+      healthactionschedule_obj = HealthActionSchedule.objects.create(name=name,
+                                                                     name_type=name_type,
+                                                                     name_value=name_value,
+                                                                     name_abbrev=name_abbrev,
+                                                                     scheduledBy=scheduledBy,
+                                                                     dateScheduled=dateScheduled,
+                                                                     dateStart=dateStart,
+                                                                     dateEnd=dateEnd,
+                                                                     recurrenceRule_frequency=recurrenceRule_frequency,
+                                                                     recurrenceRule_frequency_type=recurrenceRule_frequency_type,
+                                                                     recurrenceRule_frequency_value=recurrenceRule_frequency_value,
+                                                                     recurrenceRule_frequency_abbrev=recurrenceRule_frequency_abbrev,
+                                                                     recurrenceRule_interval=recurrenceRule_interval,
+                                                                     recurrenceRule_interval_type=recurrenceRule_interval_type,
+                                                                     recurrenceRule_interval_value=recurrenceRule_interval_value,
+                                                                     recurrenceRule_interval_abbrev=recurrenceRule_interval_abbrev,
+                                                                     recurrenceRule_count=recurrenceRule_count,
+                                                                     dose_textvalue=dose_textvalue,
+                                                                     dose_value=dose_value,
+                                                                     dose_unit=dose_unit,
+                                                                     dose_unit_type=dose_unit_type,
+                                                                     dose_unit_value=dose_unit_value,
+                                                                     dose_unit_abbrev=dose_unit_abbrev,
+                                                                     instructions=instructions)
+
+      return healthactionschedule_obj
+    except Exception, e:
+      raise ValueError("problem processing healthactionschedule report " + str(e))
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/idp_objs/healthmeasurement.py indivo_server/indivo/document_processing/idp_objs/healthmeasurement.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/idp_objs/healthmeasurement.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/document_processing/idp_objs/healthmeasurement.py	2012-04-26 15:10:52.000000000 -0400
@@ -0,0 +1,53 @@
+from indivo.lib import iso8601
+from indivo.models import HealthMeasurement
+
+XML = 'xml'
+DOM = 'dom'
+
+class IDP_HealthMeasurement:
+
+  def post_data(self, name=None,
+                      name_type=None,
+                      name_value=None,
+                      name_abbrev=None,
+                      measuredBy=None,
+                      dateMeasuredStart=None,
+                      dateMeasuredEnd=None,
+                      result_textvalue=None,
+                      result_value=None,
+                      result_unit=None,
+                      result_unit_type=None,
+                      result_unit_value=None,
+                      result_unit_abbrev=None,
+                      site=None,
+                      position=None,
+                      technique=None,
+                      comments=None):
+    """
+    SZ: More error checking needs to be performed in this method
+    """
+    if dateMeasuredStart: dateMeasuredStart = iso8601.parse_date(dateMeasuredStart)
+    if dateMeasuredEnd: dateMeasuredEnd = iso8601.parse_date(dateMeasuredEnd)
+
+    try:
+      healthmeasurement_obj = HealthMeasurement.objects.create(name=name,
+                                                               name_type=name_type,
+                                                               name_value=name_value,
+                                                               name_abbrev=name_abbrev,
+                                                               measuredBy=measuredBy,
+                                                               dateMeasuredStart=dateMeasuredStart,
+                                                               dateMeasuredEnd=dateMeasuredEnd,
+                                                               result_textvalue=result_textvalue,
+                                                               result_value=result_value,
+                                                               result_unit=result_unit,
+                                                               result_unit_type=result_unit_type,
+                                                               result_unit_value=result_unit_value,
+                                                               result_unit_abbrev=result_unit_abbrev,
+                                                               site=site,
+                                                               position=position,
+                                                               technique=technique,
+                                                               comments=comments)
+
+      return healthmeasurement_obj
+    except Exception, e:
+      raise ValueError("problem processing healthmeasurement report " + str(e))
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/idp_objs/medicationadministration.py indivo_server/indivo/document_processing/idp_objs/medicationadministration.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/idp_objs/medicationadministration.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/document_processing/idp_objs/medicationadministration.py	2012-02-21 07:36:45.000000000 -0500
@@ -0,0 +1,73 @@
+from indivo.lib import iso8601
+from indivo.models import MedicationAdministration
+
+XML = 'xml'
+DOM = 'dom'
+
+class IDP_MedicationAdministration:
+
+  def post_data(self, name=None,
+                      name_type=None,
+                      name_value=None,
+                      name_abbrev=None,
+                      reportedBy=None,
+                      dateReported=None,
+                      dateAdministered=None,
+                      amountAdministered_unit=None,
+                      amountAdministered_textvalue=None,
+                      amountAdministered_value=None,
+                      amountAdministered_unit_type=None, 
+                      amountAdministered_unit_value=None,
+                      amountAdministered_unit_abbrev=None,
+                      amountRemaining_unit=None,
+                      amountRemaining_textvalue=None,
+                      amountRemaining_value=None,
+                      amountRemaining_unit_type=None, 
+                      amountRemaining_unit_value=None,
+                      amountRemaining_unit_abbrev=None):
+
+
+    """
+    SZ: More error checking needs to be performed in this method
+    """
+
+    try:
+      if dateReported:
+        """
+        Elliot: 3/4 changed parse_utc_date to parse_date to handle XML:datetime
+        """
+        dateReported = iso8601.parse_date(dateReported)
+
+      if dateAdministered:
+        """
+        Elliot: 3/4 changed parse_utc_date to parse_date to handle XML:datetime
+        """
+        dateAdministered = iso8601.parse_date(dateAdministered)
+
+
+      medicationadministration_obj = MedicationAdministration.objects.create(   
+                      name=name,
+                      name_type=name_type,
+                      name_value=name_value,
+                      name_abbrev=name_abbrev,
+                      reported_by=reportedBy,
+                      date_reported=dateReported,
+                      date_administered=dateAdministered,
+                      amountadministered_unit=amountAdministered_unit,
+                      amountadministered_textvalue=amountAdministered_textvalue,
+                      amountadministered_value=amountAdministered_value,
+                      amountadministered_unit_type=amountAdministered_unit_type, 
+                      amountadministered_unit_value=amountAdministered_unit_value,
+                      amountadministered_unit_abbrev=amountAdministered_unit_abbrev,
+                      amountremaining_unit=amountRemaining_unit,
+                      amountremaining_textvalue=amountRemaining_textvalue,
+                      amountremaining_value=amountRemaining_value,
+                      amountremaining_unit_type=amountRemaining_unit_type, 
+                      amountremaining_unit_value=amountRemaining_unit_value,
+                      amountremaining_unit_abbrev=amountRemaining_unit_abbrev)
+
+
+      return medicationadministration_obj
+    except Exception, e:
+      raise ValueError("problem processing medicationadministration report " + str(e))
+
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/idp_objs/medicationfill.py indivo_server/indivo/document_processing/idp_objs/medicationfill.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/idp_objs/medicationfill.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/document_processing/idp_objs/medicationfill.py	2012-02-21 07:36:45.000000000 -0500
@@ -0,0 +1,67 @@
+from indivo.lib import iso8601
+from indivo.models import MedicationFill
+
+XML = 'xml'
+DOM = 'dom'
+
+class IDP_MedicationFill:
+
+  def post_data(self, name=None,
+                      name_type=None,
+                      name_value=None,
+                      name_abbrev=None,
+                      filledBy=None,
+                      dateFilled=None,
+                      amountFilled_unit=None,
+                      amountFilled_textvalue=None,
+                      amountFilled_value=None,
+                      amountFilled_unit_type=None, 
+                      amountFilled_unit_value=None,
+                      amountFilled_unit_abbrev=None,
+                      ndc=None,
+                      ndc_type=None,
+                      ndc_value=None,
+                      ndc_abbrev=None,
+                      fillSequenceNumber=None,
+                      lotNumber=None,
+                      refillsRemaining=None,
+                      instructions=None):
+
+
+    """
+    SZ: More error checking needs to be performed in this method
+    """
+
+    try:
+      if dateFilled:
+        """
+        Elliot: 3/4 changed parse_utc_date to parse_date to handle XML:datetime
+        """
+        dateFilled = iso8601.parse_date(dateFilled)
+
+      medicationfill_obj = MedicationFill.objects.create(   
+                      name=name,
+                      name_type=name_type,
+                      name_value=name_value,
+                      name_abbrev=name_abbrev,
+                      filled_by=filledBy,
+                      date_filled=dateFilled,
+                      amountfilled_unit=amountFilled_unit,
+                      amountfilled_textvalue=amountFilled_textvalue,
+                      amountfilled_value=amountFilled_value,
+                      amountfilled_unit_type=amountFilled_unit_type, 
+                      amountfilled_unit_value=amountFilled_unit_value,
+                      amountfilled_unit_abbrev=amountFilled_unit_abbrev,
+                      ndc=ndc,
+                      ndc_type=ndc_type,
+                      ndc_value=ndc_value,
+                      ndc_abbrev=ndc_abbrev,
+                      fill_sequence_number=fillSequenceNumber,
+                      lot_number=lotNumber,
+                      refills_remaining=refillsRemaining,
+                      instructions=instructions)
+
+      return medicationfill_obj
+    except Exception, e:
+      raise ValueError("problem processing medicationfill report " + str(e))
+
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/idp_objs/medicationorder.py indivo_server/indivo/document_processing/idp_objs/medicationorder.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/idp_objs/medicationorder.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/document_processing/idp_objs/medicationorder.py	2012-02-21 07:36:45.000000000 -0500
@@ -0,0 +1,69 @@
+from indivo.lib import iso8601
+from indivo.models import MedicationOrder
+
+XML = 'xml'
+DOM = 'dom'
+
+class IDP_MedicationOrder:
+
+  def post_data(self, name=None,
+                      name_type=None,
+                      name_value=None,
+                      name_abbrev=None,
+                      orderType=None,
+                      orderedBy=None,
+                      dateOrdered=None,
+                      dateExpires=None,
+                      indication=None,
+                      amountOrdered_unit=None,
+                      amountOrdered_textvalue=None,
+                      amountOrdered_value=None,
+                      amountOrdered_unit_type=None, 
+                      amountOrdered_unit_value=None,
+                      amountOrdered_unit_abbrev=None,
+                      refills=None,
+                      substitutionPermitted=None,
+                      instructions=None):
+
+    """
+    SZ: More error checking needs to be performed in this method
+    """
+
+    try:
+      if dateOrdered:
+        """
+        Elliot: 3/4 changed parse_utc_date to parse_date to handle XML:datetime
+        """
+        dateOrdered = iso8601.parse_date(dateOrdered)
+
+      if dateExpires:
+        """
+        Elliot: 3/4 changed parse_utc_date to parse_date to handle XML:datetime
+        """
+        dateExpires = iso8601.parse_date(dateExpires)
+
+
+      medicationorder_obj = MedicationOrder.objects.create(   
+                      name=name,
+                      name_type=name_type,
+                      name_value=name_value,
+                      name_abbrev=name_abbrev,
+                      order_type=orderType,
+                      ordered_by=orderedBy,
+                      date_ordered=dateOrdered,
+                      date_expires=dateExpires,
+                      indication=indication,
+                      amountordered_unit=amountOrdered_unit,
+                      amountordered_textvalue=amountOrdered_textvalue,
+                      amountordered_value=amountOrdered_value,
+                      amountordered_unit_type=amountOrdered_unit_type, 
+                      amountordered_unit_value=amountOrdered_unit_value,
+                      amountordered_unit_abbrev=amountOrdered_unit_abbrev,
+                      refills=refills,
+                      substitution_permitted=substitutionPermitted,
+                      instructions=instructions)
+
+      return medicationorder_obj
+    except Exception, e:
+      raise ValueError("problem processing medicationorder report " + str(e))
+
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/idp_objs/medicationscheduleitem.py indivo_server/indivo/document_processing/idp_objs/medicationscheduleitem.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/idp_objs/medicationscheduleitem.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/document_processing/idp_objs/medicationscheduleitem.py	2012-02-21 07:36:45.000000000 -0500
@@ -0,0 +1,98 @@
+from indivo.lib import iso8601
+from indivo.models import MedicationScheduleItem
+
+XML = 'xml'
+DOM = 'dom'
+
+class IDP_MedicationScheduleItem:
+
+  def post_data(self, name=None,
+                      name_type=None,
+                      name_value=None,
+                      name_abbrev=None,
+                      scheduledBy=None,
+                      dateScheduled=None,
+                      dateStart=None,
+                      dateEnd=None,
+                      recurrenceRule_frequency=None,
+                      recurrenceRule_frequency_type=None,
+                      recurrenceRule_frequency_value=None,
+                      recurrenceRule_frequency_abbrev=None,
+                      recurrenceRule_interval=None,
+                      recurrenceRule_interval_type=None,
+                      recurrenceRule_interval_value=None,
+                      recurrenceRule_interval_abbrev=None,
+                      recurrenceRule_dateUntil=None,
+                      recurrenceRule_count=None,
+                      dose_unit=None,
+                      dose_textvalue=None,
+                      dose_value=None,
+                      dose_unit_type=None, 
+                      dose_unit_value=None,
+                      dose_unit_abbrev=None,
+											instructions=None):
+
+    """
+    SZ: More error checking needs to be performed in this method
+    """
+    #print "top of post_data"
+    try:
+      if dateScheduled:
+        """
+        Elliot: 3/4 changed parse_utc_date to parse_date to handle XML:datetime
+        """
+        dateScheduled = iso8601.parse_date(dateScheduled)
+
+      if dateStart:
+        """
+        Elliot: 3/4 changed parse_utc_date to parse_date to handle XML:datetime
+        """
+        dateStart = iso8601.parse_date(dateStart)
+
+      if dateEnd:
+        """
+        Elliot: 3/4 changed parse_utc_date to parse_date to handle XML:datetime
+        """
+        dateEnd = iso8601.parse_date(dateEnd)
+
+      if recurrenceRule_dateUntil:
+        """
+        Elliot: 3/4 changed parse_utc_date to parse_date to handle XML:datetime
+        """
+        recurrenceRule_dateUntil = iso8601.parse_date(recurrenceRule_dateUntil)
+
+      #print "post_data about to create object"
+
+      medicationscheduleitem_obj = MedicationScheduleItem.objects.create(   
+                      name=name,
+                      name_type=name_type,
+                      name_value=name_value,
+                      name_abbrev=name_abbrev,
+                      scheduled_by=scheduledBy,
+											date_scheduled=dateScheduled,
+                      date_start=dateStart,
+                      date_end=dateEnd,
+                      recurrencerule_frequency=recurrenceRule_frequency,
+                      recurrencerule_frequency_type=recurrenceRule_frequency_type,
+                      recurrencerule_frequency_value=recurrenceRule_frequency_value,
+                      recurrencerule_frequency_abbrev=recurrenceRule_frequency_abbrev,
+                      recurrencerule_interval=recurrenceRule_interval,
+                      recurrencerule_interval_type=recurrenceRule_interval_type,
+                      recurrencerule_interval_value=recurrenceRule_interval_value,
+                      recurrencerule_interval_abbrev=recurrenceRule_interval_abbrev,
+                      recurrencerule_dateuntil=recurrenceRule_dateUntil,
+                      recurrencerule_count=recurrenceRule_count,
+                      dose_unit=dose_unit,
+                      dose_textvalue=dose_textvalue,
+                      dose_value=dose_value,
+                      dose_unit_type=dose_unit_type, 
+                      dose_unit_value=dose_unit_value,
+                      dose_unit_abbrev=dose_unit_abbrev,
+											instructions=instructions)
+
+      #print "after schedule item create"
+      return medicationscheduleitem_obj
+    except Exception, e:
+      print "Exception: " + str(e)
+      raise ValueError("problem processing medicationscheduleitem report " + str(e))
+
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/idp_objs/medicationschedule.py indivo_server/indivo/document_processing/idp_objs/medicationschedule.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/idp_objs/medicationschedule.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/document_processing/idp_objs/medicationschedule.py	2012-04-19 17:04:31.000000000 -0400
@@ -0,0 +1,68 @@
+from indivo.lib import iso8601
+from indivo.models import MedicationSchedule
+
+XML = 'xml'
+DOM = 'dom'
+
+class IDP_MedicationSchedule:
+
+  def post_data(self, name=None,
+                      name_type=None,
+                      name_value=None,
+                      name_abbrev=None,
+                      scheduledBy=None,
+                      dateScheduled=None,
+                      dateStart=None,
+                      dateEnd=None,
+                      recurrenceRule_frequency=None,
+                      recurrenceRule_frequency_type=None,
+                      recurrenceRule_frequency_value=None,
+                      recurrenceRule_frequency_abbrev=None,
+                      recurrenceRule_interval=None,
+                      recurrenceRule_interval_type=None,
+                      recurrenceRule_interval_value=None,
+                      recurrenceRule_interval_abbrev=None,
+                      recurrenceRule_count=None,
+                      dose_textvalue=None,
+                      dose_value=None,
+                      dose_unit=None,
+                      dose_unit_type=None,
+                      dose_unit_value=None,
+                      dose_unit_abbrev=None,
+                      instructions=None):
+    """
+    SZ: More error checking needs to be performed in this method
+    """
+    if dateScheduled: dateScheduled = iso8601.parse_date(dateScheduled)
+    if dateStart: dateStart = iso8601.parse_date(dateStart)
+    if dateEnd: dateEnd = iso8601.parse_date(dateEnd)
+
+    try:
+      medicationschedule_obj = MedicationSchedule.objects.create(name=name,
+                                                                 name_type=name_type,
+                                                                 name_value=name_value,
+                                                                 name_abbrev=name_abbrev,
+                                                                 scheduledBy=scheduledBy,
+                                                                 dateScheduled=dateScheduled,
+                                                                 dateStart=dateStart,
+                                                                 dateEnd=dateEnd,
+                                                                 recurrenceRule_frequency=recurrenceRule_frequency,
+                                                                 recurrenceRule_frequency_type=recurrenceRule_frequency_type,
+                                                                 recurrenceRule_frequency_value=recurrenceRule_frequency_value,
+                                                                 recurrenceRule_frequency_abbrev=recurrenceRule_frequency_abbrev,
+                                                                 recurrenceRule_interval=recurrenceRule_interval,
+                                                                 recurrenceRule_interval_type=recurrenceRule_interval_type,
+                                                                 recurrenceRule_interval_value=recurrenceRule_interval_value,
+                                                                 recurrenceRule_interval_abbrev=recurrenceRule_interval_abbrev,
+                                                                 recurrenceRule_count=recurrenceRule_count,
+                                                                 dose_textvalue=dose_textvalue,
+                                                                 dose_value=dose_value,
+                                                                 dose_unit=dose_unit,
+                                                                 dose_unit_type=dose_unit_type,
+                                                                 dose_unit_value=dose_unit_value,
+                                                                 dose_unit_abbrev=dose_unit_abbrev,
+                                                                 instructions=instructions)
+
+      return medicationschedule_obj
+    except Exception, e:
+      raise ValueError("problem processing medicationschedule report " + str(e))
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/idp_objs/videomessage.py indivo_server/indivo/document_processing/idp_objs/videomessage.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/idp_objs/videomessage.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/document_processing/idp_objs/videomessage.py	2012-02-21 07:36:45.000000000 -0500
@@ -0,0 +1,37 @@
+from indivo.lib import iso8601
+from indivo.models import VideoMessage
+
+XML = 'xml'
+DOM = 'dom'
+
+class IDP_VideoMessage:
+
+  def post_data(self, fileId=None, 
+                      storageType=None, 
+                      subject=None, 
+                      from_str=None,
+                      dateRecorded=None,
+                      dateSent=None):
+
+    """
+    SZ: More error checking needs to be performed in this method
+    """
+
+    try:
+     
+      if dateRecorded:
+        dateRecorded = iso8601.parse_date(dateRecorded)
+      if dateSent:
+        dateSent = iso8601.parse_date(dateSent)
+
+      videomessage_obj = VideoMessage.objects.create( 
+                      file_id=fileId,
+                      storage_type=storageType,   
+                      subject=subject, 
+                      from_str=from_str,
+                      date_recorded=dateRecorded,
+                      date_sent=dateSent)
+
+      return videomessage_obj
+    except Exception, e:
+      raise ValueError("problem processing videomessage report " + str(e))
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/idp_objs/vitals.py indivo_server/indivo/document_processing/idp_objs/vitals.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/idp_objs/vitals.py	2012-02-27 12:31:32.000000000 -0500
+++ indivo_server/indivo/document_processing/idp_objs/vitals.py	2012-02-28 11:59:47.000000000 -0500
@@ -6,40 +6,53 @@
 
 class IDP_Vitals:
 
-  def post_data(self, date_measured=None,
-                      name=None,
+  def post_data(self, name=None,
                       name_type=None,
                       name_value=None,
                       name_abbrev=None,
-                      value=None,
-                      unit=None,
-                      unit_type=None,
-                      unit_value=None,
-                      unit_abbrev=None,
+                      measuredBy=None,
+                      dateMeasuredStart=None,
+                      dateMeasuredEnd=None,
+                      result_unit=None,
+                      result_textvalue=None,
+                      result_value=None,
+                      result_unit_type=None, 
+                      result_unit_value=None,
+                      result_unit_abbrev=None,
                       site=None,
                       position=None,
+                      technique=None,
                       comments=None):
 
     """
     SZ: More error checking needs to be performed in this method
     """
 
-    if date_measured: date_measured = iso8601.parse_utc_date(date_measured)
+    if dateMeasuredStart: 
+      dateMeasuredStart = iso8601.parse_date(dateMeasuredStart)
+
+    if dateMeasuredEnd:
+      dateMeasuredEnd = iso8601.parse_date(dateMeasuredEnd)
 
     try:
-      vitals_obj = Vitals.objects.create( date_measured=date_measured,
-                                          name=name,
-                                          name_type=name_type,
-                                          name_value=name_value,
-                                          name_abbrev=name_abbrev,
-                                          value=value,
-                                          unit=unit,
-                                          unit_type=unit_type,
-                                          unit_value=unit_value,
-                                          unit_abbrev=unit_abbrev,
-                                          site=site,
-                                          position=position,
-                                          comments=comments)
+      vitals_obj = Vitals.objects.create( 
+                      name=name,
+                      name_type=name_type,
+                      name_value=name_value,
+                      name_abbrev=name_abbrev,
+                      measured_by=measuredBy,
+                      date_measured_start=dateMeasuredStart,
+                      date_measured_end=dateMeasuredEnd,
+                      result_unit=result_unit,
+                      result_textvalue=result_textvalue,
+                      result_value=result_value,
+                      result_unit_type=result_unit_type, 
+                      result_unit_value=result_unit_value,
+                      result_unit_abbrev=result_unit_abbrev,
+                      site=site,
+                      position=position,
+                      technique=technique,
+                      comments=comments)
 
       return vitals_obj
     except Exception, e:
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/stylesheets/adherenceitem.xsl indivo_server/indivo/document_processing/stylesheets/adherenceitem.xsl
--- fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/stylesheets/adherenceitem.xsl	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/document_processing/stylesheets/adherenceitem.xsl	2012-02-21 07:36:45.000000000 -0500
@@ -0,0 +1,23 @@
+<?xml version='1.0' encoding='ISO-8859-1'?>
+<xsl:stylesheet version = '1.0' xmlns:xsl='http://www.w3.org/1999/XSL/Transform' xmlns:indivodoc="http://indivo.org/vocab/xml/documents#"> 
+  <xsl:output method = "xml" indent = "yes" />  
+  <xsl:template match="indivodoc:AdherenceItem">
+    <facts>
+      <fact>
+        <name><xsl:value-of select='indivodoc:name/text()' /></name>
+        <name_type><xsl:value-of select='indivodoc:name/@type' /></name_type>
+        <name_value><xsl:value-of select='indivodoc:name/@value' /></name_value>
+        <name_abbrev><xsl:value-of select='indivodoc:name/@abbrev' /></name_abbrev>
+        <reportedBy><xsl:value-of select='indivodoc:reportedBy/text()' /></reportedBy>
+        <dateReported><xsl:value-of select='indivodoc:dateReported/text()' /></dateReported>
+        <xsl:if test="indivodoc:recurrenceIndex">
+          <recurrenceIndex><xsl:value-of select='indivodoc:recurrenceIndex/text()' /></recurrenceIndex>
+        </xsl:if>
+        <adherence><xsl:value-of select='indivodoc:adherence/text()' /></adherence>
+        <xsl:if test="indivodoc:nonadherenceReason">
+          <nonadherenceReason><xsl:value-of select='indivodoc:nonadherenceReason/text()' /></nonadherenceReason>
+        </xsl:if>
+      </fact>
+    </facts>
+  </xsl:template>
+</xsl:stylesheet>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/stylesheets/device.xsl indivo_server/indivo/document_processing/stylesheets/device.xsl
--- fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/stylesheets/device.xsl	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/document_processing/stylesheets/device.xsl	2012-04-19 14:16:03.000000000 -0400
@@ -0,0 +1,44 @@
+<?xml version='1.0' encoding='ISO-8859-1'?>
+<xsl:stylesheet version = '1.0' xmlns:xsl='http://www.w3.org/1999/XSL/Transform' xmlns:indivodoc="http://indivo.org/vocab/xml/documents#"> 
+  <xsl:output method = "xml" indent = "yes" />  
+  <xsl:template match="indivodoc:Device">
+    <facts>
+      <fact>
+        <name><xsl:value-of select='indivodoc:name/text()' /></name>
+        <name_type><xsl:value-of select='indivodoc:name/@type' /></name_type>
+        <name_value><xsl:value-of select='indivodoc:name/@value' /></name_value>
+        <name_abbrev><xsl:value-of select='indivodoc:name/@abbrev' /></name_abbrev>
+        <xsl:if test="indivodoc:id">
+          <identity><xsl:value-of select='indivodoc:id/text()' /></identity>
+          <identity_type><xsl:value-of select='indivodoc:id/@type' /></identity_type>
+          <identity_value><xsl:value-of select='indivodoc:id/@value' /></identity_value>
+          <identity_abbrev><xsl:value-of select='indivodoc:id/@abbrev' /></identity_abbrev>
+        </xsl:if>
+        <xsl:if test="indivodoc:type">
+          <type><xsl:value-of select='indivodoc:type/text()' /></type>
+          <type_type><xsl:value-of select='indivodoc:type/@type' /></type_type>
+          <type_value><xsl:value-of select='indivodoc:type/@value' /></type_value>
+          <type_abbrev><xsl:value-of select='indivodoc:type/@abbrev' /></type_abbrev>
+        </xsl:if>
+        <xsl:if test="indivodoc:indication">
+          <indication><xsl:value-of select='indivodoc:indication/text()' /></indication>
+        </xsl:if>
+        <xsl:if test="indivodoc:vendor">
+          <vendor><xsl:value-of select='indivodoc:vendor/text()' /></vendor>
+          <vendor_type><xsl:value-of select='indivodoc:vendor/@type' /></vendor_type>
+          <vendor_value><xsl:value-of select='indivodoc:vendor/@value' /></vendor_value>
+          <vendor_abbrev><xsl:value-of select='indivodoc:vendor/@abbrev' /></vendor_abbrev>
+        </xsl:if>
+        <xsl:if test="indivodoc:description">
+          <description><xsl:value-of select='indivodoc:description/text()' /></description>
+        </xsl:if>
+        <xsl:if test="indivodoc:specification">
+          <specification><xsl:value-of select='indivodoc:specification/text()' /></specification>
+        </xsl:if>
+        <xsl:if test="indivodoc:certification">
+          <certification><xsl:value-of select='indivodoc:certification/text()' /></certification>
+        </xsl:if>
+      </fact>
+    </facts>
+  </xsl:template>
+</xsl:stylesheet>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/stylesheets/equipmentscheduleitem.xsl indivo_server/indivo/document_processing/stylesheets/equipmentscheduleitem.xsl
--- fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/stylesheets/equipmentscheduleitem.xsl	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/document_processing/stylesheets/equipmentscheduleitem.xsl	2012-04-18 09:50:43.000000000 -0400
@@ -0,0 +1,45 @@
+<?xml version='1.0' encoding='ISO-8859-1'?>
+<xsl:stylesheet version = '1.0' xmlns:xsl='http://www.w3.org/1999/XSL/Transform' xmlns:indivodoc="http://indivo.org/vocab/xml/documents#"> 
+  <xsl:output method = "xml" indent = "yes" />  
+  <xsl:template match="indivodoc:EquipmentScheduleItem">
+    <facts>
+      <fact>
+        <name><xsl:value-of select='indivodoc:name/text()' /></name>
+        <name_type><xsl:value-of select='indivodoc:name/@type' /></name_type>
+        <name_value><xsl:value-of select='indivodoc:name/@value' /></name_value>
+        <name_abbrev><xsl:value-of select='indivodoc:name/@abbrev' /></name_abbrev>
+        <scheduledBy><xsl:value-of select='indivodoc:scheduledBy/text()' /></scheduledBy>
+        <dateScheduled><xsl:value-of select='indivodoc:dateScheduled/text()' /></dateScheduled>
+        <dateStart><xsl:value-of select='indivodoc:dateStart/text()' /></dateStart>
+        <xsl:if test="indivodoc:dateEnd">
+          <dateEnd><xsl:value-of select='indivodoc:dateEnd/text()' /></dateEnd>
+        </xsl:if>
+        <xsl:if test="indivodoc:recurrenceRule">
+          <xsl:apply-templates select="indivodoc:recurrenceRule" />
+        </xsl:if>
+        <xsl:if test="indivodoc:instructions">
+          <instructions><xsl:value-of select='indivodoc:instructions/text()' /></instructions>
+        </xsl:if>        
+      </fact>
+    </facts>
+  </xsl:template>
+
+  <xsl:template match="indivodoc:recurrenceRule">
+    <recurrenceRule_frequency><xsl:value-of select='indivodoc:frequency/text()' /></recurrenceRule_frequency>
+    <recurrenceRule_frequency_type><xsl:value-of select='indivodoc:frequency/@type' /></recurrenceRule_frequency_type>
+    <recurrenceRule_frequency_value><xsl:value-of select='indivodoc:frequency/@value' /></recurrenceRule_frequency_value>
+    <recurrenceRule_frequency_abbrev><xsl:value-of select='indivodoc:frequency/@abbrev' /></recurrenceRule_frequency_abbrev>
+    <xsl:if test="indivodoc:interval">
+      <recurrenceRule_interval><xsl:value-of select='indivodoc:interval/text()' /></recurrenceRule_interval>
+      <recurrenceRule_interval_type><xsl:value-of select='indivodoc:interval/@type' /></recurrenceRule_interval_type>
+      <recurrenceRule_interval_value><xsl:value-of select='indivodoc:interval/@value' /></recurrenceRule_interval_value>
+      <recurrenceRule_interval_abbrev><xsl:value-of select='indivodoc:interval/@abbrev' /></recurrenceRule_interval_abbrev>
+    </xsl:if>
+    <xsl:if test="indivodoc:dateUntil">
+      <recurrenceRule_dateUntil><xsl:value-of select='indivodoc:dateUntil/text()' /></recurrenceRule_dateUntil>
+    </xsl:if>
+    <xsl:if test="indivodoc:count">
+      <recurrenceRule_count><xsl:value-of select='indivodoc:count/text()' /></recurrenceRule_count>
+    </xsl:if>
+  </xsl:template>
+</xsl:stylesheet>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/stylesheets/healthactionoccurrence.xsl indivo_server/indivo/document_processing/stylesheets/healthactionoccurrence.xsl
--- fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/stylesheets/healthactionoccurrence.xsl	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/document_processing/stylesheets/healthactionoccurrence.xsl	2012-04-18 15:29:57.000000000 -0400
@@ -0,0 +1,17 @@
+<?xml version='1.0' encoding='ISO-8859-1'?>
+<xsl:stylesheet version = '1.0' xmlns:xsl='http://www.w3.org/1999/XSL/Transform' xmlns:indivodoc="http://indivo.org/vocab/xml/documents#"> 
+  <xsl:output method = "xml" indent = "yes" />  
+  <xsl:template match="indivodoc:HealthActionOccurrence">
+    <facts>
+      <fact>
+        <name><xsl:value-of select='indivodoc:name/text()' /></name>
+        <name_type><xsl:value-of select='indivodoc:name/@type' /></name_type>
+        <name_value><xsl:value-of select='indivodoc:name/@value' /></name_value>
+        <name_abbrev><xsl:value-of select='indivodoc:name/@abbrev' /></name_abbrev>
+        <xsl:if test="indivodoc:recurrenceIndex">
+          <recurrenceIndex><xsl:value-of select='indivodoc:recurrenceIndex/text()' /></recurrenceIndex>
+        </xsl:if>
+      </fact>
+    </facts>
+  </xsl:template>
+</xsl:stylesheet>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/stylesheets/healthactionplan.xsl indivo_server/indivo/document_processing/stylesheets/healthactionplan.xsl
--- fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/stylesheets/healthactionplan.xsl	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/document_processing/stylesheets/healthactionplan.xsl	2012-04-18 12:58:24.000000000 -0400
@@ -0,0 +1,301 @@
+<?xml version='1.0' encoding='ISO-8859-1'?>
+<xsl:stylesheet version = '1.0' xmlns:xsl='http://www.w3.org/1999/XSL/Transform' xmlns:indivodoc="http://indivo.org/vocab/xml/documents#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> 
+    <xsl:output method = "xml" indent = "yes" />  
+    <xsl:template match="indivodoc:HealthActionPlan">
+    <facts>
+        <fact>
+            <name><xsl:value-of select='indivodoc:name/text()' /></name>
+            <name_type><xsl:value-of select='indivodoc:name/@type' /></name_type>
+            <name_value><xsl:value-of select='indivodoc:name/@value' /></name_value>
+            <name_abbrev><xsl:value-of select='indivodoc:name/@abbrev' /></name_abbrev>
+            <planType><xsl:value-of select='indivodoc:planType/text()' /></planType>
+            <plannedBy><xsl:value-of select='indivodoc:plannedBy/text()' /></plannedBy>
+            <datePlanned><xsl:value-of select='indivodoc:datePlanned/text()' /></datePlanned>
+            <xsl:if test="indivodoc:dateExpires">
+                <dateExpires><xsl:value-of select='indivodoc:dateExpires/text()' /></dateExpires>
+            </xsl:if>
+            <indication><xsl:value-of select='indivodoc:indication/text()' /></indication>
+            <xsl:if test="indivodoc:instructions">
+                <instructions><xsl:value-of select='indivodoc:instructions/text()' /></instructions>
+            </xsl:if>
+            <xsl:if test="indivodoc:system">
+                <system><xsl:value-of select='indivodoc:system/text()' /></system>
+                <system_type><xsl:value-of select='indivodoc:system/@type' /></system_type>
+                <system_value><xsl:value-of select='indivodoc:system/@value' /></system_value>
+                <system_abbrev><xsl:value-of select='indivodoc:system/@abbrev' /></system_abbrev>
+            </xsl:if>
+            <actions_xml><xsl:value-of select='indivodoc:actions_xml/text()' /></actions_xml>
+            <actions><xsl:apply-templates select="indivodoc:actions" /></actions>
+        </fact>
+    </facts>
+    </xsl:template>
+
+    <xsl:template match="indivodoc:dose">
+        <xsl:if test="indivodoc:textValue">
+            <dose_textvalue><xsl:value-of select='indivodoc:textValue/text()' /></dose_textvalue>
+        </xsl:if>
+        <xsl:if test="indivodoc:value">
+            <dose_value><xsl:value-of select='indivodoc:value/text()' /></dose_value>
+        </xsl:if>
+        <xsl:if test="indivodoc:unit">
+            <dose_unit><xsl:value-of select='indivodoc:unit/text()' /></dose_unit>
+            <dose_unit_type><xsl:value-of select='indivodoc:unit/@type' /></dose_unit_type>
+            <dose_unit_value><xsl:value-of select='indivodoc:unit/@value' /></dose_unit_value>
+            <dose_unit_abbrev><xsl:value-of select='indivodoc:unit/@abbrev' /></dose_unit_abbrev>
+        </xsl:if>
+    </xsl:template>
+
+    <xsl:template match="indivodoc:value">
+        <xsl:if test="indivodoc:textValue">
+            <value_textvalue><xsl:value-of select='indivodoc:textValue/text()' /></value_textvalue>
+        </xsl:if>
+        <xsl:if test="indivodoc:value">
+            <value_value><xsl:value-of select='indivodoc:value/text()' /></value_value>
+        </xsl:if>
+        <xsl:if test="indivodoc:unit">
+            <value_unit><xsl:value-of select='indivodoc:unit/text()' /></value_unit>
+            <value_unit_type><xsl:value-of select='indivodoc:unit/@type' /></value_unit_type>
+            <value_unit_value><xsl:value-of select='indivodoc:unit/@value' /></value_unit_value>
+            <value_unit_abbrev><xsl:value-of select='indivodoc:unit/@abbrev' /></value_unit_abbrev>
+        </xsl:if>
+    </xsl:template>
+
+    <xsl:template match="indivodoc:minimumValue">
+        <xsl:if test="indivodoc:textValue">
+            <minimumValue_textvalue><xsl:value-of select='indivodoc:textValue/text()' /></minimumValue_textvalue>
+        </xsl:if>
+        <xsl:if test="indivodoc:value">
+            <minimumValue_value><xsl:value-of select='indivodoc:value/text()' /></minimumValue_value>
+        </xsl:if>
+        <xsl:if test="indivodoc:unit">
+            <minimumValue_unit><xsl:value-of select='indivodoc:unit/text()' /></minimumValue_unit>
+            <minimumValue_unit_type><xsl:value-of select='indivodoc:unit/@type' /></minimumValue_unit_type>
+            <minimumValue_unit_value><xsl:value-of select='indivodoc:unit/@value' /></minimumValue_unit_value>
+            <minimumValue_unit_abbrev><xsl:value-of select='indivodoc:unit/@abbrev' /></minimumValue_unit_abbrev>
+        </xsl:if>
+    </xsl:template>
+
+    <xsl:template match="indivodoc:maximumValue">
+        <xsl:if test="indivodoc:textValue">
+            <maximumValue_textvalue><xsl:value-of select='indivodoc:textValue/text()' /></maximumValue_textvalue>
+        </xsl:if>
+        <xsl:if test="indivodoc:value">
+            <maximumValue_value><xsl:value-of select='indivodoc:value/text()' /></maximumValue_value>
+        </xsl:if>
+        <xsl:if test="indivodoc:unit">
+            <maximumValue_unit><xsl:value-of select='indivodoc:unit/text()' /></maximumValue_unit>
+            <maximumValue_unit_type><xsl:value-of select='indivodoc:unit/@type' /></maximumValue_unit_type>
+            <maximumValue_unit_value><xsl:value-of select='indivodoc:unit/@value' /></maximumValue_unit_value>
+            <maximumValue_unit_abbrev><xsl:value-of select='indivodoc:unit/@abbrev' /></maximumValue_unit_abbrev>
+        </xsl:if>
+    </xsl:template>
+
+    <xsl:template match="indivodoc:actions">
+        <xsl:apply-templates select="indivodoc:action" />
+    </xsl:template>
+
+    <xsl:template match="indivodoc:action">
+        <xsl:choose>
+            <xsl:when test="@xsi:type='ActionGroup'">
+                <ActionGroup>
+                    <position><xsl:value-of select='indivodoc:position/text()' /></position>
+                    <position_type><xsl:value-of select='indivodoc:position/@type' /></position_type>
+                    <position_value><xsl:value-of select='indivodoc:position/@value' /></position_value>
+                    <position_abbrev><xsl:value-of select='indivodoc:position/@abbrev' /></position_abbrev>
+                    <stopConditions><xsl:apply-templates select="indivodoc:stopConditions" /></stopConditions>
+                    <targets><xsl:apply-templates select="indivodoc:targets" /></targets>
+                    <measurementPlans><xsl:apply-templates select="indivodoc:measurementPlans" /></measurementPlans>
+                    <devicePlans><xsl:apply-templates select="indivodoc:devicePlans" /></devicePlans>
+                    <medicationPlans><xsl:apply-templates select="indivodoc:medicationPlans" /></medicationPlans>
+                    <repeatCount><xsl:value-of select='indivodoc:repeatCount/text()' /></repeatCount>
+                    <actions><xsl:apply-templates select="indivodoc:actions" /></actions>
+                </ActionGroup>
+            </xsl:when>
+            <xsl:otherwise>
+                <ActionStep>
+                    <position><xsl:value-of select='indivodoc:position/text()' /></position>
+                    <position_type><xsl:value-of select='indivodoc:position/@type' /></position_type>
+                    <position_value><xsl:value-of select='indivodoc:position/@value' /></position_value>
+                    <position_abbrev><xsl:value-of select='indivodoc:position/@abbrev' /></position_abbrev>
+                    <stopConditions><xsl:apply-templates select="indivodoc:stopConditions" /></stopConditions>
+                    <targets><xsl:apply-templates select="indivodoc:targets" /></targets>
+                    <measurementPlans><xsl:apply-templates select="indivodoc:measurementPlans" /></measurementPlans>
+                    <devicePlans><xsl:apply-templates select="indivodoc:devicePlans" /></devicePlans>
+                    <medicationPlans><xsl:apply-templates select="indivodoc:medicationPlans" /></medicationPlans>
+                    <name><xsl:value-of select='indivodoc:name/text()' /></name>
+                    <name_type><xsl:value-of select='indivodoc:name/@type' /></name_type>
+                    <name_value><xsl:value-of select='indivodoc:name/@value' /></name_value>
+                    <name_abbrev><xsl:value-of select='indivodoc:name/@abbrev' /></name_abbrev>
+                    <type><xsl:value-of select='indivodoc:type/text()' /></type>
+                    <type_type><xsl:value-of select='indivodoc:type/@type' /></type_type>
+                    <type_value><xsl:value-of select='indivodoc:type/@value' /></type_value>
+                    <type_abbrev><xsl:value-of select='indivodoc:type/@abbrev' /></type_abbrev>
+                    <additionalDetails><xsl:value-of select='indivodoc:additionalDetails/text()' /></additionalDetails>
+                    <instructions><xsl:value-of select='indivodoc:instructions/text()' /></instructions>
+                </ActionStep>
+            </xsl:otherwise>
+        </xsl:choose>
+    </xsl:template>
+
+    <xsl:template match="indivodoc:stopConditions">
+        <xsl:apply-templates select="indivodoc:stopCondition" />
+    </xsl:template>
+
+    <xsl:template match="indivodoc:stopCondition">
+        <stopCondition>
+            <name><xsl:value-of select='indivodoc:name/text()' /></name>
+            <name_type><xsl:value-of select='indivodoc:name/@type' /></name_type>
+            <name_value><xsl:value-of select='indivodoc:name/@value' /></name_value>
+            <name_abbrev><xsl:value-of select='indivodoc:name/@abbrev' /></name_abbrev>
+            <xsl:apply-templates select="indivodoc:value" />
+            <operator><xsl:value-of select='indivodoc:operator/text()' /></operator>
+            <operator_type><xsl:value-of select='indivodoc:operator/@type' /></operator_type>
+            <operator_value><xsl:value-of select='indivodoc:operator/@value' /></operator_value>
+            <operator_abbrev><xsl:value-of select='indivodoc:operator/@abbrev' /></operator_abbrev>
+            <detail><xsl:value-of select='indivodoc:detail/text()' /></detail>
+            <detail_type><xsl:value-of select='indivodoc:detail/@type' /></detail_type>
+            <detail_value><xsl:value-of select='indivodoc:detail/@value' /></detail_value>
+            <detail_abbrev><xsl:value-of select='indivodoc:detail/@abbrev' /></detail_abbrev>
+        </stopCondition>
+    </xsl:template>
+
+    <xsl:template match="indivodoc:targets">
+        <xsl:apply-templates select="indivodoc:target" />
+    </xsl:template>
+
+    <xsl:template match="indivodoc:target">
+        <target>
+            <name><xsl:value-of select='indivodoc:name/text()' /></name>
+            <name_type><xsl:value-of select='indivodoc:name/@type' /></name_type>
+            <name_value><xsl:value-of select='indivodoc:name/@value' /></name_value>
+            <name_abbrev><xsl:value-of select='indivodoc:name/@abbrev' /></name_abbrev>
+            <xsl:if test="indivodoc:textValue">
+                <minimumValue_textvalue><xsl:value-of select='indivodoc:textValue/text()' /></minimumValue_textvalue>
+            </xsl:if>
+            <xsl:if test="indivodoc:value">
+                <minimumValue_value><xsl:value-of select='indivodoc:value/text()' /></minimumValue_value>
+            </xsl:if>
+            <xsl:if test="indivodoc:unit">
+                <minimumValue_unit><xsl:value-of select='indivodoc:unit/text()' /></minimumValue_unit>
+                <minimumValue_unit_type><xsl:value-of select='indivodoc:unit/@type' /></minimumValue_unit_type>
+                <minimumValue_unit_value><xsl:value-of select='indivodoc:unit/@value' /></minimumValue_unit_value>
+                <minimumValue_unit_abbrev><xsl:value-of select='indivodoc:unit/@abbrev' /></minimumValue_unit_abbrev>
+            </xsl:if>
+            <xsl:if test="indivodoc:textValue">
+                <maximumValue_textvalue><xsl:value-of select='indivodoc:textValue/text()' /></maximumValue_textvalue>
+            </xsl:if>
+            <xsl:if test="indivodoc:value">
+                <maximumValue_value><xsl:value-of select='indivodoc:value/text()' /></maximumValue_value>
+            </xsl:if>
+            <xsl:if test="indivodoc:unit">
+                <maximumValue_unit><xsl:value-of select='indivodoc:unit/text()' /></maximumValue_unit>
+                <maximumValue_unit_type><xsl:value-of select='indivodoc:unit/@type' /></maximumValue_unit_type>
+                <maximumValue_unit_value><xsl:value-of select='indivodoc:unit/@value' /></maximumValue_unit_value>
+                <maximumValue_unit_abbrev><xsl:value-of select='indivodoc:unit/@abbrev' /></maximumValue_unit_abbrev>
+            </xsl:if>
+            <severityLevel><xsl:value-of select='indivodoc:severityLevel/text()' /></severityLevel>
+            <severityLevel_type><xsl:value-of select='indivodoc:severityLevel/@type' /></severityLevel_type>
+            <severityLevel_value><xsl:value-of select='indivodoc:severityLevel/@value' /></severityLevel_value>
+            <severityLevel_abbrev><xsl:value-of select='indivodoc:severityLevel/@abbrev' /></severityLevel_abbrev>
+        </target>
+    </xsl:template>
+
+    <xsl:template match="indivodoc:measurementPlans">
+        <xsl:apply-templates select="indivodoc:measurementPlan" />
+    </xsl:template>
+
+    <xsl:template match="indivodoc:measurementPlan">
+        <measurementPlan>
+            <name><xsl:value-of select='indivodoc:name/text()' /></name>
+            <name_type><xsl:value-of select='indivodoc:name/@type' /></name_type>
+            <name_value><xsl:value-of select='indivodoc:name/@value' /></name_value>
+            <name_abbrev><xsl:value-of select='indivodoc:name/@abbrev' /></name_abbrev>
+            <type><xsl:value-of select='indivodoc:type/text()' /></type>
+            <type_type><xsl:value-of select='indivodoc:type/@type' /></type_type>
+            <type_value><xsl:value-of select='indivodoc:type/@value' /></type_value>
+            <type_abbrev><xsl:value-of select='indivodoc:type/@abbrev' /></type_abbrev>
+            <aggregationFunction><xsl:value-of select='indivodoc:aggregationFunction/text()' /></aggregationFunction>
+            <aggregationFunction_type><xsl:value-of select='indivodoc:aggregationFunction/@type' /></aggregationFunction_type>
+            <aggregationFunction_value><xsl:value-of select='indivodoc:aggregationFunction/@value' /></aggregationFunction_value>
+            <aggregationFunction_abbrev><xsl:value-of select='indivodoc:aggregationFunction/@abbrev' /></aggregationFunction_abbrev>
+            <xsl:if test="indivodoc:textValue">
+                <value_textvalue><xsl:value-of select='indivodoc:textValue/text()' /></value_textvalue>
+            </xsl:if>
+            <xsl:if test="indivodoc:value">
+                <value_value><xsl:value-of select='indivodoc:value/text()' /></value_value>
+            </xsl:if>
+            <xsl:if test="indivodoc:unit">
+                <value_unit><xsl:value-of select='indivodoc:unit/text()' /></value_unit>
+                <maximumValue_unit_type><xsl:value-of select='indivodoc:unit/@type' /></maximumValue_unit_type>
+                <maximumValue_unit_value><xsl:value-of select='indivodoc:unit/@value' /></maximumValue_unit_value>
+                <maximumValue_unit_abbrev><xsl:value-of select='indivodoc:unit/@abbrev' /></maximumValue_unit_abbrev>
+            </xsl:if>
+        </measurementPlan>
+    </xsl:template>
+
+    <xsl:template match="indivodoc:devicePlans">
+        <xsl:apply-templates select="indivodoc:devicePlan" />
+    </xsl:template>
+
+    <xsl:template match="indivodoc:devicePlan">
+        <devicePlan>
+            <name><xsl:value-of select='indivodoc:name/text()' /></name>
+            <name_type><xsl:value-of select='indivodoc:name/@type' /></name_type>
+            <name_value><xsl:value-of select='indivodoc:name/@value' /></name_value>
+            <name_abbrev><xsl:value-of select='indivodoc:name/@abbrev' /></name_abbrev>
+            <type><xsl:value-of select='indivodoc:type/text()' /></type>
+            <type_type><xsl:value-of select='indivodoc:type/@type' /></type_type>
+            <type_value><xsl:value-of select='indivodoc:type/@value' /></type_value>
+            <type_abbrev><xsl:value-of select='indivodoc:type/@abbrev' /></type_abbrev>
+            <xsl:if test="indivodoc:textValue">
+                <value_textvalue><xsl:value-of select='indivodoc:textValue/text()' /></value_textvalue>
+            </xsl:if>
+            <xsl:if test="indivodoc:value">
+                <value_value><xsl:value-of select='indivodoc:value/text()' /></value_value>
+            </xsl:if>
+            <xsl:if test="indivodoc:unit">
+                <value_unit><xsl:value-of select='indivodoc:unit/text()' /></value_unit>
+                <value_unit_type><xsl:value-of select='indivodoc:unit/@type' /></value_unit_type>
+                <value_unit_value><xsl:value-of select='indivodoc:unit/@value' /></value_unit_value>
+                <value_unit_abbrev><xsl:value-of select='indivodoc:unit/@abbrev' /></value_unit_abbrev>
+            </xsl:if>
+            <site><xsl:value-of select='indivodoc:site/text()' /></site>
+            <site_type><xsl:value-of select='indivodoc:site/@type' /></site_type>
+            <site_value><xsl:value-of select='indivodoc:site/@value' /></site_value>
+            <site_abbrev><xsl:value-of select='indivodoc:site/@abbrev' /></site_abbrev>
+            <instructions><xsl:value-of select='indivodoc:instructions/text()' /></instructions>
+        </devicePlan>
+    </xsl:template>
+
+    <xsl:template match="indivodoc:medicationPlans">
+        <xsl:apply-templates select="indivodoc:medicationPlan" />
+    </xsl:template>
+
+    <xsl:template match="indivodoc:medicationPlan">
+        <medicationPlan>
+            <name><xsl:value-of select='indivodoc:name/text()' /></name>
+            <name_type><xsl:value-of select='indivodoc:name/@type' /></name_type>
+            <name_value><xsl:value-of select='indivodoc:name/@value' /></name_value>
+            <name_abbrev><xsl:value-of select='indivodoc:name/@abbrev' /></name_abbrev>
+            <indication><xsl:value-of select='indivodoc:indication/text()' /></indication>
+            <xsl:if test="indivodoc:textValue">
+                <dose_textvalue><xsl:value-of select='indivodoc:textValue/text()' /></dose_textvalue>
+            </xsl:if>
+            <xsl:if test="indivodoc:value">
+                <dose_value><xsl:value-of select='indivodoc:value/text()' /></dose_value>
+            </xsl:if>
+            <xsl:if test="indivodoc:unit">
+                <dose_unit><xsl:value-of select='indivodoc:unit/text()' /></dose_unit>
+                <dose_unit_type><xsl:value-of select='indivodoc:unit/@type' /></dose_unit_type>
+                <dose_unit_value><xsl:value-of select='indivodoc:unit/@value' /></dose_unit_value>
+                <dose_unit_abbrev><xsl:value-of select='indivodoc:unit/@abbrev' /></dose_unit_abbrev>
+            </xsl:if>
+            <route><xsl:value-of select='indivodoc:route/text()' /></route>
+            <route_type><xsl:value-of select='indivodoc:route/@type' /></route_type>
+            <route_value><xsl:value-of select='indivodoc:route/@value' /></route_value>
+            <route_abbrev><xsl:value-of select='indivodoc:route/@abbrev' /></route_abbrev>
+            <instructions><xsl:value-of select='indivodoc:instructions/text()' /></instructions>
+        </medicationPlan>
+    </xsl:template>
+
+</xsl:stylesheet>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/stylesheets/healthactionresult.xsl indivo_server/indivo/document_processing/stylesheets/healthactionresult.xsl
--- fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/stylesheets/healthactionresult.xsl	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/document_processing/stylesheets/healthactionresult.xsl	2012-04-18 09:52:28.000000000 -0400
@@ -0,0 +1,177 @@
+<?xml version='1.0' encoding='ISO-8859-1'?>
+<xsl:stylesheet version = '1.0' xmlns:xsl='http://www.w3.org/1999/XSL/Transform' xmlns:indivodoc="http://indivo.org/vocab/xml/documents#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> 
+    <xsl:output method = "xml" indent = "yes" />  
+    <xsl:template match="indivodoc:HealthActionResult">
+    <facts>
+        <fact>
+            <name><xsl:value-of select='indivodoc:name/text()' /></name>
+            <name_type><xsl:value-of select='indivodoc:name/@type' /></name_type>
+            <name_value><xsl:value-of select='indivodoc:name/@value' /></name_value>
+            <name_abbrev><xsl:value-of select='indivodoc:name/@abbrev' /></name_abbrev>
+            <planType><xsl:value-of select='indivodoc:planType/text()' /></planType>
+            <reportedBy><xsl:value-of select='indivodoc:reportedBy/text()' /></reportedBy>
+            <dateReported><xsl:value-of select='indivodoc:dateReported/text()' /></dateReported>
+            <actions_xml><xsl:value-of select='indivodoc:actions_xml/text()' /></actions_xml>
+            <actions><xsl:apply-templates select="indivodoc:actions" /></actions>
+        </fact>
+    </facts>
+    </xsl:template>
+
+    <xsl:template match="indivodoc:route">
+        <xsl:if test="indivodoc:textValue">
+            <route_textvalue><xsl:value-of select='indivodoc:textValue/text()' /></route_textvalue>
+        </xsl:if>
+        <xsl:if test="indivodoc:value">
+            <route_value><xsl:value-of select='indivodoc:value/text()' /></route_value>
+        </xsl:if>
+        <xsl:if test="indivodoc:unit">
+            <route_unit><xsl:value-of select='indivodoc:unit/text()' /></route_unit>
+            <route_unit_type><xsl:value-of select='indivodoc:unit/@type' /></route_unit_type>
+            <route_unit_value><xsl:value-of select='indivodoc:unit/@value' /></route_unit_value>
+            <route_unit_abbrev><xsl:value-of select='indivodoc:unit/@abbrev' /></route_unit_abbrev>
+        </xsl:if>
+    </xsl:template>
+
+    <xsl:template match="indivodoc:value">
+        <xsl:if test="indivodoc:textValue">
+            <value_textvalue><xsl:value-of select='indivodoc:textValue/text()' /></value_textvalue>
+        </xsl:if>
+        <xsl:if test="indivodoc:value">
+            <value_value><xsl:value-of select='indivodoc:value/text()' /></value_value>
+        </xsl:if>
+        <xsl:if test="indivodoc:unit">
+            <value_unit><xsl:value-of select='indivodoc:unit/text()' /></value_unit>
+            <value_unit_type><xsl:value-of select='indivodoc:unit/@type' /></value_unit_type>
+            <value_unit_value><xsl:value-of select='indivodoc:unit/@value' /></value_unit_value>
+            <value_unit_abbrev><xsl:value-of select='indivodoc:unit/@abbrev' /></value_unit_abbrev>
+        </xsl:if>
+    </xsl:template>
+
+    <xsl:template match="indivodoc:actions">
+        <xsl:apply-templates select="indivodoc:action" />
+    </xsl:template>
+
+    <xsl:template match="indivodoc:action">
+        <xsl:choose>
+            <xsl:when test="@xsi:type='ActionGroupResult'">
+                <ActionGroupResult>
+                    <measurements><xsl:apply-templates select="indivodoc:measurements" /></measurements>
+                    <deviceResults><xsl:apply-templates select="indivodoc:deviceResults" /></deviceResults>
+                    <medicationAdministrations><xsl:apply-templates select="indivodoc:medicationAdministrations" /></medicationAdministrations>
+                    <actions><xsl:apply-templates select="indivodoc:actions" /></actions>
+                </ActionGroupResult>
+            </xsl:when>
+            <xsl:otherwise>
+                <ActionStepResult>
+                    <measurements><xsl:apply-templates select="indivodoc:measurements" /></measurements>
+                    <deviceResults><xsl:apply-templates select="indivodoc:deviceResults" /></deviceResults>
+                    <medicationAdministrations><xsl:apply-templates select="indivodoc:medicationAdministrations" /></medicationAdministrations>
+                    <name><xsl:value-of select='indivodoc:name/text()' /></name>
+                    <name_type><xsl:value-of select='indivodoc:name/@type' /></name_type>
+                    <name_value><xsl:value-of select='indivodoc:name/@value' /></name_value>
+                    <name_abbrev><xsl:value-of select='indivodoc:name/@abbrev' /></name_abbrev>
+                    <occurrences><xsl:apply-templates select="indivodoc:occurrences" /></occurrences>
+                </ActionStepResult>
+            </xsl:otherwise>
+        </xsl:choose>
+    </xsl:template>
+
+    <xsl:template match="indivodoc:occurrences">
+        <xsl:apply-templates select="indivodoc:occurrence" />
+    </xsl:template>
+
+    <xsl:template match="indivodoc:occurrence">
+        <occurrence>
+            <xsl:if test="indivodoc:startTime">
+            <startTime><xsl:value-of select='indivodoc:startTime/text()' /></startTime>
+            </xsl:if>
+            <xsl:if test="indivodoc:endTime">
+            <endTime><xsl:value-of select='indivodoc:endTime/text()' /></endTime>
+            </xsl:if>
+            <xsl:if test="indivodoc:additionalDetails">
+            <additionalDetails><xsl:value-of select='indivodoc:additionalDetails/text()' /></additionalDetails>
+            </xsl:if>
+            <stopConditions><xsl:apply-templates select="indivodoc:stopConditions" /></stopConditions>
+            <measurements><xsl:apply-templates select="indivodoc:measurements" /></measurements>
+            <deviceResults><xsl:apply-templates select="indivodoc:deviceResults" /></deviceResults>
+            <medicationAdministrations><xsl:apply-templates select="indivodoc:medicationAdministrations" /></medicationAdministrations>
+        </occurrence>
+    </xsl:template>
+
+    <xsl:template match="indivodoc:stopConditions">
+        <xsl:apply-templates select="indivodoc:stopCondition" />
+    </xsl:template>
+
+    <xsl:template match="indivodoc:stopCondition">
+        <stopCondition>
+            <name><xsl:value-of select='indivodoc:name/text()' /></name>
+            <name_type><xsl:value-of select='indivodoc:name/@type' /></name_type>
+            <name_value><xsl:value-of select='indivodoc:name/@value' /></name_value>
+            <name_abbrev><xsl:value-of select='indivodoc:name/@abbrev' /></name_abbrev>
+            <xsl:apply-templates select="indivodoc:value" />
+       </stopCondition>
+    </xsl:template>
+
+    <xsl:template match="indivodoc:measurements">
+        <xsl:apply-templates select="indivodoc:measurement" />
+    </xsl:template>
+
+    <xsl:template match="indivodoc:measurement">
+        <measurement>
+            <name><xsl:value-of select='indivodoc:name/text()' /></name>
+            <name_type><xsl:value-of select='indivodoc:name/@type' /></name_type>
+            <name_value><xsl:value-of select='indivodoc:name/@value' /></name_value>
+            <name_abbrev><xsl:value-of select='indivodoc:name/@abbrev' /></name_abbrev>
+            <type><xsl:value-of select='indivodoc:type/text()' /></type>
+            <type_type><xsl:value-of select='indivodoc:type/@type' /></type_type>
+            <type_value><xsl:value-of select='indivodoc:type/@value' /></type_value>
+            <type_abbrev><xsl:value-of select='indivodoc:type/@abbrev' /></type_abbrev>
+            <xsl:apply-templates select="indivodoc:value" />
+            <aggregationFunction><xsl:value-of select='indivodoc:aggregationFunction/text()' /></aggregationFunction>
+            <aggregationFunction_type><xsl:value-of select='indivodoc:aggregationFunction/@type' /></aggregationFunction_type>
+            <aggregationFunction_value><xsl:value-of select='indivodoc:aggregationFunction/@value' /></aggregationFunction_value>
+            <aggregationFunction_abbrev><xsl:value-of select='indivodoc:aggregationFunction/@abbrev' /></aggregationFunction_abbrev>
+        </measurement>
+    </xsl:template>
+
+    <xsl:template match="indivodoc:deviceResults">
+        <xsl:apply-templates select="indivodoc:deviceResult" />
+    </xsl:template>
+
+    <xsl:template match="indivodoc:deviceResult">
+        <deviceResult>
+            <name><xsl:value-of select='indivodoc:name/text()' /></name>
+            <name_type><xsl:value-of select='indivodoc:name/@type' /></name_type>
+            <name_value><xsl:value-of select='indivodoc:name/@value' /></name_value>
+            <name_abbrev><xsl:value-of select='indivodoc:name/@abbrev' /></name_abbrev>
+            <type><xsl:value-of select='indivodoc:type/text()' /></type>
+            <type_type><xsl:value-of select='indivodoc:type/@type' /></type_type>
+            <type_value><xsl:value-of select='indivodoc:type/@value' /></type_value>
+            <type_abbrev><xsl:value-of select='indivodoc:type/@abbrev' /></type_abbrev>
+            <xsl:apply-templates select="indivodoc:value" />
+            <site><xsl:value-of select='indivodoc:site/text()' /></site>
+            <site_type><xsl:value-of select='indivodoc:site/@type' /></site_type>
+            <site_value><xsl:value-of select='indivodoc:site/@value' /></site_value>
+            <site_abbrev><xsl:value-of select='indivodoc:site/@abbrev' /></site_abbrev>
+        </deviceResult>
+    </xsl:template>
+
+    <xsl:template match="indivodoc:medicationAdministrations">
+        <xsl:apply-templates select="indivodoc:medicationAdministration" />
+    </xsl:template>
+
+    <xsl:template match="indivodoc:medicationAdministration">
+        <medicationAdministration>
+            <name><xsl:value-of select='indivodoc:name/text()' /></name>
+            <name_type><xsl:value-of select='indivodoc:name/@type' /></name_type>
+            <name_value><xsl:value-of select='indivodoc:name/@value' /></name_value>
+            <name_abbrev><xsl:value-of select='indivodoc:name/@abbrev' /></name_abbrev>
+            <dose><xsl:value-of select='indivodoc:dose/text()' /></dose>
+            <dose_type><xsl:value-of select='indivodoc:dose/@type' /></dose_type>
+            <dose_value><xsl:value-of select='indivodoc:dose/@value' /></dose_value>
+            <dose_abbrev><xsl:value-of select='indivodoc:dose/@abbrev' /></dose_abbrev>
+            <xsl:apply-templates select="indivodoc:route" />
+        </medicationAdministration>
+    </xsl:template>
+
+</xsl:stylesheet>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/stylesheets/healthactionschedule.xsl indivo_server/indivo/document_processing/stylesheets/healthactionschedule.xsl
--- fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/stylesheets/healthactionschedule.xsl	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/document_processing/stylesheets/healthactionschedule.xsl	2012-04-20 18:38:12.000000000 -0400
@@ -0,0 +1,59 @@
+<?xml version='1.0' encoding='ISO-8859-1'?>
+<xsl:stylesheet version = '1.0' xmlns:xsl='http://www.w3.org/1999/XSL/Transform' xmlns:indivodoc="http://indivo.org/vocab/xml/documents#"> 
+  <xsl:output method = "xml" indent = "yes" />  
+  <xsl:template match="indivodoc:HealthActionSchedule">
+    <facts>
+      <fact>
+        <name><xsl:value-of select='indivodoc:name/text()' /></name>
+        <name_type><xsl:value-of select='indivodoc:name/@type' /></name_type>
+        <name_value><xsl:value-of select='indivodoc:name/@value' /></name_value>
+        <name_abbrev><xsl:value-of select='indivodoc:name/@abbrev' /></name_abbrev>
+        <scheduledBy><xsl:value-of select='indivodoc:scheduledBy/text()' /></scheduledBy>
+        <dateScheduled><xsl:value-of select='indivodoc:dateScheduled/text()' /></dateScheduled>
+        <dateStart><xsl:value-of select='indivodoc:dateStart/text()' /></dateStart>
+        <xsl:if test="indivodoc:dateEnd">
+          <dateEnd><xsl:value-of select='indivodoc:dateEnd/text()' /></dateEnd>
+        </xsl:if>
+        <xsl:if test="indivodoc:recurrenceRule">
+          <xsl:apply-templates select="indivodoc:recurrenceRule" />
+        </xsl:if>
+        <xsl:if test="indivodoc:dose">
+          <xsl:apply-templates select="indivodoc:dose" />
+        </xsl:if>
+        <instructions><xsl:value-of select='indivodoc:instructions/text()' /></instructions>
+      </fact>
+    </facts>
+  </xsl:template>
+
+  <xsl:template match="indivodoc:recurrenceRule">
+    <recurrenceRule_frequency><xsl:value-of select='indivodoc:frequency/text()' /></recurrenceRule_frequency>
+    <recurrenceRule_frequency_type><xsl:value-of select='indivodoc:frequency/@type' /></recurrenceRule_frequency_type>
+    <recurrenceRule_frequency_value><xsl:value-of select='indivodoc:frequency/@value' /></recurrenceRule_frequency_value>
+    <recurrenceRule_frequency_abbrev><xsl:value-of select='indivodoc:frequency/@abbrev' /></recurrenceRule_frequency_abbrev>
+    <xsl:if test="indivodoc:interval">
+      <recurrenceRule_interval><xsl:value-of select='indivodoc:interval/text()' /></recurrenceRule_interval>
+      <recurrenceRule_interval_type><xsl:value-of select='indivodoc:interval/@type' /></recurrenceRule_interval_type>
+      <recurrenceRule_interval_value><xsl:value-of select='indivodoc:interval/@value' /></recurrenceRule_interval_value>
+      <recurrenceRule_interval_abbrev><xsl:value-of select='indivodoc:interval/@abbrev' /></recurrenceRule_interval_abbrev>
+    </xsl:if>
+    <xsl:if test="indivodoc:count">
+      <recurrenceRule_count><xsl:value-of select='indivodoc:count/text()' /></recurrenceRule_count>
+    </xsl:if>
+  </xsl:template>
+
+  <xsl:template match="indivodoc:dose">
+    <xsl:if test="indivodoc:textValue">
+      <dose_textvalue><xsl:value-of select='indivodoc:textValue/text()' /></dose_textvalue>
+    </xsl:if>
+    <xsl:if test="indivodoc:value">
+      <dose_value><xsl:value-of select='indivodoc:value/text()' /></dose_value>
+    </xsl:if>
+    <xsl:if test="indivodoc:unit">
+      <dose_unit><xsl:value-of select='indivodoc:unit/text()' /></dose_unit>
+      <dose_unit_type><xsl:value-of select='indivodoc:unit/@type' /></dose_unit_type>
+      <dose_unit_value><xsl:value-of select='indivodoc:unit/@value' /></dose_unit_value>
+      <dose_unit_abbrev><xsl:value-of select='indivodoc:unit/@abbrev' /></dose_unit_abbrev>
+    </xsl:if>
+  </xsl:template>
+
+</xsl:stylesheet>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/stylesheets/healthmeasurement.xsl indivo_server/indivo/document_processing/stylesheets/healthmeasurement.xsl
--- fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/stylesheets/healthmeasurement.xsl	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/document_processing/stylesheets/healthmeasurement.xsl	2012-04-26 15:10:52.000000000 -0400
@@ -0,0 +1,58 @@
+<?xml version='1.0' encoding='ISO-8859-1'?>
+<xsl:stylesheet version = '1.0' xmlns:xsl='http://www.w3.org/1999/XSL/Transform' xmlns:indivodoc="http://indivo.org/vocab/xml/documents#"> 
+  <xsl:output method = "xml" indent = "yes" />  
+  <xsl:template match="indivodoc:HealthMeasurement">
+    <facts>
+      <fact>
+        <name><xsl:value-of select='indivodoc:name/text()' /></name>
+        <name_type><xsl:value-of select='indivodoc:name/@type' /></name_type>
+        <name_value><xsl:value-of select='indivodoc:name/@value' /></name_value>
+        <name_abbrev><xsl:value-of select='indivodoc:name/@abbrev' /></name_abbrev>
+        <xsl:if test="indivodoc:measuredBy">
+          <measuredBy><xsl:value-of select='indivodoc:measuredBy/text()' /></measuredBy>
+        </xsl:if>
+        <dateMeasuredStart><xsl:value-of select='indivodoc:dateMeasuredStart/text()' /></dateMeasuredStart>
+        <xsl:if test="indivodoc:dateMeasuredEnd">
+          <dateMeasuredEnd><xsl:value-of select='indivodoc:dateMeasuredEnd/text()' /></dateMeasuredEnd>
+        </xsl:if>
+        <xsl:if test="indivodoc:vendor">
+          <vendor><xsl:value-of select='indivodoc:vendor/text()' /></vendor>
+          <vendor_type><xsl:value-of select='indivodoc:vendor/@type' /></vendor_type>
+          <vendor_value><xsl:value-of select='indivodoc:vendor/@value' /></vendor_value>
+          <vendor_abbrev><xsl:value-of select='indivodoc:vendor/@abbrev' /></vendor_abbrev>
+        </xsl:if>
+        <xsl:if test="indivodoc:result">
+          <xsl:apply-templates select="indivodoc:result" />
+        </xsl:if>
+        <xsl:if test="indivodoc:site">
+          <site><xsl:value-of select='indivodoc:site/text()' /></site>
+        </xsl:if>
+        <xsl:if test="indivodoc:position">
+          <position><xsl:value-of select='indivodoc:position/text()' /></position>
+        </xsl:if>
+        <xsl:if test="indivodoc:technique">
+          <technique><xsl:value-of select='indivodoc:technique/text()' /></technique>
+        </xsl:if>
+        <xsl:if test="indivodoc:comments">
+          <comments><xsl:value-of select='indivodoc:comments/text()' /></comments>
+        </xsl:if>
+      </fact>
+    </facts>
+  </xsl:template>
+
+  <xsl:template match="indivodoc:result">
+    <xsl:if test="indivodoc:textValue">
+      <result_textvalue><xsl:value-of select='indivodoc:textValue/text()' /></result_textvalue>
+    </xsl:if>
+    <xsl:if test="indivodoc:value">
+      <result_value><xsl:value-of select='indivodoc:value/text()' /></result_value>
+    </xsl:if>
+    <xsl:if test="indivodoc:unit">
+      <result_unit><xsl:value-of select='indivodoc:unit/text()' /></result_unit>
+      <result_unit_type><xsl:value-of select='indivodoc:unit/@type' /></result_unit_type>
+      <result_unit_value><xsl:value-of select='indivodoc:unit/@value' /></result_unit_value>
+      <result_unit_abbrev><xsl:value-of select='indivodoc:unit/@abbrev' /></result_unit_abbrev>
+    </xsl:if>
+  </xsl:template>
+
+</xsl:stylesheet>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/stylesheets/medicationadministration.xsl indivo_server/indivo/document_processing/stylesheets/medicationadministration.xsl
--- fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/stylesheets/medicationadministration.xsl	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/document_processing/stylesheets/medicationadministration.xsl	2012-02-21 07:36:45.000000000 -0500
@@ -0,0 +1,58 @@
+<?xml version='1.0' encoding='ISO-8859-1'?>
+<xsl:stylesheet version = '1.0' xmlns:xsl='http://www.w3.org/1999/XSL/Transform' xmlns:indivodoc="http://indivo.org/vocab/xml/documents#"> 
+  <xsl:output method = "xml" indent = "yes" />  
+  <xsl:template match="indivodoc:MedicationAdministration">
+    <facts>
+      <fact>
+        <name><xsl:value-of select='indivodoc:name/text()' /></name>
+        <name_type><xsl:value-of select='indivodoc:name/@type' /></name_type>
+        <name_value><xsl:value-of select='indivodoc:name/@value' /></name_value>
+        <name_abbrev><xsl:value-of select='indivodoc:name/@abbrev' /></name_abbrev>
+        <reportedBy><xsl:value-of select='indivodoc:reportedBy/text()' /></reportedBy>
+        <dateReported><xsl:value-of select='indivodoc:dateReported/text()' /></dateReported>
+        <xsl:if test="indivodoc:dateAdministered">
+          <dateAdministered><xsl:value-of select='indivodoc:dateAdministered/text()' /></dateAdministered>
+        </xsl:if>
+        <xsl:if test="indivodoc:amountAdministered">
+          <xsl:apply-templates select='indivodoc:amountAdministered' />
+        </xsl:if>
+        <xsl:if test="indivodoc:amountRemaining">
+          <xsl:apply-templates select='indivodoc:dateAdministered' />
+        </xsl:if>
+      </fact>
+    </facts>
+  </xsl:template>
+  <xsl:template match="indivodoc:amountAdministered">
+    <xsl:if test="indivodoc:textValue">
+      <amountAdministered_textvalue><xsl:value-of select='indivodoc:textValue/text()' /></amountAdministered_textvalue>
+    </xsl:if>
+    <xsl:if test="indivodoc:value">
+      <amountAdministered_value><xsl:value-of select='indivodoc:value/text()' /></amountAdministered_value>
+    </xsl:if>
+    <xsl:if test="indivodoc:unit">
+      <amountAdministered_unit>
+        <xsl:value-of select='indivodoc:unit/text()' />
+      </amountAdministered_unit>
+      <amountAdministered_unit_type><xsl:value-of select='indivodoc:unit/@type' /></amountAdministered_unit_type>
+      <amountAdministered_unit_value><xsl:value-of select='indivodoc:unit/@value' /></amountAdministered_unit_value>
+      <amountAdministered_unit_abbrev><xsl:value-of select='indivodoc:unit/@abbrev' /></amountAdministered_unit_abbrev>
+    </xsl:if>
+  </xsl:template>
+  <xsl:template match="indivodoc:amountRemaining">
+    <xsl:if test="indivodoc:textValue">
+      <amountRemaining_textvalue><xsl:value-of select='indivodoc:textValue/text()' /></amountRemaining_textvalue>
+    </xsl:if>
+    <xsl:if test="indivodoc:value">
+      <amountRemaining_value><xsl:value-of select='indivodoc:value/text()' /></amountRemaining_value>
+    </xsl:if>
+    <xsl:if test="indivodoc:unit">
+      <amountRemaining_unit>
+        <xsl:value-of select='indivodoc:unit/text()' />
+      </amountRemaining_unit>
+      <amountRemaining_unit_type><xsl:value-of select='indivodoc:unit/@type' /></amountRemaining_unit_type>
+      <amountRemaining_unit_value><xsl:value-of select='indivodoc:unit/@value' /></amountRemaining_unit_value>
+      <amountRemaining_unit_abbrev><xsl:value-of select='indivodoc:unit/@abbrev' /></amountRemaining_unit_abbrev>
+    </xsl:if>
+  </xsl:template>
+
+</xsl:stylesheet>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/stylesheets/medicationfill.xsl indivo_server/indivo/document_processing/stylesheets/medicationfill.xsl
--- fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/stylesheets/medicationfill.xsl	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/document_processing/stylesheets/medicationfill.xsl	2012-02-21 07:36:45.000000000 -0500
@@ -0,0 +1,52 @@
+<?xml version='1.0' encoding='ISO-8859-1'?>
+<xsl:stylesheet version = '1.0' xmlns:xsl='http://www.w3.org/1999/XSL/Transform' xmlns:indivodoc="http://indivo.org/vocab/xml/documents#"> 
+  <xsl:output method = "xml" indent = "yes" />  
+  <xsl:template match="indivodoc:MedicationFill">
+    <facts>
+      <fact>
+        <name><xsl:value-of select='indivodoc:name/text()' /></name>
+        <name_type><xsl:value-of select='indivodoc:name/@type' /></name_type>
+        <name_value><xsl:value-of select='indivodoc:name/@value' /></name_value>
+        <name_abbrev><xsl:value-of select='indivodoc:name/@abbrev' /></name_abbrev>
+        <filledBy><xsl:value-of select='indivodoc:filledBy/text()' /></filledBy>
+        <dateFilled><xsl:value-of select='indivodoc:dateFilled/text()' /></dateFilled>
+        <xsl:apply-templates select='indivodoc:amountFilled' />
+        <xsl:if test="indivodoc:ndc">
+          <ndc><xsl:value-of select='indivodoc:ndc/text()' /></ndc>
+          <ndc_type><xsl:value-of select='indivodoc:ndc/@type' /></ndc_type>
+          <ndc_value><xsl:value-of select='indivodoc:ndc/@value' /></ndc_value>
+          <ndc_abbrev><xsl:value-of select='indivodoc:ndc/@abbrev' /></ndc_abbrev>
+        </xsl:if>
+        <xsl:if test="indivodoc:fillSequenceNumber">
+          <fillSequenceNumber><xsl:value-of select='indivodoc:fillSequenceNumber/text()' /></fillSequenceNumber>
+        </xsl:if>
+        <xsl:if test="indivodoc:lotNumber">
+          <lotNumber><xsl:value-of select='indivodoc:lotNumber/text()' /></lotNumber>
+        </xsl:if>
+        <xsl:if test="indivodoc:refillsRemaining">
+          <refillsRemaining><xsl:value-of select='indivodoc:refillsRemaining/text()' /></refillsRemaining>
+        </xsl:if>
+        <xsl:if test="indivodoc:instructions">
+          <instructions><xsl:value-of select='indivodoc:instructions/text()' /></instructions>
+        </xsl:if>        
+      </fact>
+    </facts>
+  </xsl:template>
+
+  <xsl:template match="indivodoc:amountFilled">
+    <xsl:if test="indivodoc:textValue">
+      <amountFilled_textvalue><xsl:value-of select='indivodoc:textValue/text()' /></amountFilled_textvalue>
+    </xsl:if>
+    <xsl:if test="indivodoc:value">
+      <amountFilled_value><xsl:value-of select='indivodoc:value/text()' /></amountFilled_value>
+    </xsl:if>
+    <xsl:if test="indivodoc:unit">
+      <amountFilled_unit>
+        <xsl:value-of select='indivodoc:unit/text()' />
+      </amountFilled_unit>
+      <amountFilled_unit_type><xsl:value-of select='indivodoc:unit/@type' /></amountFilled_unit_type>
+      <amountFilled_unit_value><xsl:value-of select='indivodoc:unit/@value' /></amountFilled_unit_value>
+      <amountFilled_unit_abbrev><xsl:value-of select='indivodoc:unit/@abbrev' /></amountFilled_unit_abbrev>
+    </xsl:if>
+  </xsl:template>
+</xsl:stylesheet>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/stylesheets/medicationorder.xsl indivo_server/indivo/document_processing/stylesheets/medicationorder.xsl
--- fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/stylesheets/medicationorder.xsl	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/document_processing/stylesheets/medicationorder.xsl	2012-02-21 07:36:45.000000000 -0500
@@ -0,0 +1,52 @@
+<?xml version='1.0' encoding='ISO-8859-1'?>
+<xsl:stylesheet version = '1.0' xmlns:xsl='http://www.w3.org/1999/XSL/Transform' xmlns:indivodoc="http://indivo.org/vocab/xml/documents#"> 
+  <xsl:output method = "xml" indent = "yes" />  
+  <xsl:template match="indivodoc:MedicationOrder">
+    <facts>
+      <fact>
+        <xsl:if test="indivodoc:name">
+	        <name><xsl:value-of select='indivodoc:name/text()' /></name>
+	        <name_type><xsl:value-of select='indivodoc:name/@type' /></name_type>
+	        <name_value><xsl:value-of select='indivodoc:name/@value' /></name_value>
+	        <name_abbrev><xsl:value-of select='indivodoc:name/@abbrev' /></name_abbrev>
+        </xsl:if>
+        <orderType><xsl:value-of select='indivodoc:orderType/text()' /></orderType>
+        <orderedBy><xsl:value-of select='indivodoc:orderedBy/text()' /></orderedBy>
+        <dateOrdered><xsl:value-of select='indivodoc:dateOrdered/text()' /></dateOrdered>
+        <xsl:if test="indivodoc:dateExpires">
+          <dateExpires><xsl:value-of select='indivodoc:dateExpires/text()' /></dateExpires>
+        </xsl:if>
+        <xsl:if test="indivodoc:indication">
+          <indication><xsl:value-of select='indivodoc:indication/text()' /></indication>
+        </xsl:if>
+        <xsl:apply-templates select='indivodoc:amountOrdered' />
+        <xsl:if test="indivodoc:refills">
+          <refills><xsl:value-of select='indivodoc:refills/text()' /></refills>
+        </xsl:if>
+        <xsl:if test="indivodoc:substitutionPermitted">
+          <substitutionPermitted><xsl:value-of select='indivodoc:substitutionPermitted/text()' /></substitutionPermitted>
+        </xsl:if>
+        <xsl:if test="indivodoc:instructions">
+          <instructions><xsl:value-of select='indivodoc:instructions/text()' /></instructions>
+        </xsl:if>        
+      </fact>
+    </facts>
+  </xsl:template>
+
+  <xsl:template match="indivodoc:amountOrdered">
+    <xsl:if test="indivodoc:textValue">
+      <amountOrdered_textvalue><xsl:value-of select='indivodoc:textValue/text()' /></amountOrdered_textvalue>
+    </xsl:if>
+    <xsl:if test="indivodoc:value">
+      <amountOrdered_value><xsl:value-of select='indivodoc:value/text()' /></amountOrdered_value>
+    </xsl:if>
+    <xsl:if test="indivodoc:unit">
+      <amountOrdered_unit>
+        <xsl:value-of select='indivodoc:unit/text()' />
+      </amountOrdered_unit>
+      <amountOrdered_unit_type><xsl:value-of select='indivodoc:unit/@type' /></amountOrdered_unit_type>
+      <amountOrdered_unit_value><xsl:value-of select='indivodoc:unit/@value' /></amountOrdered_unit_value>
+      <amountOrdered_unit_abbrev><xsl:value-of select='indivodoc:unit/@abbrev' /></amountOrdered_unit_abbrev>
+    </xsl:if>
+  </xsl:template>
+</xsl:stylesheet>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/stylesheets/medicationscheduleitem.xsl indivo_server/indivo/document_processing/stylesheets/medicationscheduleitem.xsl
--- fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/stylesheets/medicationscheduleitem.xsl	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/document_processing/stylesheets/medicationscheduleitem.xsl	2012-02-21 07:36:45.000000000 -0500
@@ -0,0 +1,62 @@
+<?xml version='1.0' encoding='ISO-8859-1'?>
+<xsl:stylesheet version = '1.0' xmlns:xsl='http://www.w3.org/1999/XSL/Transform' xmlns:indivodoc="http://indivo.org/vocab/xml/documents#"> 
+  <xsl:output method = "xml" indent = "yes" />  
+  <xsl:template match="indivodoc:MedicationScheduleItem">
+    <facts>
+      <fact>
+        <name><xsl:value-of select='indivodoc:name/text()' /></name>
+        <name_type><xsl:value-of select='indivodoc:name/@type' /></name_type>
+        <name_value><xsl:value-of select='indivodoc:name/@value' /></name_value>
+        <name_abbrev><xsl:value-of select='indivodoc:name/@abbrev' /></name_abbrev>
+        <scheduledBy><xsl:value-of select='indivodoc:scheduledBy/text()' /></scheduledBy>
+        <dateScheduled><xsl:value-of select='indivodoc:dateScheduled/text()' /></dateScheduled>
+        <dateStart><xsl:value-of select='indivodoc:dateStart/text()' /></dateStart>
+        <xsl:if test="indivodoc:dateEnd">
+          <dateEnd><xsl:value-of select='indivodoc:dateEnd/text()' /></dateEnd>
+        </xsl:if>
+        <xsl:if test="indivodoc:recurrenceRule">
+          <xsl:apply-templates select="indivodoc:recurrenceRule" />
+        </xsl:if>
+        <xsl:apply-templates select='indivodoc:dose' /> 
+        <xsl:if test="indivodoc:instructions">
+          <instructions><xsl:value-of select='indivodoc:instructions/text()' /></instructions>
+        </xsl:if>        
+      </fact>
+    </facts>
+  </xsl:template>
+
+  <xsl:template match="indivodoc:recurrenceRule">
+    <recurrenceRule_frequency><xsl:value-of select='indivodoc:frequency/text()' /></recurrenceRule_frequency>
+    <recurrenceRule_frequency_type><xsl:value-of select='indivodoc:frequency/@type' /></recurrenceRule_frequency_type>
+    <recurrenceRule_frequency_value><xsl:value-of select='indivodoc:frequency/@value' /></recurrenceRule_frequency_value>
+    <recurrenceRule_frequency_abbrev><xsl:value-of select='indivodoc:frequency/@abbrev' /></recurrenceRule_frequency_abbrev>
+    <xsl:if test="indivodoc:interval">
+      <recurrenceRule_interval><xsl:value-of select='indivodoc:interval/text()' /></recurrenceRule_interval>
+      <recurrenceRule_interval_type><xsl:value-of select='indivodoc:interval/@type' /></recurrenceRule_interval_type>
+      <recurrenceRule_interval_value><xsl:value-of select='indivodoc:interval/@value' /></recurrenceRule_interval_value>
+      <recurrenceRule_interval_abbrev><xsl:value-of select='indivodoc:interval/@abbrev' /></recurrenceRule_interval_abbrev>
+    </xsl:if>
+    <xsl:if test="indivodoc:dateUntil">
+      <recurrenceRule_dateUntil><xsl:value-of select='indivodoc:dateUntil/text()' /></recurrenceRule_dateUntil>
+    </xsl:if>
+    <xsl:if test="indivodoc:count">
+      <recurrenceRule_count><xsl:value-of select='indivodoc:count/text()' /></recurrenceRule_count>
+    </xsl:if>
+  </xsl:template>
+
+  <xsl:template match="indivodoc:dose">
+    <xsl:if test="indivodoc:textValue">
+      <dose_textvalue><xsl:value-of select='indivodoc:textValue/text()' /></dose_textvalue>
+    </xsl:if>
+    <xsl:if test="indivodoc:value">
+      <dose_value><xsl:value-of select='indivodoc:value/text()' /></dose_value>
+    </xsl:if>
+    <xsl:if test="indivodoc:unit">
+      <dose_unit><xsl:value-of select='indivodoc:unit/text()' /></dose_unit>
+      <dose_unit_type><xsl:value-of select='indivodoc:unit/@type' /></dose_unit_type>
+      <dose_unit_value><xsl:value-of select='indivodoc:unit/@value' /></dose_unit_value>
+      <dose_unit_abbrev><xsl:value-of select='indivodoc:unit/@abbrev' /></dose_unit_abbrev>
+    </xsl:if>
+  </xsl:template>
+</xsl:stylesheet>
+
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/stylesheets/medicationschedule.xsl indivo_server/indivo/document_processing/stylesheets/medicationschedule.xsl
--- fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/stylesheets/medicationschedule.xsl	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/document_processing/stylesheets/medicationschedule.xsl	2012-04-20 18:46:30.000000000 -0400
@@ -0,0 +1,59 @@
+<?xml version='1.0' encoding='ISO-8859-1'?>
+<xsl:stylesheet version = '1.0' xmlns:xsl='http://www.w3.org/1999/XSL/Transform' xmlns:indivodoc="http://indivo.org/vocab/xml/documents#"> 
+  <xsl:output method = "xml" indent = "yes" />  
+  <xsl:template match="indivodoc:MedicationSchedule">
+    <facts>
+      <fact>
+        <name><xsl:value-of select='indivodoc:name/text()' /></name>
+        <name_type><xsl:value-of select='indivodoc:name/@type' /></name_type>
+        <name_value><xsl:value-of select='indivodoc:name/@value' /></name_value>
+        <name_abbrev><xsl:value-of select='indivodoc:name/@abbrev' /></name_abbrev>
+        <scheduledBy><xsl:value-of select='indivodoc:scheduledBy/text()' /></scheduledBy>
+        <dateScheduled><xsl:value-of select='indivodoc:dateScheduled/text()' /></dateScheduled>
+        <dateStart><xsl:value-of select='indivodoc:dateStart/text()' /></dateStart>
+        <xsl:if test="indivodoc:dateEnd">
+          <dateEnd><xsl:value-of select='indivodoc:dateEnd/text()' /></dateEnd>
+        </xsl:if>
+        <xsl:if test="indivodoc:recurrenceRule">
+          <xsl:apply-templates select="indivodoc:recurrenceRule" />
+        </xsl:if>
+        <xsl:if test="indivodoc:dose">
+          <xsl:apply-templates select="indivodoc:dose" />
+        </xsl:if>
+        <instructions><xsl:value-of select='indivodoc:instructions/text()' /></instructions>
+      </fact>
+    </facts>
+  </xsl:template>
+
+  <xsl:template match="indivodoc:recurrenceRule">
+    <recurrenceRule_frequency><xsl:value-of select='indivodoc:frequency/text()' /></recurrenceRule_frequency>
+    <recurrenceRule_frequency_type><xsl:value-of select='indivodoc:frequency/@type' /></recurrenceRule_frequency_type>
+    <recurrenceRule_frequency_value><xsl:value-of select='indivodoc:frequency/@value' /></recurrenceRule_frequency_value>
+    <recurrenceRule_frequency_abbrev><xsl:value-of select='indivodoc:frequency/@abbrev' /></recurrenceRule_frequency_abbrev>
+    <xsl:if test="indivodoc:interval">
+      <recurrenceRule_interval><xsl:value-of select='indivodoc:interval/text()' /></recurrenceRule_interval>
+      <recurrenceRule_interval_type><xsl:value-of select='indivodoc:interval/@type' /></recurrenceRule_interval_type>
+      <recurrenceRule_interval_value><xsl:value-of select='indivodoc:interval/@value' /></recurrenceRule_interval_value>
+      <recurrenceRule_interval_abbrev><xsl:value-of select='indivodoc:interval/@abbrev' /></recurrenceRule_interval_abbrev>
+    </xsl:if>
+    <xsl:if test="indivodoc:count">
+      <recurrenceRule_count><xsl:value-of select='indivodoc:count/text()' /></recurrenceRule_count>
+    </xsl:if>
+  </xsl:template>
+
+  <xsl:template match="indivodoc:dose">
+    <xsl:if test="indivodoc:textValue">
+      <dose_textvalue><xsl:value-of select='indivodoc:textValue/text()' /></dose_textvalue>
+    </xsl:if>
+    <xsl:if test="indivodoc:value">
+      <dose_value><xsl:value-of select='indivodoc:value/text()' /></dose_value>
+    </xsl:if>
+    <xsl:if test="indivodoc:unit">
+      <dose_unit><xsl:value-of select='indivodoc:unit/text()' /></dose_unit>
+      <dose_unit_type><xsl:value-of select='indivodoc:unit/@type' /></dose_unit_type>
+      <dose_unit_value><xsl:value-of select='indivodoc:unit/@value' /></dose_unit_value>
+      <dose_unit_abbrev><xsl:value-of select='indivodoc:unit/@abbrev' /></dose_unit_abbrev>
+    </xsl:if>
+  </xsl:template>
+
+</xsl:stylesheet>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/stylesheets/result.xml indivo_server/indivo/document_processing/stylesheets/result.xml
--- fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/stylesheets/result.xml	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/document_processing/stylesheets/result.xml	2012-04-20 18:37:05.000000000 -0400
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<facts xmlns:indivodoc="http://indivo.org/vocab/xml/documents#">
+   <fact>
+      <name>Average Blood Pressure</name>
+      <name_type/>
+      <name_value/>
+      <name_abbrev/>
+      <scheduledBy>jking@records.media.mit.edu</scheduledBy>
+      <dateScheduled>2011-02-14T13:00:00-04:00</dateScheduled>
+      <dateStart>2011-02-15T10:00:00-04:00</dateStart>
+      <dateEnd>2011-02-15T14:00:00-04:00</dateEnd>
+      <recurrenceRule_frequency>DAILY</recurrenceRule_frequency>
+      <recurrenceRule_frequency_type/>
+      <recurrenceRule_frequency_value/>
+      <recurrenceRule_frequency_abbrev/>
+      <recurrenceRule_count>30</recurrenceRule_count>
+      <dose_value>145</dose_value>
+      <dose_unit>millimeters of almond milk</dose_unit>
+      <dose_unit_type>http://codes.indivo.org/units/</dose_unit_type>
+      <dose_unit_value>31</dose_unit_value>
+      <dose_unit_abbrev/>
+      <instructions/>
+   </fact>
+</facts>
\ No newline at end of file
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/stylesheets/videomessage.xsl indivo_server/indivo/document_processing/stylesheets/videomessage.xsl
--- fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/stylesheets/videomessage.xsl	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/document_processing/stylesheets/videomessage.xsl	2012-02-21 07:36:45.000000000 -0500
@@ -0,0 +1,16 @@
+<?xml version='1.0' encoding='ISO-8859-1'?>
+<xsl:stylesheet version = '1.0' xmlns:xsl='http://www.w3.org/1999/XSL/Transform' xmlns:indivodoc="http://indivo.org/vocab/xml/documents#"> 
+  <xsl:output method = "xml" indent = "yes" />  
+  <xsl:template match="indivodoc:VideoMessage">
+    <facts>
+      <fact>
+        <fileId><xsl:value-of select='indivodoc:fileId/text()' /></fileId>
+        <storageType><xsl:value-of select='indivodoc:storageType/text()' /></storageType>
+        <subject><xsl:value-of select='indivodoc:subject/text()' /></subject>
+        <from_str><xsl:value-of select='indivodoc:from/text()' /></from_str>
+        <dateRecorded><xsl:value-of select='indivodoc:dateRecorded/text()' /></dateRecorded>
+        <dateSent><xsl:value-of select='indivodoc:dateSent/text()' /></dateSent>
+      </fact>
+    </facts>
+  </xsl:template>
+</xsl:stylesheet>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/stylesheets/vitalsign.xsl indivo_server/indivo/document_processing/stylesheets/vitalsign.xsl
--- fyoung-indivo_server_1_0-3f85dc7/indivo/document_processing/stylesheets/vitalsign.xsl	2012-02-27 12:31:32.000000000 -0500
+++ indivo_server/indivo/document_processing/stylesheets/vitalsign.xsl	2012-02-21 07:36:45.000000000 -0500
@@ -4,24 +4,51 @@
   <xsl:template match="indivodoc:VitalSign">
     <facts>
       <fact>
-        <date_measured><xsl:value-of select='indivodoc:dateMeasured/text()' /></date_measured>
-        <xsl:if test="indivodoc:name">
-	        <name><xsl:value-of select='indivodoc:name/text()' /></name>
-	        <name_type><xsl:value-of select='indivodoc:name/@type' /></name_type>
-	        <name_value><xsl:value-of select='indivodoc:name/@value' /></name_value>
-	        <name_abbrev><xsl:value-of select='indivodoc:name/@abbrev' /></name_abbrev>
-        </xsl:if>
-        <value><xsl:value-of select='indivodoc:value/text()' /></value>
-        <xsl:if test="indivodoc:unit">
-	        <unit><xsl:value-of select='indivodoc:unit/text()' /></unit>
-	        <unit_type><xsl:value-of select='indivodoc:unit/@type' /></unit_type>
-	        <unit_value><xsl:value-of select='indivodoc:unit/@value' /></unit_value>
-	        <unit_abbrev><xsl:value-of select='indivodoc:unit/@abbrev' /></unit_abbrev>
-        </xsl:if>
-        <site><xsl:value-of select='indivodoc:site/text()' /></site>
-        <position><xsl:value-of select='indivodoc:position/text()' /></position>
-        <comments><xsl:value-of select='indivodoc:comments/text()' /></comments>
+        <name><xsl:value-of select='indivodoc:name/text()' /></name>
+        <name_type><xsl:value-of select='indivodoc:name/@type' /></name_type>
+        <name_value><xsl:value-of select='indivodoc:name/@value' /></name_value>
+        <name_abbrev><xsl:value-of select='indivodoc:name/@abbrev' /></name_abbrev>
+        <measuredBy><xsl:value-of select='indivodoc:measuredBy/text()' /></measuredBy>
+        <dateMeasuredStart><xsl:value-of select='indivodoc:dateMeasuredStart/text()' /></dateMeasuredStart>
+        <xsl:if test="indivodoc:dateMeasuredEnd">        
+          <dateMeasuredEnd><xsl:value-of select='indivodoc:dateMeasuredEnd/text()' /></dateMeasuredEnd>
+        </xsl:if>
+        <xsl:if test="indivodoc:result">        
+          <xsl:apply-templates select='indivodoc:result' /> 
+        </xsl:if>
+        <xsl:if test="indivodoc:site">        
+          <site><xsl:value-of select='indivodoc:site/text()' /></site>
+        </xsl:if>
+        <xsl:if test="indivodoc:position">        
+          <position><xsl:value-of select='indivodoc:position/text()' /></position>
+        </xsl:if>
+        <xsl:if test="indivodoc:technique">        
+          <technique><xsl:value-of select='indivodoc:technique/text()' /></technique>
+        </xsl:if>
+        <xsl:if test="indivodoc:comments">        
+          <comments><xsl:value-of select='indivodoc:comments/text()' /></comments>
+        </xsl:if>
       </fact>
     </facts>
   </xsl:template>
+
+
+  <xsl:template match="indivodoc:result">
+    <xsl:if test="indivodoc:textValue">
+      <result_textvalue><xsl:value-of select='indivodoc:textValue/text()' /></result_textvalue>
+    </xsl:if>
+    <xsl:if test="indivodoc:value">
+      <result_value><xsl:value-of select='indivodoc:value/text()' /></result_value>
+    </xsl:if>
+    <xsl:if test="indivodoc:unit">
+      <result_unit>
+        <xsl:value-of select='indivodoc:unit/text()' />
+      </result_unit>
+      <result_unit_type><xsl:value-of select='indivodoc:unit/@type' /></result_unit_type>
+      <result_unit_value><xsl:value-of select='indivodoc:unit/@value' /></result_unit_value>
+      <result_unit_abbrev><xsl:value-of select='indivodoc:unit/@abbrev' /></result_unit_abbrev>
+    </xsl:if>
+  </xsl:template>
+
+
 </xsl:stylesheet>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/migrations/0001_initial.py indivo_server/indivo/migrations/0001_initial.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/migrations/0001_initial.py	2012-02-27 12:31:32.000000000 -0500
+++ indivo_server/indivo/migrations/0001_initial.py	2012-04-26 15:22:46.000000000 -0400
@@ -204,7 +204,9 @@
             ('body', self.gf('django.db.models.fields.TextField')()),
             ('received_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
             ('read_at', self.gf('django.db.models.fields.DateTimeField')(null=True)),
+            ('sent_read_at', self.gf('django.db.models.fields.DateTimeField')(null=True)),
             ('archived_at', self.gf('django.db.models.fields.DateTimeField')(null=True)),
+            ('sent_archived_at', self.gf('django.db.models.fields.DateTimeField')(null=True)),
             ('response_to', self.gf('django.db.models.fields.related.ForeignKey')(related_name='message_responses', null=True, to=orm['indivo.Message'])),
             ('num_attachments', self.gf('django.db.models.fields.IntegerField')(default=0)),
         ))
@@ -615,22 +617,649 @@
         # Adding model 'Vitals'
         db.create_table('indivo_vitals', (
             ('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
-            ('date_measured', self.gf('django.db.models.fields.DateTimeField')(null=True)),
             ('name', self.gf('django.db.models.fields.CharField')(max_length=100)),
             ('name_type', self.gf('django.db.models.fields.CharField')(max_length=80, null=True)),
             ('name_value', self.gf('django.db.models.fields.CharField')(max_length=40, null=True)),
             ('name_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
-            ('value', self.gf('django.db.models.fields.FloatField')()),
-            ('unit', self.gf('django.db.models.fields.CharField')(max_length=100)),
-            ('unit_type', self.gf('django.db.models.fields.CharField')(max_length=80, null=True)),
-            ('unit_value', self.gf('django.db.models.fields.CharField')(max_length=40, null=True)),
-            ('unit_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('measured_by', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('date_measured_start', self.gf('django.db.models.fields.DateTimeField')(null=True)),
+            ('date_measured_end', self.gf('django.db.models.fields.DateTimeField')(null=True)),
+            ('result_unit', self.gf('django.db.models.fields.CharField')(max_length=100, null=True)),
+            ('result_textvalue', self.gf('django.db.models.fields.CharField')(max_length=5000, null=True)),
+            ('result_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('result_unit_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('result_unit_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('result_unit_abbrev', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
             ('site', self.gf('django.db.models.fields.CharField')(max_length=40, null=True)),
             ('position', self.gf('django.db.models.fields.CharField')(max_length=40, null=True)),
+            ('technique', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
             ('comments', self.gf('django.db.models.fields.TextField')(null=True)),
         ))
         db.send_create_signal('indivo', ['Vitals'])
 
+        # Adding model 'AdherenceItem'
+        db.create_table('indivo_adherenceitem', (
+            ('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
+            ('name', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('name_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('reported_by', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('date_reported', self.gf('django.db.models.fields.DateTimeField')(null=True)),
+            ('recurrence_index', self.gf('django.db.models.fields.IntegerField')(null=True)),
+            ('adherence', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('nonadherence_reason', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+        ))
+        db.send_create_signal('indivo', ['AdherenceItem'])
+
+        # Adding model 'EquipmentScheduleItem'
+        db.create_table('indivo_equipmentscheduleitem', (
+            ('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
+            ('name', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('name_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('scheduled_by', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('date_scheduled', self.gf('django.db.models.fields.DateTimeField')(null=True)),
+            ('date_start', self.gf('django.db.models.fields.DateTimeField')(null=True)),
+            ('date_end', self.gf('django.db.models.fields.DateTimeField')(null=True)),
+            ('recurrencerule_frequency', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('recurrencerule_frequency_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('recurrencerule_frequency_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('recurrencerule_frequency_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('recurrencerule_interval', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('recurrencerule_interval_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('recurrencerule_interval_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('recurrencerule_interval_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('recurrencerule_dateuntil', self.gf('django.db.models.fields.DateTimeField')(null=True)),
+            ('recurrencerule_count', self.gf('django.db.models.fields.IntegerField')(null=True)),
+            ('instructions', self.gf('django.db.models.fields.TextField')()),
+        ))
+        db.send_create_signal('indivo', ['EquipmentScheduleItem'])
+
+        # Adding model 'MedicationAdministration'
+        db.create_table('indivo_medicationadministration', (
+            ('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
+            ('name', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('name_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('reported_by', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('date_reported', self.gf('django.db.models.fields.DateTimeField')(null=True)),
+            ('date_administered', self.gf('django.db.models.fields.DateTimeField')(null=True)),
+            ('amountadministered_unit', self.gf('django.db.models.fields.CharField')(max_length=100, null=True)),
+            ('amountadministered_textvalue', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('amountadministered_value', self.gf('django.db.models.fields.CharField')(max_length=40, null=True)),
+            ('amountadministered_unit_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('amountadministered_unit_value', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('amountadministered_unit_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('amountremaining_unit', self.gf('django.db.models.fields.CharField')(max_length=100, null=True)),
+            ('amountremaining_textvalue', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('amountremaining_value', self.gf('django.db.models.fields.CharField')(max_length=40, null=True)),
+            ('amountremaining_unit_type', self.gf('django.db.models.fields.CharField')(max_length=100, null=True)),
+            ('amountremaining_unit_value', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('amountremaining_unit_abbrev', self.gf('django.db.models.fields.CharField')(max_length=40, null=True)),
+        ))
+        db.send_create_signal('indivo', ['MedicationAdministration'])
+
+        # Adding model 'MedicationFill'
+        db.create_table('indivo_medicationfill', (
+            ('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
+            ('name', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('name_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('filled_by', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('date_filled', self.gf('django.db.models.fields.DateTimeField')(null=True)),
+            ('amountfilled_unit', self.gf('django.db.models.fields.CharField')(max_length=100, null=True)),
+            ('amountfilled_textvalue', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('amountfilled_value', self.gf('django.db.models.fields.CharField')(max_length=40, null=True)),
+            ('amountfilled_unit_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('amountfilled_unit_value', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('amountfilled_unit_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('ndc', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('ndc_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('ndc_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('ndc_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('fill_sequence_number', self.gf('django.db.models.fields.IntegerField')(null=True)),
+            ('lot_number', self.gf('django.db.models.fields.IntegerField')(null=True)),
+            ('refills_remaining', self.gf('django.db.models.fields.IntegerField')(null=True)),
+            ('instructions', self.gf('django.db.models.fields.TextField')(null=True)),
+        ))
+        db.send_create_signal('indivo', ['MedicationFill'])
+
+        # Adding model 'MedicationOrder'
+        db.create_table('indivo_medicationorder', (
+            ('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
+            ('name', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('name_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('order_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('ordered_by', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('date_ordered', self.gf('django.db.models.fields.DateTimeField')(null=True)),
+            ('date_expires', self.gf('django.db.models.fields.DateTimeField')(null=True)),
+            ('indication', self.gf('django.db.models.fields.TextField')()),
+            ('amountordered_unit', self.gf('django.db.models.fields.CharField')(max_length=100, null=True)),
+            ('amountordered_textvalue', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('amountordered_value', self.gf('django.db.models.fields.CharField')(max_length=40, null=True)),
+            ('amountordered_unit_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('amountordered_unit_value', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('amountordered_unit_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('refills', self.gf('django.db.models.fields.IntegerField')(null=True)),
+            ('substitution_permitted', self.gf('django.db.models.fields.BooleanField')(default=False)),
+            ('instructions', self.gf('django.db.models.fields.TextField')()),
+        ))
+        db.send_create_signal('indivo', ['MedicationOrder'])
+
+        # Adding model 'MedicationScheduleItem'
+        db.create_table('indivo_medicationscheduleitem', (
+            ('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
+            ('name', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('name_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('scheduled_by', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('date_scheduled', self.gf('django.db.models.fields.DateTimeField')()),
+            ('date_start', self.gf('django.db.models.fields.DateTimeField')()),
+            ('date_end', self.gf('django.db.models.fields.DateTimeField')(null=True)),
+            ('recurrencerule_frequency', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('recurrencerule_frequency_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('recurrencerule_frequency_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('recurrencerule_frequency_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('recurrencerule_interval', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('recurrencerule_interval_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('recurrencerule_interval_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('recurrencerule_interval_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('recurrencerule_dateuntil', self.gf('django.db.models.fields.DateTimeField')(null=True)),
+            ('recurrencerule_count', self.gf('django.db.models.fields.IntegerField')(null=True)),
+            ('dose_textvalue', self.gf('django.db.models.fields.CharField')(max_length=100, null=True)),
+            ('dose_value', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('dose_unit', self.gf('django.db.models.fields.CharField')(max_length=40, null=True)),
+            ('dose_unit_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('dose_unit_value', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('dose_unit_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('instructions', self.gf('django.db.models.fields.TextField')()),
+        ))
+        db.send_create_signal('indivo', ['MedicationScheduleItem'])
+
+        # Adding model 'VideoMessage'
+        db.create_table('indivo_videomessage', (
+            ('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
+            ('file_id', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('storage_type', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('subject', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('from_str', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('date_recorded', self.gf('django.db.models.fields.DateTimeField')(null=True)),
+            ('date_sent', self.gf('django.db.models.fields.DateTimeField')(null=True)),
+        ))
+        db.send_create_signal('indivo', ['VideoMessage'])
+
+        # Adding model 'Device'
+        db.create_table('indivo_device', (
+            ('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
+            ('name', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('name_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('identity', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('identity_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('identity_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('identity_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('type_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('type_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('type_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('indication', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('vendor', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('vendor_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('vendor_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('vendor_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('description', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('specification', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('certification', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+        ))
+        db.send_create_signal('indivo', ['Device'])
+
+        # Adding model 'HealthActionOccurrence'
+        db.create_table('indivo_healthactionoccurrence', (
+            ('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
+            ('name', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('name_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('recurrenceIndex', self.gf('django.db.models.fields.IntegerField')(null=True)),
+        ))
+        db.send_create_signal('indivo', ['HealthActionOccurrence'])
+
+        # Adding model 'HealthActionSchedule'
+        db.create_table('indivo_healthactionschedule', (
+            ('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
+            ('name', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('name_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('scheduledBy', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('dateScheduled', self.gf('django.db.models.fields.DateTimeField')()),
+            ('dateStart', self.gf('django.db.models.fields.DateTimeField')()),
+            ('dateEnd', self.gf('django.db.models.fields.DateTimeField')(null=True)),
+            ('recurrenceRule_frequency', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('recurrenceRule_frequency_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('recurrenceRule_frequency_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('recurrenceRule_frequency_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('recurrenceRule_interval', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('recurrenceRule_interval_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('recurrenceRule_interval_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('recurrenceRule_interval_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('recurrenceRule_count', self.gf('django.db.models.fields.IntegerField')(null=True)),
+            ('dose_unit', self.gf('django.db.models.fields.CharField')(max_length=100, null=True)),
+            ('dose_textvalue', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('dose_value', self.gf('django.db.models.fields.CharField')(max_length=40, null=True)),
+            ('dose_unit_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('dose_unit_value', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('dose_unit_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('instructions', self.gf('django.db.models.fields.TextField')(null=True)),
+        ))
+        db.send_create_signal('indivo', ['HealthActionSchedule'])
+
+        # Adding model 'healthmeasurement'
+        db.create_table('indivo_healthmeasurement', (
+            ('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
+            ('name', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('name_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('measuredBy', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('dateMeasuredStart', self.gf('django.db.models.fields.DateTimeField')()),
+            ('dateMeasuredEnd', self.gf('django.db.models.fields.DateTimeField')(null=True)),
+            ('result_textvalue', self.gf('django.db.models.fields.CharField')(max_length=100, null=True)),
+            ('result_value', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('result_unit', self.gf('django.db.models.fields.CharField')(max_length=40, null=True)),
+            ('result_unit_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('result_unit_value', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('result_unit_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('site', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('position', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('technique', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('comments', self.gf('django.db.models.fields.CharField')(max_length=1000, null=True)),
+        ))
+        db.send_create_signal('indivo', ['HealthMeasurement'])
+
+        # Adding model 'MedicationSchedule'
+        db.create_table('indivo_medicationschedule', (
+            ('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
+            ('name', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('name_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('scheduledBy', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('dateScheduled', self.gf('django.db.models.fields.DateTimeField')()),
+            ('dateStart', self.gf('django.db.models.fields.DateTimeField')()),
+            ('dateEnd', self.gf('django.db.models.fields.DateTimeField')(null=True)),
+            ('recurrenceRule_frequency', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('recurrenceRule_frequency_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('recurrenceRule_frequency_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('recurrenceRule_frequency_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('recurrenceRule_interval', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('recurrenceRule_interval_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('recurrenceRule_interval_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('recurrenceRule_interval_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('recurrenceRule_count', self.gf('django.db.models.fields.IntegerField')(null=True)),
+            ('dose_unit', self.gf('django.db.models.fields.CharField')(max_length=100, null=True)),
+            ('dose_textvalue', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('dose_value', self.gf('django.db.models.fields.CharField')(max_length=40, null=True)),
+            ('dose_unit_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('dose_unit_value', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('dose_unit_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('instructions', self.gf('django.db.models.fields.TextField')(null=True)),
+        ))
+        db.send_create_signal('indivo', ['MedicationSchedule'])
+
+        ###########################################
+        # Adding models used for 'HealthActionPlan'
+        ###########################################
+
+        # Adding model 'StopConditions'
+        db.create_table('indivo_stopconditions', (
+            #('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
+            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
+            ('created_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
+            ('modified_at', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
+            ('action_id', self.gf('django.db.models.fields.IntegerField')()),
+            ('name', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('name_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('value_unit', self.gf('django.db.models.fields.CharField')(max_length=100, null=True)),
+            ('value_textvalue', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('value_value', self.gf('django.db.models.fields.CharField')(max_length=40, null=True)),
+            ('value_unit_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('value_unit_value', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('value_unit_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('operator', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('operator_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('operator_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('operator_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('detail', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('detail_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('detail_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('detail_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+        ))
+        db.send_create_signal('indivo', ['StopConditions'])
+        
+        # Adding model 'Targets'
+        db.create_table('indivo_targets', (
+            #('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
+            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
+            ('created_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
+            ('modified_at', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
+            ('action_id', self.gf('django.db.models.fields.IntegerField')()),
+            ('name', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('name_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('minimumValue_unit', self.gf('django.db.models.fields.CharField')(max_length=100, null=True)),
+            ('minimumValue_textvalue', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('minimumValue_value', self.gf('django.db.models.fields.CharField')(max_length=40, null=True)),
+            ('minimumValue_unit_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('minimumValue_unit_value', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('minimumValue_unit_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('maximumValue_unit', self.gf('django.db.models.fields.CharField')(max_length=100, null=True)),
+            ('maximumValue_textvalue', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('maximumValue_value', self.gf('django.db.models.fields.CharField')(max_length=40, null=True)),
+            ('maximumValue_unit_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('maximumValue_unit_value', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('maximumValue_unit_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('securityLevel', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('securityLevel_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('securityLevel_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('securityLevel_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+        ))
+        db.send_create_signal('indivo', ['Targets'])
+
+        # Adding model 'MeasurementPlans'
+        db.create_table('indivo_measurementplans', (
+            #('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
+            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
+            ('created_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
+            ('modified_at', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
+            ('action_id', self.gf('django.db.models.fields.IntegerField')()),
+            ('name', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('name_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('type_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('type_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('type_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('aggregationFunction', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('aggregationFunction_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('aggregationFunction_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('aggregationFunction_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+        ))
+        db.send_create_signal('indivo', ['MeasurementPlans'])
+
+        # Adding model 'DevicePlans'
+        db.create_table('indivo_deviceplans', (
+            #('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
+            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
+            ('created_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
+            ('modified_at', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
+            ('action_id', self.gf('django.db.models.fields.IntegerField')()),
+            ('name', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('type_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('type_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('type_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('value_unit', self.gf('django.db.models.fields.CharField')(max_length=100, null=True)),
+            ('value_textvalue', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('value_value', self.gf('django.db.models.fields.CharField')(max_length=40, null=True)),
+            ('value_unit_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('value_unit_value', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('value_unit_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('site', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('site_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('site_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('site_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('instructions', self.gf('django.db.models.fields.TextField')(null=True)),
+        ))
+        db.send_create_signal('indivo', ['DevicePlans'])
+
+        # Adding model 'MedicationPlans'
+        db.create_table('indivo_medicationplans', (
+            #('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
+            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
+            ('created_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
+            ('modified_at', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
+            ('action_id', self.gf('django.db.models.fields.IntegerField')()),
+            ('name', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('name_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('indication', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('dose_unit', self.gf('django.db.models.fields.CharField')(max_length=100, null=True)),
+            ('dose_textvalue', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('dose_value', self.gf('django.db.models.fields.CharField')(max_length=40, null=True)),
+            ('dose_unit_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('dose_unit_value', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('dose_unit_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('route', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('route_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('route_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('route_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+        ))
+        db.send_create_signal('indivo', ['MedicationPlans'])
+
+        # Adding model 'Action'
+        db.create_table('indivo_actions', (
+            #('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
+            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
+            ('created_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
+            ('modified_at', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
+            #('creator', self.gf('django.db.models.fields.related.ForeignKey')(related_name='document_created_by', null=True, to=orm['indivo.Principal'])),
+            ('action_type', self.gf('django.db.models.fields.CharField')(max_length=11)),
+            ('state', self.gf('django.db.models.fields.CharField')(max_length=5)),
+            ('healthactionplan_id', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('position', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('position_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('position_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('position_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('repeatCount', self.gf('django.db.models.fields.IntegerField')(null=True)),
+            ('name', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('type_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('type_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('type_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('additionalDetails', self.gf('django.db.models.fields.CharField')(max_length=1000, null=True)),
+            ('instructions', self.gf('django.db.models.fields.TextField')(null=True)),
+        ))
+        db.send_create_signal('indivo', ['Actions'])
+
+        # Adding model 'HealthActionPlan'
+        db.create_table('indivo_healthactionplan', (
+            ('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
+            #('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
+            ('name', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('name_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('planType', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('plannedBy', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('datePlanned', self.gf('django.db.models.fields.DateTimeField')()),
+            ('dateExpires', self.gf('django.db.models.fields.DateTimeField')(null=True)),
+            ('indication', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('instructions', self.gf('django.db.models.fields.CharField')(max_length=1000, null=True)),
+            ('system', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('system_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('system_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('system_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('actions', self.gf('django.db.models.fields.TextField')()),
+        ))
+        db.send_create_signal('indivo', ['HealthActionPlan'])
+
+        #############################################
+        # Adding models used for 'HealthActionResult'
+        #############################################
+
+        # Adding model 'MedicationAdministrations'
+        db.create_table('indivo_medicationadministrations', (
+            #('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
+            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
+            ('created_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
+            ('modified_at', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
+            #('creator', self.gf('django.db.models.fields.related.ForeignKey')(related_name='document_created_by', null=True, to=orm['indivo.Principal'])),
+            ('action_id', self.gf('django.db.models.fields.IntegerField')()),
+            ('occurrence_id', self.gf('django.db.models.fields.IntegerField')(null=True)),
+            ('name', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('dose', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('dose_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('dose_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('dose_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('route_unit', self.gf('django.db.models.fields.CharField')(max_length=100, null=True)),
+            ('route_textvalue', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('route_value', self.gf('django.db.models.fields.CharField')(max_length=40, null=True)),
+            ('route_unit_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('route_unit_value', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('route_unit_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+        ))
+        db.send_create_signal('indivo', ['MedicationAdministrations'])
+
+        # Adding model 'DeviceResults'
+        db.create_table('indivo_deviceresults', (
+            #('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
+            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
+            ('created_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
+            ('modified_at', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
+            #('creator', self.gf('django.db.models.fields.related.ForeignKey')(related_name='document_created_by', null=True, to=orm['indivo.Principal'])),
+            ('action_id', self.gf('django.db.models.fields.IntegerField')()),
+            ('occurrence_id', self.gf('django.db.models.fields.IntegerField')(null=True)),
+            ('name', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('type_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('type_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('type_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('value_unit', self.gf('django.db.models.fields.CharField')(max_length=100, null=True)),
+            ('value_textvalue', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('value_value', self.gf('django.db.models.fields.CharField')(max_length=40, null=True)),
+            ('value_unit_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('value_unit_value', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('value_unit_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('site', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('site_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('site_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('site_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+        ))
+        db.send_create_signal('indivo', ['DeviceResults'])
+
+        # Adding model 'Measurements'
+        db.create_table('indivo_measurements', (
+            #('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
+            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
+            ('created_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
+            ('modified_at', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
+            #('creator', self.gf('django.db.models.fields.related.ForeignKey')(related_name='document_created_by', null=True, to=orm['indivo.Principal'])),
+            ('action_id', self.gf('django.db.models.fields.IntegerField')()),
+            ('occurrence_id', self.gf('django.db.models.fields.IntegerField')(null=True)),
+            ('name', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('type_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('type_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('type_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('value_unit', self.gf('django.db.models.fields.CharField')(max_length=100, null=True)),
+            ('value_textvalue', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('value_value', self.gf('django.db.models.fields.CharField')(max_length=40, null=True)),
+            ('value_unit_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('value_unit_value', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('value_unit_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('aggregationFunction', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('aggregationFunction_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('aggregationFunction_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('aggregationFunction_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+        ))
+        db.send_create_signal('indivo', ['Measurements'])
+
+        # Adding model 'StopConditionResults'
+        db.create_table('indivo_stopconditionresults', (
+            #('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
+            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
+            ('created_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
+            ('modified_at', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
+            ('action_id', self.gf('django.db.models.fields.IntegerField')()),
+            ('occurrence_id', self.gf('django.db.models.fields.IntegerField')()),
+            ('name', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('value_unit', self.gf('django.db.models.fields.CharField')(max_length=100, null=True)),
+            ('value_textvalue', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('value_value', self.gf('django.db.models.fields.CharField')(max_length=40, null=True)),
+            ('value_unit_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('value_unit_value', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('value_unit_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+        ))
+        db.send_create_signal('indivo', ['StopConditionResults'])
+
+        # Adding model 'Occurrences'
+        db.create_table('indivo_occurrences', (
+            #('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
+            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
+            ('created_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
+            ('modified_at', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
+            #('creator', self.gf('django.db.models.fields.related.ForeignKey')(related_name='document_created_by', null=True, to=orm['indivo.Principal'])),
+            ('action_id', self.gf('django.db.models.fields.IntegerField')()),
+            ('startTime', self.gf('django.db.models.fields.DateTimeField')(null=True)),
+            ('endTime', self.gf('django.db.models.fields.DateTimeField')(null=True)),
+            ('additionalDetails', self.gf('django.db.models.fields.CharField')(max_length=1000, null=True)),
+        ))
+        db.send_create_signal('indivo', ['Occurrences'])
+
+        # Adding model 'ActionResults'
+        db.create_table('indivo_actionresults', (
+            #('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
+            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
+            ('created_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
+            ('modified_at', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
+            #('creator', self.gf('django.db.models.fields.related.ForeignKey')(related_name='document_created_by', null=True, to=orm['indivo.Principal'])),
+            ('action_type', self.gf('django.db.models.fields.CharField')(max_length=17)),
+            ('state', self.gf('django.db.models.fields.CharField')(max_length=5)),
+            ('healthactionresult_id', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('name', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+        ))
+        db.send_create_signal('indivo', ['ActionResults'])
+
+        # Adding model 'HealthActionResult'
+        db.create_table('indivo_healthactionresult', (
+            ('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
+            #('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
+            ('name', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('name_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('name_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
+            ('planType', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('reportedBy', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('dateReported', self.gf('django.db.models.fields.DateTimeField')()),
+            ('actions', self.gf('django.db.models.fields.TextField')()),
+        ))
+        db.send_create_signal('indivo', ['HealthActionPlan'])
+
 
     def backwards(self, orm):
         
@@ -787,6 +1416,80 @@
         # Deleting model 'Vitals'
         db.delete_table('indivo_vitals')
 
+        # Deleting model 'AdherenceItem'
+        db.delete_table('indivo_adherenceitem')
+
+        # Deleting model 'EquipmentScheduleItem'
+        db.delete_table('indivo_equipmentscheduleitem')
+
+        # Deleting model 'MedicationAdministration'
+        db.delete_table('indivo_medicationadministration')
+
+        # Deleting model 'MedicationFill'
+        db.delete_table('indivo_medicationfill')
+
+        # Deleting model 'MedicationOrder'
+        db.delete_table('indivo_medicationorder')
+
+        # Deleting model 'MedicationScheduleItem'
+        db.delete_table('indivo_medicationscheduleitem')
+
+        # Deleting model 'VideoMessage'
+        db.delete_table('indivo_videomessage')
+
+        # Deleting model 'Device'
+        db.delete_table('indivo_device')
+
+        # Deleting model 'HealthActionOccurrence'
+        db.delete_table('indivo_healthactionoccurrence')
+
+        # Deleting model 'HealthActionSchedule'
+        db.delete_table('indivo_healthactionschedule')
+        
+        # Deleting model 'HealthMeasurement'
+        db.delete_table('indivo_healthmeasurement')
+
+        # Deleting model 'MedicationSchedule'
+        db.delete_table('indivo_medicationschedule')
+        
+        ########################################
+        # Deleting models for "HealthActionPlan"
+        ########################################
+
+        # Deleting model 'StopConditions'
+        db.delete_table('indivo_stopconditions')
+        # Deleting model 'Targets'
+        db.delete_table('indivo_targets')
+        # Deleting model 'MeasurementPlans'
+        db.delete_table('indivo_measurementplans')
+        # Deleting model 'DevicePlans'
+        db.delete_table('indivo_deviceplans')
+        # Deleting model 'MedicationPlans'
+        db.delete_table('indivo_medicationplans')
+        # Deleting model 'Action'
+        db.delete_table('indivo_actions')
+        # Deleting model 'HealthActionPlan'
+        db.delete_table('indivo_healthactionplan')
+
+        ########################################
+        # Deleting models for "HealthActionPlan"
+        ########################################
+        
+        # Deleting model 'MedicationAdministrations'
+        db.delete_table('indivo_medicationadministrations')
+        # Deleting model 'DeviceResults'
+        db.delete_table('indivo_deviceresults')
+        # Deleting model 'Measurements'
+        db.delete_table('indivo_measurements')
+        # Deleting model 'StopConditionResults'
+        db.delete_table('indivo_stopconditionresults')
+        # Deleting model 'Occurrences'
+        db.delete_table('indivo_occurrences')
+        # Deleting model 'ActionResults'
+        db.delete_table('indivo_actionresults')
+        # Deleting model 'HealthActionPlan'
+        db.delete_table('indivo_healthactionreult')
+
 
     models = {
         'indivo.accesstoken': {
@@ -1100,6 +1803,8 @@
             'recipient': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_recipient'", 'to': "orm['indivo.Principal']"}),
             'response_to': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_responses'", 'null': 'True', 'to': "orm['indivo.Message']"}),
             'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_sender'", 'to': "orm['indivo.Principal']"}),
+            'sent_archived_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'sent_read_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
             'severity': ('django.db.models.fields.CharField', [], {'default': "'low'", 'max_length': '100'}),
             'subject': ('django.db.models.fields.CharField', [], {'max_length': '100'})
         },
@@ -1284,19 +1989,586 @@
         'indivo.vitals': {
             'Meta': {'object_name': 'Vitals', '_ormbases': ['indivo.Fact']},
             'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
-            'date_measured': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'date_measured_start': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'date_measured_end': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
             'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
+            'measured_by': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
             'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
             'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
             'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
             'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
             'position': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
             'site': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
-            'unit': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
-            'unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
-            'unit_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
-            'unit_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
-            'value': ('django.db.models.fields.FloatField', [], {})
+            'result_unit': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
+            'result_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'result_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'result_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'result_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '5000', 'null': 'True'}),
+            'result_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'technique': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
+        },
+        'indivo.adherenceitem': {
+            'Meta': {'object_name': 'AdherenceItem', '_ormbases': ['indivo.Fact']},
+            'adherence': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'date_reported': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'nonadherence_reason': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'recurrence_index': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
+            'reported_by': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+        },
+        'indivo.equipmentscheduleitem': {
+            'Meta': {'object_name': 'EquipmentScheduleItem', '_ormbases': ['indivo.Fact']},
+            'date_end': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'date_start': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'date_scheduled': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
+            'instructions': ('django.db.models.fields.TextField', [], {}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'recurrencerule_count': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
+            'recurrencerule_dateuntil': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'recurrencerule_frequency': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'recurrencerule_frequency_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'recurrencerule_frequency_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'recurrencerule_frequency_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'recurrencerule_interval': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'recurrencerule_interval_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'recurrencerule_interval_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'recurrencerule_interval_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'scheduled_by': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+        },
+        'indivo.medicationadministration': {
+            'Meta': {'object_name': 'MedicationAdministration', '_ormbases': ['indivo.Fact']},
+            'amountadministered_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'amountadministered_unit': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
+            'amountadministered_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
+            'amountadministered_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'amountadministered_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'amountadministered_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'amountremaining_unit': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
+            'amountremaining_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'amountremaining_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
+            'amountremaining_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
+            'amountremaining_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'amountremaining_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
+            'date_reported': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'date_administered': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'reported_by': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+        },
+        'indivo.medicationfill': {
+            'Meta': {'object_name': 'MedicationFill', '_ormbases': ['indivo.Fact']},
+            'amountfilled_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'amountfilled_unit': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
+            'amountfilled_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'amountfilled_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'amountfilled_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'amountfilled_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
+            'date_filled': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
+            'filled_by': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'fill_sequence_number': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
+            'instructions': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+            'lot_number': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'ndc': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'ndc_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'ndc_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'ndc_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'refills_remaining': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
+        },
+        'indivo.medicationorder': {
+            'Meta': {'object_name': 'MedicationOrder', '_ormbases': ['indivo.Fact']},
+            'amountordered_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'amountordered_unit': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
+            'amountordered_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'amountordered_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'amountordered_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'amountordered_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
+            'date_expires': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'date_ordered': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
+            'indication': ('django.db.models.fields.TextField', [], {}),
+            'instructions': ('django.db.models.fields.TextField', [], {}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'order_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'ordered_by': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'refills': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
+            'substitution_permitted': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+        },
+        'indivo.medicationscheduleitem': {
+            'Meta': {'object_name': 'MedicationScheduleItem', '_ormbases': ['indivo.Fact']},
+            'date_end': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'date_scheduled': ('django.db.models.fields.DateTimeField', [], {}),
+            'date_start': ('django.db.models.fields.DateTimeField', [], {}),
+            'dose_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
+            'dose_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'dose_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
+            'dose_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'dose_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'dose_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
+            'instructions': ('django.db.models.fields.TextField', [], {}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'recurrencerule_count': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
+            'recurrencerule_dateuntil': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'recurrencerule_frequency': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'recurrencerule_frequency_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'recurrencerule_frequency_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'recurrencerule_frequency_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'recurrencerule_interval': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'recurrencerule_interval_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'recurrencerule_interval_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'recurrencerule_interval_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'scheduled_by': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+        },
+        'indivo.videomessage': {
+            'Meta': {'object_name': 'VideoMessage', '_ormbases': ['indivo.Fact']},
+            'date_recorded': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'date_sent': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
+            'file_id': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'from_str': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'storage_type': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'subject': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+        },
+        'indivo.device': {
+            'Meta': {'object_name': 'Device', '_ormbases': ['indivo.Fact']},
+            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'identity': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'identity_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'identity_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'identity_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'type_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'type_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'indication': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'vendor': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'vendor_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'vendor_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'vendor_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'description': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'specification': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'certification': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+        },
+        'indivo.healthactionoccurrence': {
+            'Meta': {'object_name': 'HealthActionOccurrence', '_ormbases': ['indivo.Fact']},
+            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'recurrenceIndex': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
+        },
+        'indivo.healthactionschedule': {
+            'Meta': {'object_name': 'HealthActionSchedule', '_ormbases': ['indivo.Fact']},
+            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'scheduledBy': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'dateScheduled': ('django.db.models.fields.DateTimeField', [], {}),
+            'dateStart': ('django.db.models.fields.DateTimeField', [], {}),
+            'dateEnd': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'recurrenceRule_frequency': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'recurrenceRule_frequency_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'recurrenceRule_frequency_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'recurrenceRule_frequency_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'recurrenceRule_interval': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'recurrenceRule_interval_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'recurrenceRule_interval_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'recurrenceRule_interval_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'recurrenceRule_count': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
+            'dose_unit': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
+            'dose_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'dose_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
+            'dose_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'dose_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'dose_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'instructions': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+        },
+        'indivo.healthmeasurement': {
+            'Meta': {'object_name': 'HealthMeasurement', '_ormbases': ['indivo.Fact']},
+            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'measuredBy': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'dateMeasuredStart': ('django.db.models.fields.DateTimeField', [], {}),
+            'dateMeasuredEnd': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'result_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
+            'result_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'result_unit': ('django.db.models.fields.CharField', [], {'max_length': '400', 'null': 'True'}),
+            'result_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'result_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'result_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'site': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'position': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'technique': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'comments': ('django.db.models.fields.CharField', [], {'max_length': '1000', 'null': 'True'}),
+        },
+        'indivo.medicationschedule': {
+            'Meta': {'object_name': 'MedicationSchedule', '_ormbases': ['indivo.Fact']},
+            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'scheduledBy': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'dateScheduled': ('django.db.models.fields.DateTimeField', [], {}),
+            'dateStart': ('django.db.models.fields.DateTimeField', [], {}),
+            'dateEnd': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'recurrenceRule_frequency': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'recurrenceRule_frequency_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'recurrenceRule_frequency_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'recurrenceRule_frequency_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'recurrenceRule_interval': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'recurrenceRule_interval_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'recurrenceRule_interval_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'recurrenceRule_interval_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'recurrenceRule_count': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
+            'dose_unit': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
+            'dose_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'dose_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
+            'dose_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'dose_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'dose_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'instructions': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+        },
+        'indivo.StopConditions' : {
+            #'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
+            'Meta': {'object_name': 'StopConditions'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
+            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
+            'action_id': ('django.db.models.fields.IntegerField', [], {}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'value_unit': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
+            'value_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'value_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
+            'value_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'value_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'value_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'operator': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'operator_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'operator_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'operator_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'detail': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'detail_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'detail_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'detail_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+        },
+        'indivo.Targets' : {
+            'Meta': {'object_name': 'Targets'},
+            #'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
+            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
+            'action_id': ('django.db.models.fields.IntegerField', [], {}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'minimumValue_unit': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
+            'minimumValue_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'minimumValue_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
+            'minimumValue_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'minimumValue_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'minimumValue_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'maximumValue_unit': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
+            'maximumValue_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'maximumValue_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
+            'maximumValue_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'maximumValue_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'maximumValue_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'securityLevel': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'securityLevel_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'securityLevel_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'securityLevel_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+        },
+        'indivo.MeasurementPlans' : {
+            'Meta': {'object_name': 'MeasurementPlans'},
+            #'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
+            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
+            'action_id': ('django.db.models.fields.IntegerField', [], {}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'type_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'type_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'aggregationFunction': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'aggregationFunction_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'aggregationFunction_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'aggregationFunction_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+        },
+        'indivo.DevicePlans' : {
+            'Meta': {'object_name': 'DevicePlans'},
+            #'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
+            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
+            'action_id': ('django.db.models.fields.IntegerField', [], {}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'type_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'type_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'value_unit': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
+            'value_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'value_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
+            'value_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'value_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'value_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'site': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'site_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'site_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'site_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'instructions': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+        },
+        'indivo.MedicationPlans' : {
+            'Meta': {'object_name': 'MedicationPlans'},
+            #'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
+            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
+            'action_id': ('django.db.models.fields.IntegerField', [], {}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'indication': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'dose_unit': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
+            'dose_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'dose_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
+            'dose_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'dose_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'dose_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'route': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'route_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'route_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'route_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+        },
+        'indivo.Actions' : {
+            'Meta': {'object_name': 'Actions'},
+            #'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
+            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
+            #'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
+            'action_type' : ('django.db.models.fields.CharField', [], {'max_length': '11'}),
+            'state' : ('django.db.models.fields.CharField', [], {'max_length': '5'}),
+            'healthactionplan_id': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'position': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'position_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'position_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'position_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'repeatCount': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'type_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'type_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'additionalDetails': ('django.db.models.fields.CharField', [], {'max_length': '1000', 'null': 'True'}),
+            'instructions': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+        },
+        'indivo.HealthActionPlan' : {
+            'Meta': {'object_name': 'HealthActionPlan', '_ormbases': ['indivo.Fact']},
+            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
+            #'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'planType': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'plannedBy': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'datePlanned': ('django.db.models.fields.DateTimeField', [], {}),
+            'dateExpires': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'indication': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'instructions': ('django.db.models.fields.CharField', [], {'max_length': '1000', 'null': 'True'}),
+            'system': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'system_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'system_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'system_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'actions': ('django.db.models.fields.TextField', [], {}),
+        },
+        'indivo.MedicationAdministrations' : {
+            'Meta': {'object_name': 'MedicationAdministrations'},
+            #'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
+            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
+            #('creator', self.gf('django.db.models.fields.related.ForeignKey')(related_name='document_created_by', null=True, to=orm['indivo.Principal'])),
+            'action_id': ('django.db.models.fields.IntegerField', [], {}),
+            'occurrence_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'dose': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'dose_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'dose_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'dose_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'route_unit': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
+            'route_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'route_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
+            'route_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'route_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'route_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+        },
+        'indivo.DeviceResults' : {
+            'Meta': {'object_name': 'DeviceResults'},
+            #'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
+            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
+            #('creator', self.gf('django.db.models.fields.related.ForeignKey')(related_name='document_created_by', null=True, to=orm['indivo.Principal'])),
+            'action_id': ('django.db.models.fields.IntegerField', [], {}),
+            'occurrence_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'type_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'type_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'value_unit': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
+            'value_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'value_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
+            'value_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'value_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'value_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'site': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'site_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'site_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'site_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+        },
+        'indivo.Measurements' : {
+            'Meta': {'object_name': 'Measurements'},
+            #'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
+            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
+            #('creator', self.gf('django.db.models.fields.related.ForeignKey')(related_name='document_created_by', null=True, to=orm['indivo.Principal'])),
+            'action_id': ('django.db.models.fields.IntegerField', [], {}),
+            'occurrence_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'type_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'type_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'value_unit': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
+            'value_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'value_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
+            'value_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'value_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'value_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'aggregationFunction': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'aggregationFunction_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'aggregationFunction_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'aggregationFunction_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+        },
+        'indivo.StopConditionResults' : {
+            #'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
+            'Meta': {'object_name': 'StopConditionResults'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
+            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
+            'action_id': ('django.db.models.fields.IntegerField', [], {}),
+            'occurrence_id': ('django.db.models.fields.IntegerField', [], {}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'value_unit': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
+            'value_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'value_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
+            'value_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'value_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'value_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+        },
+        'indivo.Occurrences' : {
+            'Meta': {'object_name': 'Occurrences'},
+            #'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
+            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
+            #('creator', self.gf('django.db.models.fields.related.ForeignKey')(related_name='document_created_by', null=True, to=orm['indivo.Principal'])),
+            'action_id': ('django.db.models.fields.IntegerField', [], {}),
+            'startTime': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'endTime': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'additionalDetails': ('django.db.models.fields.CharField', [], {'max_length': '1000', 'null': 'True'}),
+        },
+        'indivo.ActionResults' : {
+            'Meta': {'object_name': 'ActionResults'},
+            #'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
+            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
+            #('creator', self.gf('django.db.models.fields.related.ForeignKey')(related_name='document_created_by', null=True, to=orm['indivo.Principal'])),
+            'action_type' : ('django.db.models.fields.CharField', [], {'max_length': '17'}),
+            'state' : ('django.db.models.fields.CharField', [], {'max_length': '5'}),
+            'healthactionplan_id': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+        },
+        'indivo.HealthActionResult' : {
+            'Meta': {'object_name': 'HealthActionResult', '_ormbases': ['indivo.Fact']},
+            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
+            #('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
+            'planType': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'reportedBy': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'dateReported': ('django.db.models.fields.DateTimeField', [], {}),
+            'actions': ('django.db.models.fields.TextField', [], {}),
         }
     }
 
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/models/fact_objects/actionbase.py indivo_server/indivo/models/fact_objects/actionbase.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/models/fact_objects/actionbase.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/models/fact_objects/actionbase.py	2012-04-18 09:52:28.000000000 -0400
@@ -0,0 +1,232 @@
+"""
+Indivo Models
+"""
+
+from django.db import models
+from django.conf import settings
+
+import hashlib
+import uuid
+
+import string
+import logging
+
+from datetime import datetime, timedelta
+from oauth import oauth
+
+# generate the right meta class
+INDIVO_APP_LABEL = 'indivo'
+
+def BaseMeta(abstract_p=False):
+  class Meta:
+    app_label = INDIVO_APP_LABEL
+    abstract = abstract_p
+  return Meta
+
+class BaseModel(models.Model):
+  """
+  The base for all indivo models
+  """
+  Meta = BaseMeta(True)
+
+  @classmethod
+  def setup(cls):
+    """
+    called automatically after this class has been prepared into the server
+    """
+    pass
+
+class ActionObject(BaseModel):
+
+  id = models.AutoField(primary_key = True)
+  created_at = models.DateTimeField(auto_now_add = True)
+  modified_at = models.DateTimeField(auto_now_add = True, auto_now = True)
+  #creator = models.ForeignKey('Principal', related_name = '%(class)s_created_by', null = True)
+
+  def __unicode__(self):
+    return "Core Object %s" % self.id
+
+  Meta = BaseMeta(True)
+
+  def save(self, **kwargs):
+    #if not self.id:
+    #  self.id = str(uuid.uuid4())
+    super(ActionObject, self).save(**kwargs)
+
+
+class Principal(ActionObject):
+  Meta = BaseMeta()
+
+  # every principal is associated with an email address
+  email = models.CharField(max_length = 255, unique = True)
+
+  # effectively the descendent table
+  type = models.CharField(max_length = 100)
+
+  def save(self, *args, **kwargs):
+    """
+    make sure some fields are set
+    """
+    if not self.type or self.type == '':
+      self.type = self.__class__.__name__
+    super(Principal,self).save(*args, **kwargs)
+
+  def _get_subclasses(self):
+    """ Returns a dict of 'type_name':class key-value pairs for each subclass of Principal."""
+    return dict([(rel.var_name, rel.field.model) 
+                 for rel in self._meta.get_all_related_objects() 
+                 if isinstance(rel.field, models.OneToOneField) 
+                 and issubclass(rel.field.model, self.__class__)])
+
+  def get_subclass(self):
+    """ Return the instance of a subclass of this object of type ``self.type``. 
+    
+    Returns ``self`` if no such instance exists (i.e., we have no subclasses).
+
+    Normally, this is available through ``getattr(self, self.type.lower())``,
+    but sometimes that just gets us another principal object. We'll try the
+    above approach first, since it allows us to use select_related to be
+    more efficient, but if that fails, we'll have to use a call to
+    ``objects.get()``, which will always go to the DB. Because of this behavior,
+    this call should be used sparingly.
+    
+    """
+
+    # If we are already an instance of our lowest subclass, avoid extra computation
+    if self.__class__.__name__ == self.type:
+      return self
+
+    # First try to get at the child through Django's OneToOne attribute
+    # i.e. Principal.account or Principal.pha
+    try:
+      subclass_obj = getattr(self, self.type.lower().strip())
+      if subclass_obj.__class__.__name__ == self.type:
+        return subclass_obj
+    except:
+      
+      # This shouldn't happen, if Django is working properly and self.type is set correctly
+      pass
+
+    # Had trouble with the standard lookup, so select_related won't work.
+    # Just use subclass.objects.get(), which will go straight to the DB
+    try:
+      model_class = self._get_subclasses()[self.type.lower().strip()]
+    except KeyError:
+
+      # we're already an instance of the lowest subclass
+      return self
+
+    try:
+      return model_class.objects.get(id=self.id)
+    except model_class.DoesNotExist:
+
+      # Shouldn't happen: our subclass didn't exist
+      return self
+
+  def descriptor(self):
+
+    """ Get a name for the Principal instance.
+
+    Returns the email id if we don't have a name (i.e. accesstokens)
+
+    """
+
+    subclass_obj = self.get_subclass()    
+    return getattr(subclass_obj, 'full_name', None) or getattr(subclass_obj, 'name', None) or subclass_obj.email
+    
+  # Accesscontrol:
+  # Default Role Implmentations (deny-by-default):
+  def isType(self, type_str):
+    """
+    The principal is of the specified type.
+    """
+    return self.type == type_str # What are the options for self.type? Where does it get set?
+
+  def isSame(self, arg):
+    """
+    The principal is the same object as arg. Semantics: if the
+    effective principal is the same object as arg, also return true.
+    """
+    # Note: the django Model overloaded __eq__ operator makes this equivalent
+    # to comparing the ids of the models.
+    return self == arg or self.effective_principal == arg
+
+  def isProxiedByApp(self, app):
+    """
+    The principal is proxied by an app, i.e., an accesstoken may be proxied by a PHA
+    """
+    return False
+
+  def createdAccount(self, account):
+    """
+    The principal created the account
+    """
+    return False
+
+  def createdRecord(self, record):
+    """
+    The principal created the specified record
+    """
+    return False
+
+  def ownsRecord(self, record):
+    """
+    The principal is the owner of the specified record
+    """
+    return False
+
+  def scopedToRecord(self, record):
+    """
+    The principal is bound to the record at a whole-record level. (i.e., not limited to a carenet)
+    """
+    return False
+
+  def fullySharesRecord(self, record):
+    """
+    The record is fully shared with the principal
+    """
+    return False
+
+  def isInCarenet(self, carenet):
+    """
+    The principal is located within the scope of the carenet
+    """
+    return False
+
+  def basicPrincipalRole(self):
+    """
+    The Principal is a principal. Always returns true, and
+    shouldn't be overwritten by subclasses
+    """
+    return True
+
+
+  @property
+  def effective_principal(self):
+    """
+    In some cases, a principal's effective principal is not quite itself,
+    e.g. a token's identity is really the PHA it comes from.
+    """
+    return self
+
+  @property
+  def proxied_by(self):
+    """
+    Principals are sometimes proxied by other principals, e.g. a PHA
+    By default, principals are not proxied.
+    """
+    return None
+
+  @property
+  def effective_email(self):
+    return self.effective_principal
+
+  def __unicode__(self):
+    return 'Principal %s' % self.email
+
+  def __eq__(self, other):
+    if not other or not isinstance(other, Principal):
+      return False
+
+    return self.id == other.id
+
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/models/fact_objects/adherenceitem.py indivo_server/indivo/models/fact_objects/adherenceitem.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/models/fact_objects/adherenceitem.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/models/fact_objects/adherenceitem.py	2012-02-21 07:36:45.000000000 -0500
@@ -0,0 +1,21 @@
+"""
+Indivo Model for AdherenceItem
+"""
+
+from fact import Fact
+from django.db import models
+from django.conf import settings
+
+class AdherenceItem(Fact):
+  name=models.CharField(max_length=200)
+  name_type=models.CharField(max_length=200, null=True)
+  name_value=models.CharField(max_length=200, null=True)
+  name_abbrev=models.CharField(max_length=20, null=True)
+  reported_by=models.CharField(max_length=200)
+  date_reported=models.DateTimeField(null=True)
+  recurrence_index=models.IntegerField(null=True)
+  adherence=models.CharField(max_length=200)
+  nonadherence_reason=models.CharField(max_length=200, null=True)
+
+  def __unicode__(self):
+    return 'AdherenceItem %s' % self.id
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/models/fact_objects/device.py indivo_server/indivo/models/fact_objects/device.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/models/fact_objects/device.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/models/fact_objects/device.py	2012-04-19 14:14:18.000000000 -0400
@@ -0,0 +1,33 @@
+"""
+Indivo Model for Device
+"""
+
+from fact import Fact
+from django.db import models
+from django.conf import settings
+
+class Device(Fact):
+    name = models.CharField(max_length=200)
+    name_type = models.CharField(max_length=200, null=True)
+    name_value = models.CharField(max_length=200, null=True)
+    name_abbrev = models.CharField(max_length=20, null=True)
+    identity = models.CharField(max_length=200, null=True)
+    identity_type = models.CharField(max_length=200, null=True)
+    identity_value = models.CharField(max_length=200, null=True)
+    identity_abbrev = models.CharField(max_length=20, null=True)
+    type = models.CharField(max_length=200, null=True)
+    type_type = models.CharField(max_length=200, null=True)
+    type_value = models.CharField(max_length=200, null=True)
+    type_abbrev = models.CharField(max_length=20, null=True)
+    indication = models.CharField(max_length=200, null=True)
+    vendor = models.CharField(max_length=200, null=True)
+    vendor_type = models.CharField(max_length=200, null=True)
+    vendor_value = models.CharField(max_length=200, null=True)
+    vendor_abbrev = models.CharField(max_length=20, null=True)
+    description = models.CharField(max_length=200, null=True)
+    specification = models.CharField(max_length=200, null=True)
+    certification = models.CharField(max_length=200, null=True)
+
+    def __unicode__(self):
+        return 'Device %s' % self.id
+
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/models/fact_objects/equipmentscheduleitem.py indivo_server/indivo/models/fact_objects/equipmentscheduleitem.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/models/fact_objects/equipmentscheduleitem.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/models/fact_objects/equipmentscheduleitem.py	2012-02-21 07:36:45.000000000 -0500
@@ -0,0 +1,32 @@
+"""
+Indivo Model for Equipment Schedule Item
+"""
+
+from fact import Fact
+from django.db import models
+from django.conf import settings
+
+class EquipmentScheduleItem(Fact):
+  name = models.CharField(max_length=200)
+  name_type = models.CharField(max_length=200, null=True)
+  name_value = models.CharField(max_length=200, null=True)
+  name_abbrev = models.CharField(max_length=20, null=True)
+  scheduled_by = models.CharField(max_length=200)
+  date_scheduled = models.DateTimeField(null=True)
+  date_start = models.DateTimeField(null=True)
+  date_end = models.DateTimeField(null=True)
+  recurrencerule_frequency = models.CharField(max_length=200)
+  recurrencerule_frequency_type = models.CharField(max_length=200, null=True)
+  recurrencerule_frequency_value = models.CharField(max_length=200, null=True)
+  recurrencerule_frequency_abbrev = models.CharField(max_length=20, null=True)
+  recurrencerule_interval = models.CharField(null=True, max_length=200)
+  recurrencerule_interval_type = models.CharField(max_length=200, null=True)
+  recurrencerule_interval_value = models.CharField(max_length=200, null=True)
+  recurrencerule_interval_abbrev = models.CharField(max_length=20, null=True)
+  recurrencerule_dateuntil=models.DateTimeField(null=True)
+  recurrencerule_count=models.IntegerField(null=True)
+  instructions = models.TextField(null=True)
+
+
+  def __unicode__(self):
+    return 'EquipmentScheduleItem %s' % self.id
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/models/fact_objects/healthactionoccurrence.py indivo_server/indivo/models/fact_objects/healthactionoccurrence.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/models/fact_objects/healthactionoccurrence.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/models/fact_objects/healthactionoccurrence.py	2012-04-19 10:57:12.000000000 -0400
@@ -0,0 +1,18 @@
+"""
+Indivo Model for HealthActionOccurrence
+"""
+
+from fact import Fact
+from django.db import models
+from django.conf import settings
+
+class HealthActionOccurrence(Fact):
+    name = models.CharField(max_length=200)
+    name_type = models.CharField(max_length=200, null=True)
+    name_value = models.CharField(max_length=200, null=True)
+    name_abbrev = models.CharField(max_length=20, null=True)
+    recurrenceIndex = models.IntegerField(null=True)
+
+    def __unicode__(self):
+        return 'HealthActionOccurrence %s' % self.id
+
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/models/fact_objects/healthactionplan.py indivo_server/indivo/models/fact_objects/healthactionplan.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/models/fact_objects/healthactionplan.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/models/fact_objects/healthactionplan.py	2012-04-19 11:34:56.000000000 -0400
@@ -0,0 +1,173 @@
+"""
+Indivo Model for HealthActionPlan
+"""
+
+from fact import Fact
+from actionbase import ActionObject
+from django.db import models
+from django.conf import settings
+
+class StopConditions(ActionObject):
+    action_id = models.IntegerField()
+    name = models.CharField(max_length=200)
+    name_type = models.CharField(max_length=200, null=True)
+    name_value = models.CharField(max_length=200, null=True)
+    name_abbrev = models.CharField(max_length=20, null=True)
+    value_textvalue = models.CharField(null=True, max_length=100)
+    value_value = models.CharField(null=True, max_length=20)
+    value_unit = models.CharField(null=True, max_length=40)
+    value_unit_type = models.CharField(null=True, max_length=200)
+    value_unit_value = models.CharField(null=True, max_length=20)
+    value_unit_abbrev = models.CharField(null=True, max_length=20)
+    operator = models.CharField(max_length=200, null=True)
+    operator_type = models.CharField(max_length=200, null=True)
+    operator_value = models.CharField(max_length=200, null=True)
+    operator_abbrev = models.CharField(max_length=20, null=True)
+    detail = models.CharField(max_length=200, null=True)
+    detail_type = models.CharField(max_length=200, null=True)
+    detail_value = models.CharField(max_length=200, null=True)
+    detail_abbrev = models.CharField(max_length=20, null=True)
+
+    def __unicode__(self):
+        return "StopConditions: %s" % (self.id, )
+
+
+class Targets(ActionObject):
+    action_id = models.IntegerField()
+    name = models.CharField(max_length=200)
+    name_type = models.CharField(max_length=200, null=True)
+    name_value = models.CharField(max_length=200, null=True)
+    name_abbrev = models.CharField(max_length=20, null=True)
+    minimumValue_textvalue = models.CharField(null=True, max_length=100)
+    minimumValue_value = models.CharField(null=True, max_length=20)
+    minimumValue_unit = models.CharField(null=True, max_length=40)
+    minimumValue_unit_type = models.CharField(null=True, max_length=200)
+    minimumValue_unit_value = models.CharField(null=True, max_length=20)
+    minimumValue_unit_abbrev = models.CharField(null=True, max_length=20)
+    maximumValue_textvalue = models.CharField(null=True, max_length=100)
+    maximumValue_value = models.CharField(null=True, max_length=20)
+    maximumValue_unit = models.CharField(null=True, max_length=40)
+    maximumValue_unit_type = models.CharField(null=True, max_length=200)
+    maximumValue_unit_value = models.CharField(null=True, max_length=20)
+    maximumValue_unit_abbrev = models.CharField(null=True, max_length=20)
+    securityLevel = models.CharField(max_length=200, null=True)
+    securityLevel_type = models.CharField(max_length=200, null=True)
+    securityLevel_value = models.CharField(max_length=200, null=True)
+    securityLevel_abbrev = models.CharField(max_length=20, null=True)
+
+    def __unicode__(self):
+        return "Targets: %s" % (self.id, )
+
+
+class MeasurementPlans(ActionObject):
+    action_id = models.IntegerField()
+    name = models.CharField(max_length=200)
+    name_type = models.CharField(max_length=200, null=True)
+    name_value = models.CharField(max_length=200, null=True)
+    name_abbrev = models.CharField(max_length=20, null=True)
+    type = models.CharField(max_length=200, null=True)
+    type_type = models.CharField(max_length=200, null=True)
+    type_value = models.CharField(max_length=200, null=True)
+    type_abbrev = models.CharField(max_length=20, null=True)
+    aggregationFunction = models.CharField(max_length=200, null=True)
+    aggregationFunction_type = models.CharField(max_length=200, null=True)
+    aggregationFunction_value = models.CharField(max_length=200, null=True)
+    aggregationFunction_abbrev = models.CharField(max_length=20, null=True)
+
+    def __unicode__(self):
+        return "MeasurementPlans: %s" % (self.id, )
+
+
+class DevicePlans(ActionObject):
+    action_id = models.IntegerField()
+    name = models.CharField(max_length=200, null=True)
+    name_type = models.CharField(max_length=200, null=True)
+    name_value = models.CharField(max_length=200, null=True)
+    name_abbrev = models.CharField(max_length=20, null=True)
+    type = models.CharField(max_length=200, null=True)
+    type_type = models.CharField(max_length=200, null=True)
+    type_value = models.CharField(max_length=200, null=True)
+    type_abbrev = models.CharField(max_length=20, null=True)
+    value_textvalue = models.CharField(null=True, max_length=100)
+    value_value = models.CharField(null=True, max_length=20)
+    value_unit = models.CharField(null=True, max_length=40)
+    value_unit_type = models.CharField(null=True, max_length=200)
+    value_unit_value = models.CharField(null=True, max_length=20)
+    value_unit_abbrev = models.CharField(null=True, max_length=20)
+    site = models.CharField(max_length=200, null=True)
+    site_type = models.CharField(max_length=200, null=True)
+    site_value = models.CharField(max_length=200, null=True)
+    site_abbrev = models.CharField(max_length=20, null=True)
+    instructions = models.TextField(null=True)
+
+    def __unicode__(self):
+        return "DevicePlans: %s" % (self.id, )
+
+
+class MedicationPlans(ActionObject):
+    action_id = models.IntegerField()
+    name = models.CharField(max_length=200)
+    name_type = models.CharField(max_length=200, null=True)
+    name_value = models.CharField(max_length=200, null=True)
+    name_abbrev = models.CharField(max_length=20, null=True)
+    indication = models.CharField(max_length=200)
+    dose_textvalue = models.CharField(null=True, max_length=100)
+    dose_value = models.CharField(null=True, max_length=20)
+    dose_unit = models.CharField(null=True, max_length=40)
+    dose_unit_type = models.CharField(null=True, max_length=200)
+    dose_unit_value = models.CharField(null=True, max_length=20)
+    dose_unit_abbrev = models.CharField(null=True, max_length=20)
+    route = models.CharField(max_length=200, null=True)
+    route_type = models.CharField(max_length=200, null=True)
+    route_value = models.CharField(max_length=200, null=True)
+    route_abbrev = models.CharField(max_length=20, null=True)
+
+    def __unicode__(self):
+        return "MedicationPlans: %s" % (self.id, )
+
+
+class Actions(ActionObject):
+    action_type = models.CharField(max_length=11)
+    state = models.CharField(max_length=5)
+    healthactionplan_id = models.CharField(max_length=200)
+    position = models.CharField(max_length=200, null=True)
+    position_type = models.CharField(max_length=200, null=True)
+    position_value = models.CharField(max_length=200, null=True)
+    position_abbrev = models.CharField(max_length=20, null=True)
+    # repeatCount should only appear if action_type is "ActionGroup"
+    repeatCount = models.IntegerField(null=True)
+    # The remaining fields should only appear if action_type is "ActionStep"
+    name = models.CharField(max_length=200)
+    name_type = models.CharField(max_length=200, null=True)
+    name_value = models.CharField(max_length=200, null=True)
+    name_abbrev = models.CharField(max_length=20, null=True)
+    type = models.CharField(max_length=200, null=True)
+    type_type = models.CharField(max_length=200, null=True)
+    type_value = models.CharField(max_length=200, null=True)
+    type_abbrev = models.CharField(max_length=20, null=True)
+    additionalDetails = models.CharField(max_length=1000, null=True)
+    instructions = models.TextField(null=True)
+
+    def __unicode__(self):
+        return "Actions: %s" % (self.id, )
+
+
+class HealthActionPlan(Fact):
+    name = models.CharField(max_length=200)
+    name_type = models.CharField(max_length=200, null=True)
+    name_value = models.CharField(max_length=200, null=True)
+    name_abbrev = models.CharField(max_length=20, null=True)
+    planType = models.CharField(max_length=200)
+    plannedBy = models.CharField(max_length=200)
+    datePlanned = models.DateTimeField()
+    dateExpires = models.DateTimeField(null=True)
+    indication = models.CharField(max_length=200)
+    instructions = models.CharField(max_length=1000, null=True)
+    system = models.CharField(max_length=200, null=True)
+    system_type = models.CharField(max_length=200, null=True)
+    system_value = models.CharField(max_length=200, null=True)
+    system_abbrev = models.CharField(max_length=20, null=True)
+    actions = models.TextField()
+
+    def __unicode__(self):
+        return 'HealthActionPlan: %s' % (self.id, )
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/models/fact_objects/healthactionresult.py indivo_server/indivo/models/fact_objects/healthactionresult.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/models/fact_objects/healthactionresult.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/models/fact_objects/healthactionresult.py	2012-04-18 09:52:28.000000000 -0400
@@ -0,0 +1,136 @@
+"""
+Indivo Model for HealthActionPlan
+"""
+
+from fact import Fact
+from actionbase import ActionObject
+from django.db import models
+from django.conf import settings
+
+class MedicationAdministrations(ActionObject):
+    action_id = models.IntegerField()
+    occurrence_id = models.IntegerField(null=True)
+    name = models.CharField(max_length=200)
+    name_type = models.CharField(max_length=200, null=True)
+    name_value = models.CharField(max_length=200, null=True)
+    name_abbrev = models.CharField(max_length=20, null=True)
+    dose = models.CharField(max_length=200)
+    dose_type = models.CharField(max_length=200, null=True)
+    dose_value = models.CharField(max_length=200, null=True)
+    dose_abbrev = models.CharField(max_length=20, null=True)
+    route_textvalue = models.CharField(null=True, max_length=100)
+    route_value = models.CharField(null=True, max_length=20)
+    route_unit = models.CharField(null=True, max_length=40)
+    route_unit_type = models.CharField(null=True, max_length=200)
+    route_unit_value = models.CharField(null=True, max_length=20)
+    route_unit_abbrev = models.CharField(null=True, max_length=20)
+
+    def __unicode__(self):
+        return "MedicationAdministrations: %s" % (self.id, )
+
+
+class DeviceResults(ActionObject):
+    action_id = models.IntegerField()
+    occurrence_id = models.IntegerField(null=True)
+    name = models.CharField(max_length=200, null=True)
+    name_type = models.CharField(max_length=200, null=True)
+    name_value = models.CharField(max_length=200, null=True)
+    name_abbrev = models.CharField(max_length=20, null=True)
+    type = models.CharField(max_length=200, null=True)
+    type_type = models.CharField(max_length=200, null=True)
+    type_value = models.CharField(max_length=200, null=True)
+    type_abbrev = models.CharField(max_length=20, null=True)
+    value_textvalue = models.CharField(null=True, max_length=100)
+    value_value = models.CharField(null=True, max_length=20)
+    value_unit = models.CharField(null=True, max_length=40)
+    value_unit_type = models.CharField(null=True, max_length=200)
+    value_unit_value = models.CharField(null=True, max_length=20)
+    value_unit_abbrev = models.CharField(null=True, max_length=20)
+    site = models.CharField(max_length=200, null=True)
+    site_type = models.CharField(max_length=200, null=True)
+    site_value = models.CharField(max_length=200, null=True)
+    site_abbrev = models.CharField(max_length=20, null=True)
+
+    def __unicode__(self):
+        return "DeviceResults: %s" % (self.id, )
+
+
+class Measurements(ActionObject):
+    action_id = models.IntegerField()
+    occurrence_id = models.IntegerField(null=True)
+    name = models.CharField(max_length=200, null=True)
+    name_type = models.CharField(max_length=200, null=True)
+    name_value = models.CharField(max_length=200, null=True)
+    name_abbrev = models.CharField(max_length=20, null=True)
+    type = models.CharField(max_length=200, null=True)
+    type_type = models.CharField(max_length=200, null=True)
+    type_value = models.CharField(max_length=200, null=True)
+    type_abbrev = models.CharField(max_length=20, null=True)
+    value_textvalue = models.CharField(null=True, max_length=100)
+    value_value = models.CharField(null=True, max_length=20)
+    value_unit = models.CharField(null=True, max_length=40)
+    value_unit_type = models.CharField(null=True, max_length=200)
+    value_unit_value = models.CharField(null=True, max_length=20)
+    value_unit_abbrev = models.CharField(null=True, max_length=20)
+    aggregationFunction = models.CharField(max_length=200, null=True)
+    aggregationFunction_type = models.CharField(max_length=200, null=True)
+    aggregationFunction_value = models.CharField(max_length=200, null=True)
+    aggregationFunction_abbrev = models.CharField(max_length=20, null=True)
+
+    def __unicode__(self):
+        return "Measurements: %s" % (self.id, )
+
+
+class StopConditionResults(ActionObject):
+    action_id = models.IntegerField()
+    occurrence_id = models.IntegerField(null=True)
+    name = models.CharField(max_length=200)
+    name_type = models.CharField(max_length=200, null=True)
+    name_value = models.CharField(max_length=200, null=True)
+    name_abbrev = models.CharField(max_length=20, null=True)
+    value_textvalue = models.CharField(null=True, max_length=100)
+    value_value = models.CharField(null=True, max_length=20)
+    value_unit = models.CharField(null=True, max_length=40)
+    value_unit_type = models.CharField(null=True, max_length=200)
+    value_unit_value = models.CharField(null=True, max_length=20)
+    value_unit_abbrev = models.CharField(null=True, max_length=20)
+
+    def __unicode__(self):
+        return "StopConditionResults: %s" % (self.id, )
+
+
+class Occurrences(ActionObject):
+    action_id = models.IntegerField()
+    startTime = models.DateTimeField(null=True)
+    endTime = models.DateTimeField(null=True)
+    additionalDetails = models.CharField(max_length=1000, null=True)
+
+    def __unicode__(self):
+        return "Occurrences: %s" % (self.id, )
+
+
+class ActionResults(ActionObject):
+    action_type = models.CharField(max_length=17)
+    state = models.CharField(max_length=5)
+    healthactionresult_id = models.CharField(max_length=200)
+    name = models.CharField(max_length=200, null=True)
+    name_type = models.CharField(max_length=200, null=True)
+    name_value = models.CharField(max_length=200, null=True)
+    name_abbrev = models.CharField(max_length=20, null=True)
+
+    def __unicode__(self):
+        return "ActionResults: %s" % (self.id, )
+
+
+class HealthActionResult(Fact):
+    name = models.CharField(max_length=200, null=True)
+    name_type = models.CharField(max_length=200, null=True)
+    name_value = models.CharField(max_length=200, null=True)
+    name_abbrev = models.CharField(max_length=20, null=True)
+    planType = models.CharField(max_length=200, blank=True)
+    reportedBy = models.CharField(max_length=200)
+    dateReported = models.DateTimeField()
+    actions = models.TextField()
+
+    def __unicode__(self):
+        return 'HealthActionResult: %s' % (self.id, )
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/models/fact_objects/healthactionschedule.py indivo_server/indivo/models/fact_objects/healthactionschedule.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/models/fact_objects/healthactionschedule.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/models/fact_objects/healthactionschedule.py	2012-04-20 18:39:50.000000000 -0400
@@ -0,0 +1,37 @@
+"""
+Indivo Model for HealthActionSchedule
+"""
+
+from fact import Fact
+from django.db import models
+from django.conf import settings
+
+class HealthActionSchedule(Fact):
+    name = models.CharField(max_length=200)
+    name_type = models.CharField(max_length=200, null=True)
+    name_value = models.CharField(max_length=200, null=True)
+    name_abbrev = models.CharField(max_length=20, null=True)
+    scheduledBy = models.CharField(max_length=200)
+    dateScheduled = models.DateTimeField()
+    dateStart = models.DateTimeField()
+    dateEnd = models.DateTimeField(null=True)
+    recurrenceRule_frequency = models.CharField(max_length=200)
+    recurrenceRule_frequency_type = models.CharField(max_length=200, null=True)
+    recurrenceRule_frequency_value = models.CharField(max_length=200, null=True)
+    recurrenceRule_frequency_abbrev = models.CharField(max_length=20, null=True)
+    recurrenceRule_interval = models.CharField(max_length=200, null=True)
+    recurrenceRule_interval_type = models.CharField(max_length=200, null=True)
+    recurrenceRule_interval_value = models.CharField(max_length=200, null=True)
+    recurrenceRule_interval_abbrev = models.CharField(max_length=20, null=True)
+    recurrenceRule_count = models.IntegerField(null=True)
+    dose_textvalue = models.CharField(null=True, max_length=100)
+    dose_value = models.CharField(null=True, max_length=20)
+    dose_unit = models.CharField(null=True, max_length=40)
+    dose_unit_type = models.CharField(null=True, max_length=200)
+    dose_unit_value = models.CharField(null=True, max_length=20)
+    dose_unit_abbrev = models.CharField(null=True, max_length=20)
+    instructions = models.TextField(null=True)
+
+    def __unicode__(self):
+        return 'HealthActionSchedule %s' % self.id
+
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/models/fact_objects/healthmeasurement.py indivo_server/indivo/models/fact_objects/healthmeasurement.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/models/fact_objects/healthmeasurement.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/models/fact_objects/healthmeasurement.py	2012-04-26 15:13:03.000000000 -0400
@@ -0,0 +1,30 @@
+"""
+Indivo Models for HealthMeasurement
+"""
+
+from fact import Fact
+from django.db import models
+from django.conf import settings
+
+class HealthMeasurement(Fact):
+    name = models.CharField(max_length=200)
+    name_type = models.CharField(max_length=200, null=True)
+    name_value = models.CharField(max_length=200, null=True)
+    name_abbrev = models.CharField(max_length=20, null=True)
+    measuredBy = models.CharField(max_length=200, null=True)
+    dateMeasuredStart = models.DateTimeField()
+    dateMeasuredEnd = models.DateTimeField(null=True)
+    result_textvalue = models.CharField(null=True, max_length=100)
+    result_value = models.CharField(null=True, max_length=20)
+    result_unit = models.CharField(null=True, max_length=40)
+    result_unit_type = models.CharField(null=True, max_length=200)
+    result_unit_value = models.CharField(null=True, max_length=20)
+    result_unit_abbrev = models.CharField(null=True, max_length=20)
+    site = models.CharField(max_length=200, null=True)
+    position = models.CharField(max_length=200, null=True)
+    technique = models.CharField(max_length=200, null=True)
+    comments = models.CharField(max_length=1000, null=True)
+
+    def __unicode__(self):
+        return 'HealthMeasurement %s' % self.id
+
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/models/fact_objects/medicationadministration.py indivo_server/indivo/models/fact_objects/medicationadministration.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/models/fact_objects/medicationadministration.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/models/fact_objects/medicationadministration.py	2012-02-21 07:36:45.000000000 -0500
@@ -0,0 +1,32 @@
+"""
+Indivo Model for Medication Administration
+"""
+
+from fact import Fact
+from django.db import models
+from django.conf import settings
+
+class MedicationAdministration(Fact):
+  name = models.CharField(max_length=200)
+  name_type = models.CharField(max_length=200, null=True)
+  name_value = models.CharField(max_length=200, null=True)
+  name_abbrev = models.CharField(max_length=20, null=True)
+  reported_by=models.CharField(null=True, max_length=200)
+  date_reported=models.DateTimeField(null=True)
+  date_administered=models.DateTimeField(null=True)
+  amountadministered_unit=models.CharField(null=True, max_length=100)
+  amountadministered_textvalue=models.CharField(null=True, max_length=20)
+  amountadministered_value=models.CharField(null=True, max_length=40)
+  amountadministered_unit_type=models.CharField(null=True, max_length=200)
+  amountadministered_unit_value=models.CharField(null=True, max_length=20)
+  amountadministered_unit_abbrev=models.CharField(null=True, max_length=20)
+  amountremaining_unit=models.CharField(null=True, max_length=100)
+  amountremaining_textvalue=models.CharField(null=True, max_length=20)
+  amountremaining_value=models.CharField(null=True, max_length=40)
+  amountremaining_unit_type=models.CharField(null=True, max_length=200)
+  amountremaining_unit_value=models.CharField(null=True, max_length=20)
+  amountremaining_unit_abbrev=models.CharField(null=True, max_length=20)
+
+
+  def __unicode__(self):
+    return 'MedicationAdministration %s' % self.id
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/models/fact_objects/medicationfill.py indivo_server/indivo/models/fact_objects/medicationfill.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/models/fact_objects/medicationfill.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/models/fact_objects/medicationfill.py	2012-02-21 07:36:45.000000000 -0500
@@ -0,0 +1,32 @@
+"""
+Indivo Model for Medication Fill
+"""
+
+from fact import Fact
+from django.db import models
+from django.conf import settings
+
+class MedicationFill(Fact):
+  name = models.CharField(max_length=200)
+  name_type = models.CharField(max_length=200, null=True)
+  name_value = models.CharField(max_length=200, null=True)
+  name_abbrev = models.CharField(max_length=20, null=True)
+  filled_by=models.CharField(null=True, max_length=200)
+  date_filled=models.DateTimeField(null=True)
+  amountfilled_unit=models.CharField(null=True, max_length=100)
+  amountfilled_textvalue=models.CharField(null=True, max_length=20)
+  amountfilled_value=models.CharField(null=True, max_length=40)
+  amountfilled_unit_type=models.CharField(null=True, max_length=200)
+  amountfilled_unit_value=models.CharField(null=True, max_length=20)
+  amountfilled_unit_abbrev=models.CharField(null=True, max_length=20)
+  ndc = models.CharField(max_length=200)
+  ndc_type = models.CharField(max_length=200, null=True)
+  ndc_value = models.CharField(max_length=200, null=True)
+  ndc_abbrev = models.CharField(max_length=20, null=True)
+  fill_sequence_number=models.IntegerField(null=True)
+  lot_number=models.IntegerField(null=True)
+  refills_remaining=models.IntegerField(null=True)
+  instructions=models.TextField(null=True)
+
+  def __unicode__(self):
+    return 'MedicationFill %s' % self.id
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/models/fact_objects/medicationorder.py indivo_server/indivo/models/fact_objects/medicationorder.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/models/fact_objects/medicationorder.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/models/fact_objects/medicationorder.py	2012-02-21 07:36:45.000000000 -0500
@@ -0,0 +1,30 @@
+"""
+Indivo Model for Medication Order
+"""
+
+from fact import Fact
+from django.db import models
+from django.conf import settings
+
+class MedicationOrder(Fact):
+  name = models.CharField(max_length=200)
+  name_type = models.CharField(max_length=200, null=True)
+  name_value = models.CharField(max_length=200, null=True)
+  name_abbrev = models.CharField(max_length=20, null=True)
+  order_type=models.CharField(null=True, max_length=200)
+  ordered_by=models.CharField(null=True, max_length=200)
+  date_ordered=models.DateTimeField(null=True)
+  date_expires=models.DateTimeField(null=True)
+  indication=models.TextField(null=True)
+  amountordered_unit=models.CharField(null=True, max_length=100)
+  amountordered_textvalue=models.CharField(null=True, max_length=20)
+  amountordered_value=models.CharField(null=True, max_length=40)
+  amountordered_unit_type=models.CharField(null=True, max_length=200)
+  amountordered_unit_value=models.CharField(null=True, max_length=20)
+  amountordered_unit_abbrev=models.CharField(null=True, max_length=20)
+  refills=models.IntegerField(null=True)
+  substitution_permitted=models.NullBooleanField()
+  instructions=models.TextField(null=True)
+
+  def __unicode__(self):
+    return 'MedicationOrder %s' % self.id
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/models/fact_objects/medicationscheduleitem.py indivo_server/indivo/models/fact_objects/medicationscheduleitem.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/models/fact_objects/medicationscheduleitem.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/models/fact_objects/medicationscheduleitem.py	2012-02-21 07:36:45.000000000 -0500
@@ -0,0 +1,38 @@
+"""
+Indivo Model for Medication Schedule Item
+"""
+
+from fact import Fact
+from django.db import models
+from django.conf import settings
+
+class MedicationScheduleItem(Fact):
+  name = models.CharField(max_length=200)
+  name_type = models.CharField(max_length=200, null=True)
+  name_value = models.CharField(max_length=200, null=True)
+  name_abbrev = models.CharField(max_length=20, null=True)
+  scheduled_by = models.CharField(max_length=200)
+  date_scheduled = models.DateTimeField()
+  date_start = models.DateTimeField()
+  date_end = models.DateTimeField(null=True)
+  recurrencerule_frequency = models.CharField(max_length=200)
+  recurrencerule_frequency_type = models.CharField(max_length=200, null=True)
+  recurrencerule_frequency_value = models.CharField(max_length=200, null=True)
+  recurrencerule_frequency_abbrev = models.CharField(max_length=20, null=True)
+  recurrencerule_interval = models.CharField(null=True, max_length=200)
+  recurrencerule_interval_type = models.CharField(max_length=200, null=True)
+  recurrencerule_interval_value = models.CharField(max_length=200, null=True)
+  recurrencerule_interval_abbrev = models.CharField(max_length=20, null=True)
+  recurrencerule_dateuntil=models.DateTimeField(null=True)
+  recurrencerule_count=models.IntegerField(null=True)
+  dose_textvalue = models.CharField(null=True, max_length=100)
+  dose_value = models.CharField(null=True, max_length=20)
+  dose_unit = models.CharField(null=True, max_length=40)
+  dose_unit_type = models.CharField(null=True, max_length=200)
+  dose_unit_value = models.CharField(null=True, max_length=20)
+  dose_unit_abbrev = models.CharField(null=True, max_length=20)
+  instructions = models.TextField(null=True)
+
+
+  def __unicode__(self):
+    return 'MedicationScheduleItem %s' % self.id
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/models/fact_objects/medicationschedule.py indivo_server/indivo/models/fact_objects/medicationschedule.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/models/fact_objects/medicationschedule.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/models/fact_objects/medicationschedule.py	2012-04-20 18:43:59.000000000 -0400
@@ -0,0 +1,37 @@
+"""
+Indivo Models for MedicationSchedule
+"""
+
+from fact import Fact
+from django.db import models
+from django.conf import settings
+
+class MedicationSchedule(Fact):
+    name = models.CharField(max_length=200)
+    name_type = models.CharField(max_length=200, null=True)
+    name_value = models.CharField(max_length=200, null=True)
+    name_abbrev = models.CharField(max_length=20, null=True)
+    scheduledBy = models.CharField(max_length=200)
+    dateScheduled = models.DateTimeField()
+    dateStart = models.DateTimeField()
+    dateEnd = models.DateTimeField(null=True)
+    recurrenceRule_frequency = models.CharField(max_length=200)
+    recurrenceRule_frequency_type = models.CharField(max_length=200, null=True)
+    recurrenceRule_frequency_value = models.CharField(max_length=200, null=True)
+    recurrenceRule_frequency_abbrev = models.CharField(max_length=20, null=True)
+    recurrenceRule_interval = models.CharField(max_length=200, null=True)
+    recurrenceRule_interval_type = models.CharField(max_length=200, null=True)
+    recurrenceRule_interval_value = models.CharField(max_length=200, null=True)
+    recurrenceRule_interval_abbrev = models.CharField(max_length=20, null=True)
+    recurrenceRule_count = models.IntegerField(null=True)
+    dose_textvalue = models.CharField(null=True, max_length=100)
+    dose_value = models.CharField(null=True, max_length=20)
+    dose_unit = models.CharField(null=True, max_length=40)
+    dose_unit_type = models.CharField(null=True, max_length=200)
+    dose_unit_value = models.CharField(null=True, max_length=20)
+    dose_unit_abbrev = models.CharField(null=True, max_length=20)
+    instructions = models.TextField(null=True)
+
+    def __unicode__(self):
+        return 'MedicationSchedule %s' % self.id
+
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/models/fact_objects/videomessage.py indivo_server/indivo/models/fact_objects/videomessage.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/models/fact_objects/videomessage.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/models/fact_objects/videomessage.py	2012-02-21 07:36:45.000000000 -0500
@@ -0,0 +1,18 @@
+"""
+Indivo Model for VideoMessage
+"""
+
+from fact import Fact
+from django.db import models
+from django.conf import settings
+
+class VideoMessage(Fact):
+  file_id=models.CharField(max_length=200)
+  storage_type=models.CharField(max_length=200)   
+  subject=models.CharField(max_length=200) 
+  from_str=models.CharField(max_length=200)
+  date_recorded=models.DateTimeField(null=True)
+  date_sent=models.DateTimeField(null=True)
+
+  def __unicode__(self):
+    return 'VideoMessage %s' % self.id
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/models/fact_objects/vitals.py indivo_server/indivo/models/fact_objects/vitals.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/models/fact_objects/vitals.py	2012-02-27 12:31:32.000000000 -0500
+++ indivo_server/indivo/models/fact_objects/vitals.py	2012-02-21 07:36:45.000000000 -0500
@@ -7,21 +7,23 @@
 from django.conf import settings
 
 class Vitals(Fact):
-
-  date_measured = models.DateTimeField(null=True)
   name = models.CharField(max_length=100)
   name_type = models.CharField(max_length=80, null=True)
   name_value = models.CharField(max_length=40, null=True)
   name_abbrev = models.CharField(max_length=20, null=True)
-  value = models.FloatField()
-  unit = models.CharField(max_length=100)
-  unit_type = models.CharField(max_length=80, null=True)
-  unit_value = models.CharField(max_length=40, null=True)
-  unit_abbrev = models.CharField(max_length=20, null=True)
+  measured_by=models.CharField(max_length=200, null=True)
+  date_measured_start=models.DateTimeField(null=True)
+  date_measured_end=models.DateTimeField(null=True)
+  result_unit=models.CharField(max_length=100, null=True)
+  result_textvalue=models.CharField(max_length=5000, null=True)
+  result_value=models.CharField(max_length=200, null=True)
+  result_unit_type=models.CharField(max_length=200, null=True)
+  result_unit_value=models.CharField(max_length=200, null=True)
+  result_unit_abbrev=models.CharField(max_length=200, null=True)
   site = models.CharField(max_length=40, null=True)
   position = models.CharField(max_length=40, null=True)
+  technique=models.CharField(max_length=200, null=True)
   comments = models.TextField(null=True)
 
   def __unicode__(self):
     return 'Vitals %s' % self.id
-
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/models/__init__.py indivo_server/indivo/models/__init__.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/models/__init__.py	2012-02-27 12:31:32.000000000 -0500
+++ indivo_server/indivo/models/__init__.py	2012-04-26 15:14:11.000000000 -0400
@@ -43,6 +43,32 @@
 from fact_objects.immunization          import Immunization
 from fact_objects.lab                   import Lab
 from fact_objects.medication            import Medication
+from fact_objects.medicationorder       import MedicationOrder
+from fact_objects.medicationfill        import MedicationFill
+from fact_objects.medicationadministration  import MedicationAdministration
+from fact_objects.medicationscheduleitem    import MedicationScheduleItem
+from fact_objects.equipmentscheduleitem import EquipmentScheduleItem
+from fact_objects.adherenceitem         import AdherenceItem
+from fact_objects.videomessage          import VideoMessage
 from fact_objects.problem               import Problem
 from fact_objects.procedure             import Procedure
 from fact_objects.vitals                import Vitals
+from fact_objects.device                import Device
+from fact_objects.healthmeasurement     import HealthMeasurement
+from fact_objects.medicationschedule    import MedicationSchedule
+from fact_objects.healthactionoccurrence    import HealthActionOccurrence
+from fact_objects.healthactionschedule  import HealthActionSchedule
+from fact_objects.healthactionplan      import HealthActionPlan
+from fact_objects.healthactionplan      import Actions
+from fact_objects.healthactionplan      import StopConditions
+from fact_objects.healthactionplan      import Targets
+from fact_objects.healthactionplan      import MeasurementPlans
+from fact_objects.healthactionplan      import DevicePlans
+from fact_objects.healthactionplan      import MedicationPlans
+from fact_objects.healthactionresult    import HealthActionResult
+from fact_objects.healthactionresult    import ActionResults
+from fact_objects.healthactionresult    import Occurrences
+from fact_objects.healthactionresult    import StopConditionResults
+from fact_objects.healthactionresult    import Measurements
+from fact_objects.healthactionresult    import DeviceResults
+from fact_objects.healthactionresult    import MedicationAdministrations
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/models/messaging.py indivo_server/indivo/models/messaging.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/models/messaging.py	2012-02-27 12:31:32.000000000 -0500
+++ indivo_server/indivo/models/messaging.py	2012-04-18 09:50:43.000000000 -0400
@@ -39,7 +39,9 @@
     
     received_at = models.DateTimeField(auto_now_add = True)
     read_at = models.DateTimeField(auto_now_add=False, null=True)
+    sent_read_at = models.DateTimeField(auto_now_add=False, null=True)
     archived_at = models.DateTimeField(auto_now_add=False, null=True)
+    sent_archived_at = models.DateTimeField(auto_now_add=False, null=True)
 
     # if the user responds to this message
     response_to = models.ForeignKey('self', null=True, related_name='message_responses')
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/templates/document.xml indivo_server/indivo/templates/document.xml
--- fyoung-indivo_server_1_0-3f85dc7/indivo/templates/document.xml	2012-02-27 12:31:32.000000000 -0500
+++ indivo_server/indivo/templates/document.xml	2012-02-28 16:54:33.000000000 -0500
@@ -35,7 +35,11 @@
   {% if doc.relates_to %}
     <relatesTo>
       {% for relationship in doc.relates_to %}
-      <relation type="{{relationship.relationship__type}}" count="{{relationship.count}}" />
+      <relation type="{{relationship.relationship__type}}" count="{{relationship.count}}">
+        {% for d in relationship.docs %}
+        <relatedDocument id="{{ d.document_1_id }}" />
+        {% endfor %}
+      </relation>
       {% endfor %}
     </relatesTo>
   {% endif %}
@@ -43,7 +47,11 @@
   {% if doc.is_related_from %}
     <isRelatedFrom>
       {% for relationship in doc.is_related_from %}
-      <relation type="{{relationship.relationship__type}}" count="{{relationship.count}}" />
+      <relation type="{{relationship.relationship__type}}" count="{{relationship.count}}">
+        {% for d in relationship.docs %}
+        <relatedDocument id="{{ d.document_0_id }}" />
+        {% endfor %}
+      </relation>
       {% endfor %}
     </isRelatedFrom>
   {% endif %}
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/templates/messages.xml indivo_server/indivo/templates/messages.xml
--- fyoung-indivo_server_1_0-3f85dc7/indivo/templates/messages.xml	2012-02-27 12:31:32.000000000 -0500
+++ indivo_server/indivo/templates/messages.xml	2012-03-23 16:49:50.000000000 -0400
@@ -5,8 +5,16 @@
 <Message id="{{message.id}}">
   <sender>{{message.sender.email}}</sender>
   <received_at>{{message.received_at|format_iso8601_datetime}}</received_at>
+{% if sent_view %}
+  <read_at>{{message.sent_read_at|format_iso8601_datetime}}</read_at>
+{% else %}
   <read_at>{{message.read_at|format_iso8601_datetime}}</read_at>
+{% endif %}
+{% if sent_view %}
+  <archived_at>{{message.sent_archived_at|format_iso8601_datetime}}</archived_at>
+{% else %}
   <archived_at>{{message.archived_at|format_iso8601_datetime}}</archived_at>
+{% endif %}
   <subject>{{message.subject}}</subject>
   <severity>{{message.severity}}</severity>
 {% if message.about_record_id %}
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/templates/message.xml indivo_server/indivo/templates/message.xml
--- fyoung-indivo_server_1_0-3f85dc7/indivo/templates/message.xml	2012-02-27 12:31:32.000000000 -0500
+++ indivo_server/indivo/templates/message.xml	2012-03-23 16:53:02.000000000 -0400
@@ -3,8 +3,13 @@
 <Message id="{{message.id}}">
   <sender>{{message.sender.email}}</sender>
   <received_at>{{message.received_at|format_iso8601_datetime}}</received_at>
-  {% if message.read_at %}<read_at>{{message.read_at|format_iso8601_datetime}}</read_at>{% endif %}
-  {% if message.archived_at %}<archived_at>{{message.archived_at|format_iso8601_datetime}}</archived_at>{% endif %}
+  {% if sent_view %}
+    {% if message.sent_read_at %}<read_at>{{message.sent_read_at|format_iso8601_datetime}}</read_at>{% endif %}
+    {% if message.sent_archived_at %}<archived_at>{{message.sent_archived_at|format_iso8601_datetime}}</archived_at>{% endif %}
+  {% else %}
+    {% if message.read_at %}<read_at>{{message.read_at|format_iso8601_datetime}}</read_at>{% endif %}
+    {% if message.archived_at %}<archived_at>{{message.archived_at|format_iso8601_datetime}}</archived_at>{% endif %}
+  {% endif %}
   <subject>{{message.subject}}</subject>
   <body>{{message.body}}</body>
   <severity>{{message.severity}}</severity>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/templates/reports/adherenceitem.xml indivo_server/indivo/templates/reports/adherenceitem.xml
--- fyoung-indivo_server_1_0-3f85dc7/indivo/templates/reports/adherenceitem.xml	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/templates/reports/adherenceitem.xml	2012-02-21 07:36:45.000000000 -0500
@@ -0,0 +1,12 @@
+{% load template_utils %}<AdherenceItem xmlns="http://indivo.org/vocab/xml/documents#">
+  <name>{{ fobj.name }}</name>
+  <reportedBy>{{ fobj.reported_by }}</reportedBy>
+  <dateReported>{{ fobj.date_reported|format_iso8601_datetime }}</dateReported>
+  {% if fobj.recurrence_index %}
+    <recurrenceIndex>{{ fobj.recurrence_index }}</recurrenceIndex>
+  {% endif %}
+  <adherence>{{ fobj.adherence }}</adherence>
+  {% if fobj.recurrence_index %}
+    <nonadherenceReason>{{ fobj.nonadherence_reason }}</nonadherenceReason>
+  {% endif %}
+</AdherenceItem>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/templates/reports/device.xml indivo_server/indivo/templates/reports/device.xml
--- fyoung-indivo_server_1_0-3f85dc7/indivo/templates/reports/device.xml	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/templates/reports/device.xml	2012-04-20 13:40:39.000000000 -0400
@@ -0,0 +1,25 @@
+{% load template_utils %}
+<Device xmlns="http://indivo.org/vocab/xml/documents#">
+    <name{% if fobj.name_type %} type="{{ fobj.name_type }}" value="{{ fobj.name_value }}"{% if fobj.name_abbrev %} abbrev="{{ fobj.name_abbrev }}"{% endif %}{% endif %}>{{ fobj.name }}</name>
+    {% if fobj.identity %}
+    <id{% if fobj.identity_type %} type="{{ fobj.identity_type }}" value="{{ fobj.identity_value }}"{% if fobj.identity_abbrev %} abbrev="{{ fobj.identity_abbrev }}"{% endif %}{% endif %}>{{ fobj.identity }}</id>
+    {% endif %}
+    {% if fobj.type %}
+    <type{% if fobj.type_type %} type="{{ fobj.type_type }}" value="{{ fobj.type_value }}"{% if fobj.type_abbrev %} abbrev="{{ fobj.type_abbrev }}"{% endif %}{% endif %}>{{ fobj.type }}</type>
+    {% endif %}
+    {% if fobj.indication %}
+    <indication>{{ fobj.indication }}</indication>
+    {% endif %}
+    {% if fobj.vendor %}
+    <vendor{% if fobj.vendor_type %} type="{{ fobj.vendor_type }}" value="{{ fobj.vendor_value }}"{% if fobj.vendor_abbrev %} abbrev="{{ fobj.vendor_abbrev }}"{% endif %}{% endif %}>{{ fobj.vendor }}</vendor>
+    {% endif %}
+    {% if fobj.description %}
+    <description>{{ fobj.description }}</description>
+    {% endif %}
+    {% if fobj.specification %}
+    <specification>{{ fobj.specification }}</specification>
+    {% endif %}
+    {% if fobj.certification %}
+    <certification>{{ fobj.certification }}</certification>
+    {% endif %}
+</Device>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/templates/reports/equipmentscheduleitem.xml indivo_server/indivo/templates/reports/equipmentscheduleitem.xml
--- fyoung-indivo_server_1_0-3f85dc7/indivo/templates/reports/equipmentscheduleitem.xml	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/templates/reports/equipmentscheduleitem.xml	2012-02-21 07:36:45.000000000 -0500
@@ -0,0 +1,26 @@
+{% load template_utils %}<EquipmentScheduleItem xmlns="http://indivo.org/vocab/xml/documents#">
+  <name{% if fobj.name_type %} type="{{ fobj.name_type }}" value="{{ fobj.name_value }}"{% if fobj.name_abbrev %} abbrev="{{ fobj.name_abbrev }}"{% endif %}{% endif %}>{{ fobj.name }}</name>
+  <scheduledBy>{{ fobj.scheduled_by }}</scheduledBy>
+  <dateScheduled>{{ fobj.date_scheduled|format_iso8601_datetime }}</dateScheduled>
+  <dateStart>{{ fobj.date_start|format_iso8601_datetime }}</dateStart>
+  {% if fobj.date_end %}
+  <dateEnd>{{ fobj.date_end|format_iso8601_datetime }}</dateEnd>
+  {% endif %}
+  {% if fobj.recurrencerule_frequency %}
+  <recurrenceRule>
+    <frequency{% if fobj.recurrencerule_frequency_type %} type="{{ fobj.recurrencerule_frequency_type }}" value="{{ fobj.recurrencerule_frequency_value }}"{% if fobj.recurrencerule_frequency_abbrev %} abbrev="{{ fobj.recurrencerule_frequency_abbrev }}"{% endif %}{% endif %}>{{ fobj.recurrencerule_frequency }}</frequency>
+    {% if fobj.recurrencerule_interval %}
+    <interval{% if fobj.recurrencerule_interval_type %} type="{{ fobj.recurrencerule_interval_type }}" value="{{ fobj.recurrencerule_interval_value }}"{% if fobj.recurrencerule_frequency_abbrev %} abbrev="{{ fobj.recurrencerule_interval_abbrev }}"{% endif %}{% endif %}>{{ fobj.recurrencerule_interval }}</interval>
+    {% endif %}
+    {% if fobj.recurrencerule_dateuntil %}
+    <dateUntil>{{ fobj.recurrencerule_dateuntil|format_iso8601_datetime }}</dateUntil>
+    {% endif %}
+    {% if fobj.recurrencerule_count %}
+    <count>{{ fobj.recurrencerule_count }}</count>
+    {% endif %}
+  </recurrenceRule>
+  {% endif %}
+  {% if fobj.instructions %}
+  <instructions>{{ fobj.instructions }}</instructions>
+  {% endif %}
+</EquipmentScheduleItem>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/templates/reports/healthactionoccurrence.xml indivo_server/indivo/templates/reports/healthactionoccurrence.xml
--- fyoung-indivo_server_1_0-3f85dc7/indivo/templates/reports/healthactionoccurrence.xml	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/templates/reports/healthactionoccurrence.xml	2012-04-20 13:55:30.000000000 -0400
@@ -0,0 +1,7 @@
+{% load template_utils %}
+<HealthActionOccurrence xmlns="http://indivo.org/vocab/xml/documents#">
+    <name{% if fobj.name_type %} type="{{ fobj.name_type }}" value="{{ fobj.name_value }}"{% if fobj.name_abbrev %} abbrev="{{ fobj.name_abbrev }}"{% endif %}{% endif %}>{{ fobj.name }}</name>
+    {% if fobj.recurrenceIndex %}
+    <recurrenceIndex>{{ fobj.recurrenceIndex }}</recurrenceIndex>
+    {% endif %}
+</HealthActionOccurrence>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/templates/reports/healthactionplan.xml indivo_server/indivo/templates/reports/healthactionplan.xml
--- fyoung-indivo_server_1_0-3f85dc7/indivo/templates/reports/healthactionplan.xml	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/templates/reports/healthactionplan.xml	2012-04-19 09:05:51.000000000 -0400
@@ -0,0 +1,18 @@
+{% load template_utils %}
+<HealthActionPlan xmlns="http://indivo.org/vocab/xml/documents#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
+  <name{% if fobj.name_type %} type="{{ fobj.name_type }}" value="{{ fobj.name_value }}"{% if fobj.name_abbrev %} abbrev="{{ fobj.name_abbrev }}"{% endif %}{% endif %}>{{ fobj.name }}</name>
+  <planType>{{ fobj.planType }}</planType>
+  <plannedBy>{{ fobj.plannedBy }}</plannedBy>
+  <datePlanned>{{ fobj.datePlanned|format_iso8601_datetime }}</datePlanned>
+  {% if fobj.dateExpires %}
+  <dateExpires>{{ fobj.dateExpires|format_iso8601_datetime }}</dateExpires>
+  {% endif %}
+  <indication>{{ fobj.indication }}</indication>
+  {% if fobj.instructions %}
+  <instructions>{{ fobj.instructions }}</instructions>
+  {% endif %}
+  {% if fobj.system %}
+  <system{% if fobj.system_type %} type="{{ fobj.system_type }}" value="{{ fobj.system_value }}"{% if fobj.system_abbrev %} abbrev="{{ fobj.system_abbrev }}"{% endif %}{% endif %}>{{ fobj.system }}</system>
+  {% endif %}
+  {% autoescape off %}{{ fobj.actions }}{% endautoescape %}
+</HealthActionPlan>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/templates/reports/healthactionresult.xml indivo_server/indivo/templates/reports/healthactionresult.xml
--- fyoung-indivo_server_1_0-3f85dc7/indivo/templates/reports/healthactionresult.xml	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/templates/reports/healthactionresult.xml	2012-04-19 09:05:51.000000000 -0400
@@ -0,0 +1,8 @@
+{% load template_utils %}
+<HealthActionResult xmlns="http://indivo.org/vocab/xml/documents#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
+  <name{% if fobj.name_type %} type="{{ fobj.name_type }}" value="{{ fobj.name_value }}"{% if fobj.name_abbrev %} abbrev="{{ fobj.name_abbrev }}"{% endif %}{% endif %}>{{ fobj.name }}</name>
+  <planType>{{ fobj.planType }}</planType>
+  <reportedBy>{{ fobj.reportedBy }}</reportedBy>
+  <dateReported>{{ fobj.dateReported|format_iso8601_datetime }}</dateReported>
+  {% autoescape off %}{{ fobj.actions }}{% endautoescape %}
+</HealthActionResult>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/templates/reports/healthactionschedule.xml indivo_server/indivo/templates/reports/healthactionschedule.xml
--- fyoung-indivo_server_1_0-3f85dc7/indivo/templates/reports/healthactionschedule.xml	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/templates/reports/healthactionschedule.xml	2012-04-20 17:49:32.000000000 -0400
@@ -0,0 +1,35 @@
+{% load template_utils %}
+<HealthActionSchedule xmlns="http://indivo.org/vocab/xml/documents#">
+  <name{% if fobj.name_type %} type="{{ fobj.name_type }}" value="{{ fobj.name_value }}"{% if fobj.name_abbrev %} abbrev="{{ fobj.name_abbrev }}"{% endif %}{% endif %}>{{ fobj.name }}</name>
+  <scheduledBy>{{ fobj.scheduled_by }}</scheduledBy>
+  <dateScheduled>{{ fobj.date_scheduled|format_iso8601_datetime }}</dateScheduled>
+  <dateStart>{{ fobj.date_start|format_iso8601_datetime }}</dateStart>
+  {% if fobj.date_end %}
+  <dateEnd>{{ fobj.date_end|format_iso8601_datetime }}</dateEnd>
+  {% endif %}
+  {% if fobj.recurrenceRule_frequency %}
+  <recurrenceRule>
+    <frequency{% if fobj.recurrenceRule_frequency_type %} type="{{ fobj.recurrenceRule_frequency_type }}" value="{{ fobj.recurrenceRule_frequency_value }}"{% if fobj.recurrenceRule_frequency_abbrev %} abbrev="{{ fobj.recurrenceRule_frequency_abbrev }}"{% endif %}{% endif %}>{{ fobj.recurrenceRule_frequency }}</frequency>
+    {% if fobj.recurrenceRule_interval %}
+    <interval{% if fobj.recurrenceRule_interval_type %} type="{{ fobj.recurrenceRule_interval_type }}" value="{{ fobj.recurrenceRule_interval_value }}"{% if fobj.recurrenceRule_frequency_abbrev %} abbrev="{{ fobj.recurrenceRule_interval_abbrev }}"{% endif %}{% endif %}>{{ fobj.recurrenceRule_interval }}</interval>
+    {% endif %}
+    {% if fobj.recurrenceRule_count %}
+    <count>{{ fobj.recurrenceRule_count }}</count>
+    {% endif %}
+  </recurrenceRule>
+  {% endif %}
+  <dose>
+    {% if fobj.dose_value %}
+    <value>{{ fobj.dose_value }}</value>
+    {% endif %}
+    {% if fobj.dose_textvalue %}
+    <textValue>{{ fobj.dose_textvalue }}</textValue>
+    {% endif %}
+    {% if fobj.dose_unit %}
+    <unit{% if fobj.dose_unit_type %} type="{{ fobj.dose_unit_type }}" value="{{ fobj.dose_unit_value }}"{% if fobj.dose_unit_abbrev %} abbrev="{{ fobj.dose_unit_abbrev }}"{% endif %}{% endif %}>{{ fobj.dose_unit }}</unit>
+    {% endif %}
+  </dose>
+  {% if fobj.instructions %}
+  <instructions>{{ fobj.instructions }}</instructions>
+  {% endif %}
+</HealthActionSchedule>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/templates/reports/healthmeasurement.xml indivo_server/indivo/templates/reports/healthmeasurement.xml
--- fyoung-indivo_server_1_0-3f85dc7/indivo/templates/reports/healthmeasurement.xml	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/templates/reports/healthmeasurement.xml	2012-04-26 15:19:58.000000000 -0400
@@ -0,0 +1,32 @@
+{% load template_utils %}
+<HealthMeasurement xmlns="http://indivo.org/vocab/xml/documents#">
+  <name{% if fobj.name_type %} type="{{ fobj.name_type }}" value="{{ fobj.name_value }}"{% if fobj.name_abbrev %} abbrev="{{ fobj.name_abbrev }}"{% endif %}{% endif %}>{{ fobj.name }}</name>
+  <measuredBy>{{ fobj.measuredBy }}</measuredBy>
+  <dateMeasuredStart>{{ fobj.dateMeasuredStart|format_iso8601_datetime }}</dateMeasuredStart>
+  {% if fobj.dateMeasuredEnd %}
+  <dateMeasuredEnd>{{ fobj.dateMeasuredEnd|format_iso8601_datetime }}</dateMeasuredEnd>
+  {% endif %}
+  <result>
+    {% if fobj.result_value %}
+    <value>{{ fobj.result_value }}</value>
+    {% endif %}
+    {% if fobj.result_textvalue %}
+    <textValue>{{ fobj.result_textvalue }}</textValue>
+    {% endif %}
+    {% if fobj.result_unit %}
+    <unit{% if fobj.result_unit_type %} type="{{ fobj.result_unit_type }}" value="{{ fobj.result_unit_value }}"{% if fobj.result_unit_abbrev %} abbrev="{{ fobj.result_unit_abbrev }}"{% endif %}{% endif %}>{{ fobj.result_unit }}</unit>
+    {% endif %}
+  </result>
+  {% if fobj.site %}
+  <site>{{ fobj.site }}</site>
+  {% endif %}
+  {% if fobj.position %}
+  <position>{{ fobj.position }}</position>
+  {% endif %}
+  {% if fobj.technique %}
+  <technique>{{ fobj.technique }}</technique>
+  {% endif %}
+  {% if fobj.comments %}
+  <comments>{{ fobj.comments }}</comments>
+  {% endif %}
+</HealthMeasurement>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/templates/reports/medicationadministration.xml indivo_server/indivo/templates/reports/medicationadministration.xml
--- fyoung-indivo_server_1_0-3f85dc7/indivo/templates/reports/medicationadministration.xml	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/templates/reports/medicationadministration.xml	2012-02-21 07:36:45.000000000 -0500
@@ -0,0 +1,34 @@
+{% load template_utils %}<MedicationAdministration xmlns="http://indivo.org/vocab/xml/documents#">
+  <name{% if fobj.name_type %} type="{{ fobj.name_type }}" value="{{ fobj.name_value }}"{% if fobj.name_abbrev %} abbrev="{{ fobj.name_abbrev }}"{% endif %}{% endif %}>{{ fobj.name }}</name>
+  <reportedBy>{{ fobj.reported_by }}</reportedBy>
+  <dateReported>{{ fobj.date_reported|format_iso8601_datetime }}</dateReported>
+  {% if fobj.date_administered %}
+  <dateAdministered>{{ fobj.date_administered|format_iso8601_datetime }}</dateAdministered>
+  {% endif %}
+  {% if fobj.amountadministered_value or fobj.amountadministered_textvalue %}
+  <amountAdministered>
+    {% if fobj.amountadministered_value %}
+    <value>{{ fobj.amountadministered_value }}</value>
+    {% endif %}
+    {% if fobj.amountadministered_textvalue %}
+    <textValue>{{ fobj.amountadministered_textvalue }}</textValue>
+    {% endif %}
+    {% if fobj.amountadministered_unit %}
+    <unit{% if fobj.amountadministered_unit_type %} type="{{ fobj.amountadministered_unit_type }}" value="{{ fobj.amountadministered_unit_value }}"{% if fobj.amountadministered_unit_abbrev %} abbrev="{{ fobj.amountadministered_unit_abbrev }}"{% endif %}{% endif %}>{{ fobj.amountadministered_unit }}</unit>
+    {% endif %}
+  </amountAdministered>
+  {% endif %}
+  {% if fobj.amountremaining_value or fobj.amountremaining_textvalue %}
+  <amountRemaining>
+    {% if fobj.amountremaining_value %}
+    <value>{{ fobj.amountremaining_value }}</value>
+    {% endif %}
+    {% if fobj.amountremaining_textvalue %}
+    <textValue>{{ fobj.amountremaining_textvalue }}</textValue>
+    {% endif %}
+    {% if fobj.amountremaining_unit %}
+    <unit{% if fobj.amountremaining_unit_type %} type="{{ fobj.amountremaining_unit_type }}" value="{{ fobj.amountremaining_unit_value }}"{% if fobj.amountremaining_unit_abbrev %} abbrev="{{ fobj.amountremaining_unit_abbrev }}"{% endif %}{% endif %}>{{ fobj.amountremaining_unit }}</unit>
+    {% endif %}
+  </amountRemaining>
+  {% endif %}
+</MedicationAdministration>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/templates/reports/medicationfill.xml indivo_server/indivo/templates/reports/medicationfill.xml
--- fyoung-indivo_server_1_0-3f85dc7/indivo/templates/reports/medicationfill.xml	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/templates/reports/medicationfill.xml	2012-02-21 07:36:45.000000000 -0500
@@ -0,0 +1,31 @@
+{% load template_utils %}<MedicationFill xmlns="http://indivo.org/vocab/xml/documents#">
+  <name{% if fobj.name_type %} type="{{ fobj.name_type }}" value="{{ fobj.name_value }}"{% if fobj.name_abbrev %} abbrev="{{ fobj.name_abbrev }}"{% endif %}{% endif %}>{{ fobj.name }}</name>
+  <filledBy>{{ fobj.filled_by }}</filledBy>
+  <dateFilled>{{ fobj.date_filled|format_iso8601_datetime }}</dateFilled>
+  <amountFilled>
+    {% if fobj.amountfilled_value %}
+    <value>{{ fobj.amountfilled_value }}</value>
+    {% endif %}
+    {% if fobj.amountfilled_textvalue %}
+    <textValue>{{ fobj.amountfilled_textvalue }}</textValue>
+    {% endif %}
+    {% if fobj.amountfilled_unit %}
+    <unit{% if fobj.amountfilled_unit_type %} type="{{ fobj.amountfilled_unit_type }}" value="{{ fobj.amountfilled_unit_value }}"{% if fobj.amountfilled_unit_abbrev %} abbrev="{{ fobj.amountfilled_unit_abbrev }}"{% endif %}{% endif %}>{{ fobj.amountfilled_unit }}</unit>
+    {% endif %}
+  </amountFilled>
+  {% if fobj.ndc %}
+  <ndc{% if fobj.ndc_type %} type="{{ fobj.ndc_type }}" value="{{ fobj.ndc_value }}"{% if fobj.ndc_abbrev %} abbrev="{{ fobj.ndc_abbrev }}"{% endif %}{% endif %}>{{ fobj.ndc }}</ndc>
+  {% endif %}
+  {% if fobj.fill_sequence_number %}
+  <fillSequenceNumber>{{ fobj.fill_sequence_number }}</fillSequenceNumber>
+  {% endif %}
+  {% if fobj.lot_number %}
+  <lotNumber>{{ fobj.lot_number }}</lotNumber>
+  {% endif %}
+  {% if fobj.refills_remaining %}
+  <refillsRemaining>{{ fobj.refills_remaining }}</refillsRemaining>
+  {% endif %}
+  {% if fobj.instructions %}
+  <instructions>{{ fobj.instructions }}</instructions>
+  {% endif %}
+</MedicationFill>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/templates/reports/medicationorder.xml indivo_server/indivo/templates/reports/medicationorder.xml
--- fyoung-indivo_server_1_0-3f85dc7/indivo/templates/reports/medicationorder.xml	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/templates/reports/medicationorder.xml	2012-02-21 07:36:45.000000000 -0500
@@ -0,0 +1,34 @@
+{% load template_utils %}<MedicationOrder xmlns="http://indivo.org/vocab/xml/documents#">
+  <name{% if fobj.name_type %} type="{{ fobj.name_type }}" value="{{ fobj.name_value }}"{% if fobj.name_abbrev %} abbrev="{{ fobj.name_abbrev }}"{% endif %}{% endif %}>{{ fobj.name }}</name>
+  <orderType>{{ fobj.order_type }}</orderType>
+  <orderedBy>{{ fobj.ordered_by }}</orderedBy>
+  <dateOrdered>{{ fobj.date_ordered|format_iso8601_datetime }}</dateOrdered>
+  {% if fobj.date_expires %}
+  <dateExpires>{{ fobj.date_expires|format_iso8601_datetime }}</dateExpires>
+  {% endif %}
+  {% if fobj.indication %}
+  <indication>{{ fobj.indication }}</indication>
+  {% endif %}
+  {% if fobj.amountordered_value or fobj.amountordered_textvalue %}
+  <amountOrdered>
+    {% if fobj.amountordered_value %}
+    <value>{{ fobj.amountordered_value }}</value>
+    {% endif %}
+    {% if fobj.amountordered_textvalue %}
+    <textValue>{{ fobj.amountordered_textvalue }}</textValue>
+    {% endif %}
+    {% if fobj.amountordered_unit %}
+    <unit{% if fobj.amountordered_unit_type %} type="{{ fobj.amountordered_unit_type }}" value="{{ fobj.amountordered_unit_value }}"{% if fobj.amountordered_unit_abbrev %} abbrev="{{ fobj.amountordered_unit_abbrev }}"{% endif %}{% endif %}>{{ fobj.amountordered_unit }}</unit>
+    {% endif %}
+  </amountOrdered>
+  {% endif %}
+  {% if fobj.refills %}
+  <refills>{{ fobj.refills }}</refills>
+  {% endif %}
+  {% if fobj.substitution_permitted %}
+  <substitutionPermitted>{{ fobj.substitution_permitted }}</substitutionPermitted>
+  {% endif %}
+  {% if fobj.instructions %}
+  <instructions>{{ fobj.instructions }}</instructions>
+  {% endif %}
+</MedicationOrder>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/templates/reports/medicationscheduleitem.xml indivo_server/indivo/templates/reports/medicationscheduleitem.xml
--- fyoung-indivo_server_1_0-3f85dc7/indivo/templates/reports/medicationscheduleitem.xml	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/templates/reports/medicationscheduleitem.xml	2012-02-21 07:36:45.000000000 -0500
@@ -0,0 +1,37 @@
+{% load template_utils %}<MedicationScheduleItem xmlns="http://indivo.org/vocab/xml/documents#">
+  <name{% if fobj.name_type %} type="{{ fobj.name_type }}" value="{{ fobj.name_value }}"{% if fobj.name_abbrev %} abbrev="{{ fobj.name_abbrev }}"{% endif %}{% endif %}>{{ fobj.name }}</name>
+  <scheduledBy>{{ fobj.scheduled_by }}</scheduledBy>
+  <dateScheduled>{{ fobj.date_scheduled|format_iso8601_datetime }}</dateScheduled>
+  <dateStart>{{ fobj.date_start|format_iso8601_datetime }}</dateStart>
+  {% if fobj.date_end %}
+  <dateEnd>{{ fobj.date_end|format_iso8601_datetime }}</dateEnd>
+  {% endif %}
+  {% if fobj.recurrencerule_frequency %}
+  <recurrenceRule>
+    <frequency{% if fobj.recurrencerule_frequency_type %} type="{{ fobj.recurrencerule_frequency_type }}" value="{{ fobj.recurrencerule_frequency_value }}"{% if fobj.recurrencerule_frequency_abbrev %} abbrev="{{ fobj.recurrencerule_frequency_abbrev }}"{% endif %}{% endif %}>{{ fobj.recurrencerule_frequency }}</frequency>
+    {% if fobj.recurrencerule_interval %}
+    <interval{% if fobj.recurrencerule_interval_type %} type="{{ fobj.recurrencerule_interval_type }}" value="{{ fobj.recurrencerule_interval_value }}"{% if fobj.recurrencerule_frequency_abbrev %} abbrev="{{ fobj.recurrencerule_interval_abbrev }}"{% endif %}{% endif %}>{{ fobj.recurrencerule_interval }}</interval>
+    {% endif %}
+    {% if fobj.recurrencerule_dateuntil %}
+    <dateUntil>{{ fobj.recurrencerule_dateuntil|format_iso8601_datetime }}</dateUntil>
+    {% endif %}
+    {% if fobj.recurrencerule_count %}
+    <count>{{ fobj.recurrencerule_count }}</count>
+    {% endif %}
+  </recurrenceRule>
+  {% endif %}
+  <dose>
+    {% if fobj.dose_value %}
+    <value>{{ fobj.dose_value }}</value>
+    {% endif %}
+    {% if fobj.dose_textvalue %}
+    <textValue>{{ fobj.dose_textvalue }}</textValue>
+    {% endif %}
+    {% if fobj.dose_unit %}
+    <unit{% if fobj.dose_unit_type %} type="{{ fobj.dose_unit_type }}" value="{{ fobj.dose_unit_value }}"{% if fobj.dose_unit_abbrev %} abbrev="{{ fobj.dose_unit_abbrev }}"{% endif %}{% endif %}>{{ fobj.dose_unit }}</unit>
+    {% endif %}
+  </dose>
+  {% if fobj.instructions %}
+  <instructions>{{ fobj.instructions }}</instructions>
+  {% endif %}
+</MedicationScheduleItem>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/templates/reports/medicationschedule.xml indivo_server/indivo/templates/reports/medicationschedule.xml
--- fyoung-indivo_server_1_0-3f85dc7/indivo/templates/reports/medicationschedule.xml	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/templates/reports/medicationschedule.xml	2012-04-20 17:49:32.000000000 -0400
@@ -0,0 +1,35 @@
+{% load template_utils %}
+<MedicationSchedule xmlns="http://indivo.org/vocab/xml/documents#">
+  <name{% if fobj.name_type %} type="{{ fobj.name_type }}" value="{{ fobj.name_value }}"{% if fobj.name_abbrev %} abbrev="{{ fobj.name_abbrev }}"{% endif %}{% endif %}>{{ fobj.name }}</name>
+  <scheduledBy>{{ fobj.scheduled_by }}</scheduledBy>
+  <dateScheduled>{{ fobj.date_scheduled|format_iso8601_datetime }}</dateScheduled>
+  <dateStart>{{ fobj.date_start|format_iso8601_datetime }}</dateStart>
+  {% if fobj.date_end %}
+  <dateEnd>{{ fobj.date_end|format_iso8601_datetime }}</dateEnd>
+  {% endif %}
+  {% if fobj.recurrenceRule_frequency %}
+  <recurrenceRule>
+    <frequency{% if fobj.recurrenceRule_frequency_type %} type="{{ fobj.recurrenceRule_frequency_type }}" value="{{ fobj.recurrenceRule_frequency_value }}"{% if fobj.recurrenceRule_frequency_abbrev %} abbrev="{{ fobj.recurrenceRule_frequency_abbrev }}"{% endif %}{% endif %}>{{ fobj.recurrenceRule_frequency }}</frequency>
+    {% if fobj.recurrenceRule_interval %}
+    <interval{% if fobj.recurrenceRule_interval_type %} type="{{ fobj.recurrenceRule_interval_type }}" value="{{ fobj.recurrenceRule_interval_value }}"{% if fobj.recurrenceRule_frequency_abbrev %} abbrev="{{ fobj.recurrenceRule_interval_abbrev }}"{% endif %}{% endif %}>{{ fobj.recurrenceRule_interval }}</interval>
+    {% endif %}
+    {% if fobj.recurrenceRule_count %}
+    <count>{{ fobj.recurrenceRule_count }}</count>
+    {% endif %}
+  </recurrenceRule>
+  {% endif %}
+  <dose>
+    {% if fobj.dose_value %}
+    <value>{{ fobj.dose_value }}</value>
+    {% endif %}
+    {% if fobj.dose_textvalue %}
+    <textValue>{{ fobj.dose_textvalue }}</textValue>
+    {% endif %}
+    {% if fobj.dose_unit %}
+    <unit{% if fobj.dose_unit_type %} type="{{ fobj.dose_unit_type }}" value="{{ fobj.dose_unit_value }}"{% if fobj.dose_unit_abbrev %} abbrev="{{ fobj.dose_unit_abbrev }}"{% endif %}{% endif %}>{{ fobj.dose_unit }}</unit>
+    {% endif %}
+  </dose>
+  {% if fobj.instructions %}
+  <instructions>{{ fobj.instructions }}</instructions>
+  {% endif %}
+</MedicationSchedule>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/templates/reports/report.xml indivo_server/indivo/templates/reports/report.xml
--- fyoung-indivo_server_1_0-3f85dc7/indivo/templates/reports/report.xml	2012-02-27 12:31:32.000000000 -0500
+++ indivo_server/indivo/templates/reports/report.xml	2012-02-28 16:56:45.000000000 -0500
@@ -15,7 +15,8 @@
 {% block report %}
 {% for fobj in fobjs %}
 <Report>
-  <Meta>{% with fobj.document as doc %}{% include "document.xml" %}{% endwith %}</Meta>
+  {% comment %}<Meta>{% with fobj.document as doc %}{% include "document.xml" %}{% endwith %}</Meta>{% endcomment %}
+  <Meta>{{ fobj.document_id|get_doc_obj_rels }}</Meta>
   <Item>
     {% include item_template %}
   </Item>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/templates/reports/videomessage.xml indivo_server/indivo/templates/reports/videomessage.xml
--- fyoung-indivo_server_1_0-3f85dc7/indivo/templates/reports/videomessage.xml	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/templates/reports/videomessage.xml	2012-02-21 07:36:45.000000000 -0500
@@ -0,0 +1,8 @@
+{% load template_utils %}<VideoMessage xmlns="http://indivo.org/vocab/xml/documents#">
+  <fileId>{{ fobj.file_id }}</fileId>
+  <storageType>{{ fobj.storage_type }}</storageType>
+  <subject>{{ fobj.subject }}</subject>
+  <from>{{ fobj.from_str }}</from>
+  <dateRecorded>{{ fobj.date_recorded|format_iso8601_datetime }}</dateRecorded>
+  <dateSent>{{ fobj.date_sent|format_iso8601_datetime }}</dateSent>
+</VideoMessage>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/templates/reports/vital.xml indivo_server/indivo/templates/reports/vital.xml
--- fyoung-indivo_server_1_0-3f85dc7/indivo/templates/reports/vital.xml	2012-02-27 12:31:32.000000000 -0500
+++ indivo_server/indivo/templates/reports/vital.xml	2012-02-21 07:36:45.000000000 -0500
@@ -1,22 +1,32 @@
 {% load template_utils %}<VitalSign xmlns="http://indivo.org/vocab/xml/documents#">
-  {% if fobj.date_measured %}
-  <dateMeasured>{{ fobj.date_measured|format_iso8601_datetime }}</dateMeasured>
-  {% endif %}
-  {% if fobj.name %}
   <name{% if fobj.name_type %} type="{{ fobj.name_type }}" value="{{ fobj.name_value }}"{% if fobj.name_abbrev %} abbrev="{{ fobj.name_abbrev }}"{% endif %}{% endif %}>{{ fobj.name }}</name>
+  {% if fobj.measured_by %}
+  <measuredBy>{{ fobj.measured_by }}</measuredBy>
   {% endif %}
-  {% if fobj.value %}
-  <value>{{ fobj.value }}</value>
-  {% endif %}
-  {% if fobj.unit %}
-  <unit{% if fobj.unit_type %} type="{{ fobj.unit_type }}" value="{{ fobj.unit_value }}"{% if fobj.unit_abbrev %} abbrev="{{ fobj.unit_abbrev }}"{% endif %}{% endif %}>{{ fobj.unit }}</unit>
-  {% endif %}
+  <dateMeasuredStart>{{ fobj.date_measured_start|format_iso8601_datetime }}</dateMeasuredStart>
+  {% if fobj.date_measured_end %}
+  <dateMeasuredEnd>{{ fobj.date_measured_end|format_iso8601_datetime }}</dateMeasuredEnd>
+  {% endif %}
+  <result>
+    {% if fobj.result_value %}
+    <value>{{ fobj.result_value }}</value>
+    {% endif %}
+    {% if fobj.result_textvalue %}
+    <textValue>{{ fobj.result_textvalue }}</textValue>
+    {% endif %}
+    {% if fobj.result_unit %}
+    <unit{% if fobj.result_unit_type %} type="{{ fobj.result_unit_type }}" value="{{ fobj.result_unit_value }}"{% if fobj.result_unit_abbrev %} abbrev="{{ fobj.result_unit_abbrev }}"{% endif %}{% endif %}>{{ fobj.result_unit }}</unit>
+    {% endif %}
+  </result>
   {% if fobj.site %}
   <site>{{ fobj.site }}</site>
   {% endif %}
   {% if fobj.position %}
   <position>{{ fobj.position }}</position>
   {% endif %}
+  {% if fobj.technique %}
+  <technique>{{ fobj.technique }}</technique>
+  {% endif %}
   {% if fobj.comments %}
   <comments>{{ fobj.comments }}</comments>
   {% endif %}
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/templatetags/template_utils.py indivo_server/indivo/templatetags/template_utils.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/templatetags/template_utils.py	2012-02-27 12:31:32.000000000 -0500
+++ indivo_server/indivo/templatetags/template_utils.py	2012-03-02 14:22:28.000000000 -0500
@@ -5,7 +5,8 @@
 from django.template.defaultfilters import stringfilter
 from indivo.models import Document
 from indivo.lib import iso8601
-from indivo.views.documents.document import _set_doc_latest, _get_doc_relations
+from indivo.views.base import *
+from indivo.views.documents.document import _set_doc_latest, _get_doc_relations, _get_document
 
 register = template.Library()
 
@@ -35,6 +36,18 @@
     return ""
 get_doc_obj.is_safe = True
 
+@register.filter
+@stringfilter
+def get_doc_obj_rels(doc_id):
+  #print doc_id
+  try:
+    document = Document.objects.get(id=doc_id)
+    document.relates_to, document.is_related_from = _get_doc_relations(document)
+    return loader.get_template('document.xml').render(Context({'doc':document}))
+  except Exception, e:
+    return "Exception: " + str(e)
+get_doc_obj_rels.is_safe = True
+
 # this is definitely not a string filter, it should be a real timestamp
 @register.filter
 def format_iso8601_datetime(timestamp):
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/tests/api/records_tests.py indivo_server/indivo/tests/api/records_tests.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/tests/api/records_tests.py	2012-02-27 12:31:32.000000000 -0500
+++ indivo_server/indivo/tests/api/records_tests.py	2012-02-28 14:16:41.000000000 -0500
@@ -12,6 +12,123 @@
 STATUS = {'status':'void', 'reason':'because I CAN'}
 LAB_CODE = 'HBA1C' # MAKE SURE TO ADD THESE MEASUREMENTS
 
+SHOW_CUSTOM_DOC_REPORTS = False # set to True to display reports for all custom document types
+
+ADHERENCEITEM_DOC1 = """<AdherenceItem xmlns="http://indivo.org/vocab/xml/documents#">
+	<name>Atorvastatin 40 MG Oral Tablet [Lipitor]</name>
+	<reportedBy>rpoole@records.media.mit.edu</reportedBy>
+	<dateReported>2009-05-17T08:52:21-04:00</dateReported>
+	<recurrenceIndex>0</recurrenceIndex>
+	<adherence>true</adherence>
+</AdherenceItem>"""
+
+ADHERENCEITEM_DOC2 = """<AdherenceItem xmlns="http://indivo.org/vocab/xml/documents#">
+	<name>Fish Oil Capsules</name>
+	<reportedBy>rpoole@records.media.mit.edu</reportedBy>
+	<dateReported>2009-05-17T08:52:21-04:00</dateReported>
+	<recurrenceIndex>0</recurrenceIndex>
+	<adherence>true</adherence>
+</AdherenceItem>"""
+
+EQUIPMENTSCHEDULEITEM_DOC = """<EquipmentScheduleItem xmlns="http://indivo.org/vocab/xml/documents#">
+	<name> FORA D15b </name>
+<scheduledBy>jking@records.media.mit.edu</scheduledBy>
+	<dateScheduled>2011-02-14T13:00:00-04:00</dateScheduled>
+	<dateStart>2011-02-15T10:00:00-04:00</dateStart>
+<dateEnd>2011-02-15T14:00:00-04:00</dateEnd>
+	<recurrenceRule>
+		<frequency>DAILY</frequency>
+		<count>30</count>
+	</recurrenceRule>
+	<instructions>press the big blue button</instructions>
+</EquipmentScheduleItem>"""
+
+MEDICATIONADMINISTRATION_DOC = """<MedicationAdministration xmlns="http://indivo.org/vocab/xml/documents#">
+	<name type="http://rxnav.nlm.nih.gov/REST/rxcui/" value="617320">Atorvastatin 40 MG Oral Tablet [Lipitor]</name>
+	<reportedBy>rpoole@records.media.mit.edu</reportedBy>
+	<dateReported>2009-05-17T08:52:21-04:00</dateReported>
+	<dateAdministered>2009-05-17T08:52:21-04:00</dateAdministered>
+    <amountAdministered>
+        <value>1</value>
+        <textValue>placebo</textValue>
+	    <unit>tablet</unit>
+    </amountAdministered>
+    <amountRemaining>
+        <value>29</value>
+	    <unit>tablet</unit>
+    </amountRemaining>
+</MedicationAdministration>"""
+
+MEDICATIONFILL_DOC = """<MedicationFill xmlns="http://indivo.org/vocab/xml/documents#">
+	<name type="http://rxnav.nlm.nih.gov/REST/rxcui/" value="617320">Atorvastatin 40 MG Oral Tablet [Lipitor]</name>
+	<filledBy>pharmacist@records.media.mit.edu</filledBy>
+	<dateFilled>2009-05-16T14:02:51-04:00</dateFilled>
+	<amountFilled>
+		<value>30</value>
+        <textValue>placebo</textValue>
+		<unit>tablet</unit>
+</amountFilled>
+	<ndc>65427004730</ndc>
+    <fillSequenceNumber>000234587</fillSequenceNumber>
+    <lotNumber>0855020</lotNumber>
+    <instructions>take with water</instructions>
+</MedicationFill>"""
+
+MEDICATIONORDER_DOC = """<MedicationOrder xmlns="http://indivo.org/vocab/xml/documents#">
+	<name type="http://rxnav.nlm.nih.gov/REST/rxcui/" value="310798">Hydrochlorothiazide 25 MG Oral Tablet</name>
+	<orderType>prescribed</orderType>
+	<orderedBy>jking@records.media.mit.edu </orderedBy>
+	<dateOrdered>2011-02-14T09:00:00-04:00</dateOrdered>
+	<dateExpires>2011-05-14T09:00:00-04:00</dateExpires>
+	<indication>hypertension</indication>
+	<amountOrdered>
+		<value>30</value>
+        <textValue>placebo</textValue>
+		<unit  type="http://indivo.org/codes/units#" value="tab" abbrev="tab">tablet</unit>
+	</amountOrdered>
+	<substitutionPermitted>true</substitutionPermitted>
+	<instructions>take with water</instructions>
+</MedicationOrder>"""
+
+MEDICATIONSCHEDULEITEM_DOC = """<MedicationScheduleItem xmlns="http://indivo.org/vocab/xml/documents#">
+	<name type="http://rxnav.nlm.nih.gov/REST/rxcui/" value="617320">Atorvastatin 40 MG Oral Tablet [Lipitor]</name>
+<scheduledBy>jking@records.media.mit.edu</scheduledBy>
+	<dateScheduled>2011-02-14T13:00:00-04:00</dateScheduled>
+	<dateStart>2011-02-15T10:00:00-04:00</dateStart>
+<dateEnd>2011-02-15T14:00:00-04:00</dateEnd>
+	<recurrenceRule>
+		<frequency>DAILY</frequency>
+		<count>30</count>
+	</recurrenceRule>
+	<dose>
+		<value>1</value>
+        <textValue>placebo</textValue>
+		<unit  type="http://indivo.org/codes/units#" value="tab" abbrev="tab">tablet</unit>
+	</dose>
+	<instructions>take in the evening for maximum benefit</instructions>
+</MedicationScheduleItem>"""
+
+VIDEOMESSAGE_DOC = """<VideoMessage xmlns="http://indivo.org/vocab/xml/documents#">
+	<fileId>rpoole1</fileId>
+	<storageType>FlashMediaServer</storageType>
+<subject>Nice Job Robert</subject>
+	<from>jking@records.media.mit.edu</from>
+	<dateRecorded>2009-05-17T08:52:21-04:00</dateRecorded>
+	<dateSent>2009-05-17T08:52:21-04:00</dateSent>
+</VideoMessage>"""
+
+VITALS_DOC = """<VitalSign xmlns="http://indivo.org/vocab/xml/documents#">
+	<name type="http://codes.indivo.org/vitalsigns/" value="123" abbrev="BPsys">Blood Pressure Systolic</name>
+	<measuredBy>rpoole@records.media.mit.edu</measuredBy>
+  	<dateMeasuredStart>2009-05-16T15:23:21-04:00</dateMeasuredStart>
+  	<result>
+  		<value>145</value>
+        <textValue>placebo</textValue>
+  		<unit type="http://codes.indivo.org/units/" value="31" abbrev="mmHg">millimeters of mercury</unit>
+	</result>
+  	<site>left arm</site>
+  	<position>sitting</position>
+</VitalSign>"""
 
 def recordStateSetUp(test_cases_instance):
     _self = test_cases_instance
@@ -793,3 +910,184 @@
     def test_get_record_vitals_by_category(self):
         # NOT IMPLEMENTED YET
         pass
+
+    ####################################################
+    # now come the tests for the custom document types #
+    ####################################################
+
+    def test_adherenceitem(self):
+        # create a document
+        record_id = self.record.id
+        url = '/records/%s/documents/'%(record_id)
+        response = self.client.post(url, data=ADHERENCEITEM_DOC1, content_type='text/xml')
+        #print response.content
+        self.assertEquals(response.status_code, 200)
+
+        # get a report containing the document above
+        url = '/records/%s/reports/minimal/adherenceitems/'%(record_id)
+        response = self.client.get(url)
+        if SHOW_CUSTOM_DOC_REPORTS:
+            print response.content
+        self.assertEquals(response.status_code, 200)
+
+    def test_equipmentscheduleitem(self):
+        """ This unit test also tests document relationships """
+        #
+        # create the EquipmentScheduleItem document
+        #
+        record_id = self.record.id
+        url = '/records/%s/documents/'%(record_id)
+        response = self.client.post(url, data=EQUIPMENTSCHEDULEITEM_DOC, content_type='text/xml')
+        #print response.content
+        esi_doc_id = response.content[14:50]
+        #print esi_doc_id
+        self.assertEquals(response.status_code, 200)
+
+        #
+        # now create 2 AdherenceItem documents
+        #
+        url = '/records/%s/documents/'%(record_id)
+        response = self.client.post(url, data=ADHERENCEITEM_DOC1, content_type='text/xml')
+        #print response.content
+        ai_doc_id_1 = response.content[14:50]
+        #print ai_doc_id_1
+        self.assertEquals(response.status_code, 200)
+
+        url = '/records/%s/documents/'%(record_id)
+        response = self.client.post(url, data=ADHERENCEITEM_DOC2, content_type='text/xml')
+        #print response.content
+        ai_doc_id_2 = response.content[14:50]
+        #print ai_doc_id_2
+        self.assertEquals(response.status_code, 200)
+
+        #
+        # now relate the AdherenceItem documents created above with the EquipmentScheduleItem document
+        #
+        rel = "annotation"
+
+        url = '/records/%s/documents/%s/rels/%s/%s'%(record_id, esi_doc_id, rel, ai_doc_id_1)
+        response = self.client.put(url)
+        #print response.content
+        self.assertEquals(response.status_code, 200)
+
+        url = '/records/%s/documents/%s/rels/%s/%s'%(record_id, esi_doc_id, rel, ai_doc_id_2)
+        response = self.client.put(url)
+        #print response.content
+        self.assertEquals(response.status_code, 200)
+
+        #
+        # create a Vitals document to relate EquipmentScheduleItem to
+        #
+        record_id = self.record.id
+        url = '/records/%s/documents/'%(record_id)
+        response = self.client.post(url, data=VITALS_DOC, content_type='text/xml')
+        #print response.content
+        v_doc_id = response.content[14:50]
+        #print v_doc_id
+        self.assertEquals(response.status_code, 200)
+
+        rel = "followup"
+
+        url = '/records/%s/documents/%s/rels/%s/%s'%(record_id, v_doc_id, rel, esi_doc_id)
+        response = self.client.put(url)
+        #print response.content
+        self.assertEquals(response.status_code, 200)
+
+        #
+        # finally get a report containing the EquipmentScheduleItem document and relating documents
+        #
+        url = '/records/%s/reports/minimal/equipmentscheduleitems/'%(record_id)
+        response = self.client.get(url)
+        if SHOW_CUSTOM_DOC_REPORTS:
+            print response.content
+        self.assertEquals(response.status_code, 200)
+
+    def test_medicationadministration(self):
+        # create a document
+        record_id = self.record.id
+        url = '/records/%s/documents/'%(record_id)
+        response = self.client.post(url, data=MEDICATIONADMINISTRATION_DOC, content_type='text/xml')
+        #print response.content
+        self.assertEquals(response.status_code, 200)
+
+        # get a report containing the document above
+        url = '/records/%s/reports/minimal/medicationadministrations/'%(record_id)
+        response = self.client.get(url)
+        if SHOW_CUSTOM_DOC_REPORTS:
+            print response.content
+        self.assertEquals(response.status_code, 200)
+
+    def test_medicationfill(self):
+        # create a document
+        record_id = self.record.id
+        url = '/records/%s/documents/'%(record_id)
+        response = self.client.post(url, data=MEDICATIONFILL_DOC, content_type='text/xml')
+        #print response.content
+        self.assertEquals(response.status_code, 200)
+
+        # get a report containing the document above
+        url = '/records/%s/reports/minimal/medicationfills/'%(record_id)
+        response = self.client.get(url)
+        if SHOW_CUSTOM_DOC_REPORTS:
+            print response.content
+        self.assertEquals(response.status_code, 200)
+
+    def test_medicationorder(self):
+        # create a document
+        record_id = self.record.id
+        url = '/records/%s/documents/'%(record_id)
+        response = self.client.post(url, data=MEDICATIONORDER_DOC, content_type='text/xml')
+        #print response.content
+        self.assertEquals(response.status_code, 200)
+
+        # get a report containing the document above
+        url = '/records/%s/reports/minimal/medicationorders/'%(record_id)
+        response = self.client.get(url)
+        if SHOW_CUSTOM_DOC_REPORTS:
+            print response.content
+        self.assertEquals(response.status_code, 200)
+
+    def test_medicationscheduleitem(self):
+        # create a document
+        record_id = self.record.id
+        url = '/records/%s/documents/'%(record_id)
+        response = self.client.post(url, data=MEDICATIONSCHEDULEITEM_DOC, content_type='text/xml')
+        #print response.content
+        self.assertEquals(response.status_code, 200)
+
+        # get a report containing the document above
+        url = '/records/%s/reports/minimal/medicationscheduleitems/'%(record_id)
+        response = self.client.get(url)
+        if SHOW_CUSTOM_DOC_REPORTS:
+            print response.content
+        self.assertEquals(response.status_code, 200)
+
+    def test_videomessage(self):
+        # create a document
+        record_id = self.record.id
+        url = '/records/%s/documents/'%(record_id)
+        response = self.client.post(url, data=VIDEOMESSAGE_DOC, content_type='text/xml')
+        #print response.content
+        self.assertEquals(response.status_code, 200)
+
+        # get a report containing the document above
+        url = '/records/%s/reports/minimal/videomessages/'%(record_id)
+        response = self.client.get(url)
+        if SHOW_CUSTOM_DOC_REPORTS:
+            print response.content
+        self.assertEquals(response.status_code, 200)
+
+    def test_vitals(self):
+        # create a document
+        record_id = self.record.id
+        url = '/records/%s/documents/'%(record_id)
+        response = self.client.post(url, data=VITALS_DOC, content_type='text/xml')
+        #print response.content
+        self.assertEquals(response.status_code, 200)
+
+        # get a report containing the document above
+        url = '/records/%s/reports/minimal/vitals/'%(record_id)
+        response = self.client.get(url)
+        if SHOW_CUSTOM_DOC_REPORTS:
+            print response.content
+        self.assertEquals(response.status_code, 200)
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/tests/api/reporting_tests.py indivo_server/indivo/tests/api/reporting_tests.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/tests/api/reporting_tests.py	2012-02-27 12:31:32.000000000 -0500
+++ indivo_server/indivo/tests/api/reporting_tests.py	2012-02-28 15:50:09.000000000 -0500
@@ -29,17 +29,17 @@
 
     def test_get_vitals(self):
         record_id = self.record.id
-        url = '/records/%s/reports/minimal/vitals/?group_by=category&aggregate_by=min*value&date_range=date_measured*2005-03-10T00:00:00Z*'%(record_id)
-        bad_methods = ['put', 'post', 'delete']
-        self.check_unsupported_http_methods(bad_methods, url)
-        response = self.client.get(url)
-        self.assertEquals(response.status_code, 200)
+        #url = '/records/%s/reports/minimal/vitals/?group_by=category&aggregate_by=min*value&date_range=date_measured*2005-03-10T00:00:00Z*'%(record_id)
+        #bad_methods = ['put', 'post', 'delete']
+        #self.check_unsupported_http_methods(bad_methods, url)
+        #response = self.client.get(url)
+        #self.assertEquals(response.status_code, 200)
 
-        url2 = '/records/%s/reports/minimal/vitals/weight%%20test/?category=Blood%%20Pressure%%20Systolic&date_group=date_measured*month&aggregate_by=sum*value&order_by=date_measured'%(record_id)
-        response = self.client.get(url2)
-        self.assertEquals(response.status_code, 200)
+        #url2 = '/records/%s/reports/minimal/vitals/weight%%20test/?category=Blood%%20Pressure%%20Systolic&date_group=date_measured*month&aggregate_by=sum*value&order_by=date_measured'%(record_id)
+        #response = self.client.get(url2)
+        #self.assertEquals(response.status_code, 200)
 
-        url3 = '/records/%s/reports/minimal/vitals/?order_by=-created_at&date_measured=2009-05-16T15:23:21Z'%(record_id)
+        url3 = '/records/%s/reports/minimal/vitals/?order_by=-created_at&date_measured_start=2009-05-16T15:23:21Z'%(record_id)
         response = self.client.get(url3)
         self.assertEquals(response.status_code, 200)
 
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/tests/client/lib/api.py indivo_server/indivo/tests/client/lib/api.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/tests/client/lib/api.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/tests/client/lib/api.py	2012-02-28 14:09:59.000000000 -0500
@@ -0,0 +1,1494 @@
+################################################################################
+#DO NOT WRITE TO THIS FILE
+#THIS FILE WAS AUTOMATICALLY GENERATED ON TUESDAY 02/28/2012 AT 19:09:59
+################################################################################
+import inspect
+class API:
+
+
+	def __init__(self, utils_obj):
+		self.utils_obj = utils_obj
+		self.call_count = 0
+
+	def call(self, *args):
+		if hasattr(self, inspect.stack()[1][3]):
+			count = 1
+			kwargs = {}
+			method = getattr(self, inspect.stack()[1][3])
+			method_arguments = inspect.getargspec(method)[0]
+			for arg in args:
+				kwargs[method_arguments[count]] = arg
+				count += 1
+			self.call_count += 1
+			return method(**kwargs)
+		else:
+			return False
+
+	def post_access_token(self, app_info, data=None, debug=False): 
+		return self.utils_obj.get_response('post_access_token', 
+					'post', 
+					'/oauth/access_token', 
+					[], 
+					app_info, 
+					data, 
+					debug=debug)
+
+
+	def post_document(self, app_info, record_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('post_document', 
+					'post', 
+					'/records/{RECORD_ID}/documents/', 
+					[u'Document', u'id'], 
+					app_info, 
+					data, 
+					record_id=record_id, debug=debug)
+
+
+	def post_document_ext(self, app_info, record_id='', app_id='', external_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('post_document_ext', 
+					'put', 
+					'/records/{RECORD_ID}/documents/external/{APP_ID}/{EXTERNAL_ID}', 
+					[u'Document', u'id'], 
+					app_info, 
+					data, 
+					record_id=record_id, app_id=app_id, external_id=external_id, debug=debug)
+
+
+	def account_inbox(self, app_info, account_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('account_inbox', 
+					'get', 
+					'/accounts/{ACCOUNT_ID}/inbox/', 
+					[], 
+					app_info, 
+					data, 
+					account_id=account_id, debug=debug)
+
+
+	def account_inbox_message(self, app_info, account_id='', message_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('account_inbox_message', 
+					'get', 
+					'/accounts/{ACCOUNT_ID}/inbox/{MESSAGE_ID}', 
+					[], 
+					app_info, 
+					data, 
+					account_id=account_id, message_id=message_id, debug=debug)
+
+
+	def account_message_archive(self, app_info, account_id='', message_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('account_message_archive', 
+					'post', 
+					'/accounts/{ACCOUNT_ID}/inbox/{MESSAGE_ID}/archive', 
+					[], 
+					app_info, 
+					data, 
+					account_id=account_id, message_id=message_id, debug=debug)
+
+
+	def account_inbox_message_attachment_accept(self, app_info, account_id='', message_id='', attachment_num='', data=None, debug=False): 
+		return self.utils_obj.get_response('account_inbox_message_attachment_accept', 
+					'post', 
+					'/accounts/{ACCOUNT_ID}/inbox/{MESSAGE_ID}/attachments/{ATTACHMENT_NUM}/accept', 
+					[], 
+					app_info, 
+					data, 
+					account_id=account_id, message_id=message_id, attachment_num=attachment_num, debug=debug)
+
+
+	def account_notifications(self, app_info, account_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('account_notifications', 
+					'get', 
+					'/accounts/{ACCOUNT_ID}/notifications/', 
+					[], 
+					app_info, 
+					data, 
+					account_id=account_id, debug=debug)
+
+
+	def message_account(self, app_info, account_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('message_account', 
+					'post', 
+					'/accounts/{ACCOUNT_ID}/inbox/', 
+					[], 
+					app_info, 
+					data, 
+					account_id=account_id, debug=debug)
+
+
+	def get_recapp_documents(self, app_info, record_id='', app_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('get_recapp_documents', 
+					'get', 
+					'/records/{RECORD_ID}/apps/{APP_ID}/documents/', 
+					[u'Documents', u'record_id', u'Document', u'id'], 
+					app_info, 
+					data, 
+					record_id=record_id, app_id=app_id, debug=debug)
+
+
+	def create_session(self, app_info, data=None, debug=False): 
+		return self.utils_obj.get_response('create_session', 
+					'post', 
+					'/oauth/internal/session_create', 
+					[], 
+					app_info, 
+					data, 
+					debug=debug)
+
+
+	def account_search(self, app_info, parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('account_search', 
+					'get', 
+					'/accounts/search?{PARAMETERS}', 
+					[], 
+					app_info, 
+					data, 
+					parameters=parameters, debug=debug)
+
+
+	def account_forgot_password(self, app_info, account_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('account_forgot_password', 
+					'post', 
+					'/accounts/{ACCOUNT_ID}/forgot-password', 
+					[], 
+					app_info, 
+					data, 
+					account_id=account_id, debug=debug)
+
+
+	def account_info(self, app_info, account_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('account_info', 
+					'get', 
+					'/accounts/{ACCOUNT_ID}', 
+					[], 
+					app_info, 
+					data, 
+					account_id=account_id, debug=debug)
+
+
+	def account_primary_secret(self, app_info, account_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('account_primary_secret', 
+					'get', 
+					'/accounts/{ACCOUNT_ID}/primary-secret', 
+					[], 
+					app_info, 
+					data, 
+					account_id=account_id, debug=debug)
+
+
+	def add_auth_system(self, app_info, account_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('add_auth_system', 
+					'post', 
+					'/accounts/{ACCOUNT_ID}/authsystems/', 
+					[], 
+					app_info, 
+					data, 
+					account_id=account_id, debug=debug)
+
+
+	def account_set_password(self, app_info, account_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('account_set_password', 
+					'post', 
+					'/accounts/{ACCOUNT_ID}/authsystems/password/set', 
+					[], 
+					app_info, 
+					data, 
+					account_id=account_id, debug=debug)
+
+
+	def account_change_password(self, app_info, account_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('account_change_password', 
+					'post', 
+					'/accounts/{ACCOUNT_ID}/authsystems/password/change', 
+					[], 
+					app_info, 
+					data, 
+					account_id=account_id, debug=debug)
+
+
+	def account_initialize(self, app_info, account_id='', primary_secret='', data=None, debug=False): 
+		return self.utils_obj.get_response('account_initialize', 
+					'post', 
+					'/accounts/{ACCOUNT_ID}/initialize/{PRIMARY_SECRET}', 
+					[], 
+					app_info, 
+					data, 
+					account_id=account_id, primary_secret=primary_secret, debug=debug)
+
+
+	def account_reset(self, app_info, account_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('account_reset', 
+					'post', 
+					'/accounts/{ACCOUNT_ID}/reset', 
+					[], 
+					app_info, 
+					data, 
+					account_id=account_id, debug=debug)
+
+
+	def account_username_set(self, app_info, account_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('account_username_set', 
+					'post', 
+					'/accounts/{ACCOUNT_ID}/authsystems/password/set-username', 
+					[], 
+					app_info, 
+					data, 
+					account_id=account_id, debug=debug)
+
+
+	def account_info_set(self, app_info, account_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('account_info_set', 
+					'post', 
+					'/accounts/{ACCOUNT_ID}/info-set', 
+					[], 
+					app_info, 
+					data, 
+					account_id=account_id, debug=debug)
+
+
+	def account_set_state(self, app_info, account_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('account_set_state', 
+					'post', 
+					'/accounts/{ACCOUNT_ID}/set-state', 
+					[], 
+					app_info, 
+					data, 
+					account_id=account_id, debug=debug)
+
+
+	def account_secret_resend(self, app_info, account_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('account_secret_resend', 
+					'post', 
+					'/accounts/{ACCOUNT_ID}/secret-resend', 
+					[], 
+					app_info, 
+					data, 
+					account_id=account_id, debug=debug)
+
+
+	def check_account_secrets(self, app_info, account_id='', primary_secret='', parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('check_account_secrets', 
+					'get', 
+					'/accounts/{ACCOUNT_ID}/check-secrets/{PRIMARY_SECRET}?{PARAMETERS}', 
+					[], 
+					app_info, 
+					data, 
+					account_id=account_id, primary_secret=primary_secret, parameters=parameters, debug=debug)
+
+
+	def read_record(self, app_info, record_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_record', 
+					'get', 
+					'/records/{RECORD_ID}', 
+					[u'Record', u'id'], 
+					app_info, 
+					data, 
+					record_id=record_id, debug=debug)
+
+
+	def replace_document(self, app_info, record_id='', document_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('replace_document', 
+					'post', 
+					'/records/{RECORD_ID}/documents/{DOCUMENT_ID}/replace', 
+					[u'Document', u'id'], 
+					app_info, 
+					data, 
+					record_id=record_id, document_id=document_id, debug=debug)
+
+
+	def read_document_versions(self, app_info, record_id='', document_id='', parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_document_versions', 
+					'get', 
+					'/records/{RECORD_ID}/documents/{DOCUMENT_ID}/versions/?{PARAMETERS}', 
+					[u'Documents', u'record_id', u'Document', u'id'], 
+					app_info, 
+					data, 
+					record_id=record_id, document_id=document_id, parameters=parameters, debug=debug)
+
+
+	def put_document_relate_existing(self, app_info, record_id='', document_id='', rel_type='', other_document_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('put_document_relate_existing', 
+					'put', 
+					'/records/{RECORD_ID}/documents/{DOCUMENT_ID}/rels/{REL_TYPE}/{OTHER_DOCUMENT_ID}', 
+					[u'Documents', u'record_id', u'Document', u'id'], 
+					app_info, 
+					data, 
+					record_id=record_id, document_id=document_id, rel_type=rel_type, other_document_id=other_document_id, debug=debug)
+
+
+	def post_request_token(self, app_info, data=None, debug=False): 
+		return self.utils_obj.get_response('post_request_token', 
+					'post', 
+					'/oauth/request_token', 
+					[], 
+					app_info, 
+					data, 
+					debug=debug)
+
+
+	def claim_request_token(self, app_info, request_token='', data=None, debug=False): 
+		return self.utils_obj.get_response('claim_request_token', 
+					'post', 
+					'/oauth/internal/request_tokens/{REQUEST_TOKEN}/claim', 
+					[], 
+					app_info, 
+					data, 
+					request_token=request_token, debug=debug)
+
+
+	def get_request_token_info(self, app_info, request_token='', data=None, debug=False): 
+		return self.utils_obj.get_response('get_request_token_info', 
+					'get', 
+					'/oauth/internal/request_tokens/{REQUEST_TOKEN}/info', 
+					[], 
+					app_info, 
+					data, 
+					request_token=request_token, debug=debug)
+
+
+	def approve_request_token(self, app_info, request_token='', data=None, debug=False): 
+		return self.utils_obj.get_response('approve_request_token', 
+					'post', 
+					'/oauth/internal/request_tokens/{REQUEST_TOKEN}/approve', 
+					[], 
+					app_info, 
+					data, 
+					request_token=request_token, debug=debug)
+
+
+	def verify_surl(self, app_info, data=None, debug=False): 
+		return self.utils_obj.get_response('verify_surl', 
+					'get', 
+					'/oauth/internal/surl-verify', 
+					[], 
+					app_info, 
+					data, 
+					debug=debug)
+
+
+	def post_recapp_setup(self, app_info, record_id='', app_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('post_recapp_setup', 
+					'post', 
+					'/records/{RECORD_ID}/apps/{APP_ID}/setup', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, app_id=app_id, debug=debug)
+
+
+	def post_recapp_document(self, app_info, record_id='', app_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('post_recapp_document', 
+					'post', 
+					'/records/{RECORD_ID}/apps/{APP_ID}/documents/', 
+					[u'Document', u'id'], 
+					app_info, 
+					data, 
+					record_id=record_id, app_id=app_id, debug=debug)
+
+
+	def read_document_meta(self, app_info, record_id='', document_id='', parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_document_meta', 
+					'get', 
+					'/records/{RECORD_ID}/documents/{DOCUMENT_ID}/meta?{PARAMETERS}', 
+					[u'Document', u'id'], 
+					app_info, 
+					data, 
+					record_id=record_id, document_id=document_id, parameters=parameters, debug=debug)
+
+
+	def put_record_ext(self, app_info, principal_email='', external_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('put_record_ext', 
+					'put', 
+					'/records/external/{PRINCIPAL_EMAIL}/{EXTERNAL_ID}', 
+					[], 
+					app_info, 
+					data, 
+					principal_email=principal_email, external_id=external_id, debug=debug)
+
+
+	def create_record(self, app_info, data=None, debug=False): 
+		return self.utils_obj.get_response('create_record', 
+					'post', 
+					'/records/', 
+					[u'Record', u'id', u'demographics', u'document_id'], 
+					app_info, 
+					data, 
+					debug=debug)
+
+
+	def put_recapp_document_ext(self, app_info, record_id='', app_id='', external_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('put_recapp_document_ext', 
+					'put', 
+					'/records/{RECORD_ID}/apps/{APP_ID}/documents/external/{EXTERNAL_ID}', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, app_id=app_id, external_id=external_id, debug=debug)
+
+
+	def create_account(self, app_info, data=None, debug=False): 
+		return self.utils_obj.get_response('create_account', 
+					'post', 
+					'/accounts/', 
+					[u'Account', u'id'], 
+					app_info, 
+					data, 
+					debug=debug)
+
+
+	def get_document_relate(self, app_info, record_id='', document_id='', rel_type='', data=None, debug=False): 
+		return self.utils_obj.get_response('get_document_relate', 
+					'get', 
+					'/records/{RECORD_ID}/documents/{DOCUMENT_ID}/rels/{REL_TYPE}/', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, document_id=document_id, rel_type=rel_type, debug=debug)
+
+
+	def read_records(self, app_info, account_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_records', 
+					'get', 
+					'/accounts/{ACCOUNT_ID}/records/', 
+					[u'Record', u'id'], 
+					app_info, 
+					data, 
+					account_id=account_id, debug=debug)
+
+
+	def put_document_relate_ext(self, app_info, record_id='', document_id='', rel_type='', app_id='', external_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('put_document_relate_ext', 
+					'put', 
+					'/records/{RECORD_ID}/documents/{DOCUMENT_ID}/rels/{REL_TYPE}/external/{APP_ID}/{EXTERNAL_ID}', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, document_id=document_id, rel_type=rel_type, app_id=app_id, external_id=external_id, debug=debug)
+
+
+	def setup_app(self, app_info, record_id='', app_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('setup_app', 
+					'post', 
+					'/records/{RECORD_ID}/apps/{APP_ID}/setup', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, app_id=app_id, debug=debug)
+
+
+	def create_share(self, app_info, record_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('create_share', 
+					'post', 
+					'/records/{RECORD_ID}/shares/', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, debug=debug)
+
+
+	def get_shares(self, app_info, record_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('get_shares', 
+					'get', 
+					'/records/{RECORD_ID}/shares/', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, debug=debug)
+
+
+	def delete_share(self, app_info, record_id='', account_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('delete_share', 
+					'delete', 
+					'/records/{RECORD_ID}/shares/{ACCOUNT_ID}', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, account_id=account_id, debug=debug)
+
+
+	def get_account_permissions(self, app_info, account_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('get_account_permissions', 
+					'get', 
+					'/accounts/{ACCOUNT_ID}/permissions/', 
+					[], 
+					app_info, 
+					data, 
+					account_id=account_id, debug=debug)
+
+
+	def get_carenet_account_permissions(self, app_info, carenet_id='', account_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('get_carenet_account_permissions', 
+					'get', 
+					'/carenets/{CARENET_ID}/accounts/{ACCOUNT_ID}/permissions', 
+					[], 
+					app_info, 
+					data, 
+					carenet_id=carenet_id, account_id=account_id, debug=debug)
+
+
+	def get_carenet_app_permissions(self, app_info, carenet_id='', app_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('get_carenet_app_permissions', 
+					'get', 
+					'/carenets/{CARENET_ID}/apps/{APP_ID}/permissions', 
+					[], 
+					app_info, 
+					data, 
+					carenet_id=carenet_id, app_id=app_id, debug=debug)
+
+
+	def read_document(self, app_info, record_id='', document_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_document', 
+					'get', 
+					'/records/{RECORD_ID}/documents/{DOCUMENT_ID}', 
+					[u'Document', u'id'], 
+					app_info, 
+					data, 
+					record_id=record_id, document_id=document_id, debug=debug)
+
+
+	def set_document_status(self, app_info, record_id='', document_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('set_document_status', 
+					'post', 
+					'/records/{RECORD_ID}/documents/{DOCUMENT_ID}/set-status', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, document_id=document_id, debug=debug)
+
+
+	def read_document_status_history(self, app_info, record_id='', document_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_document_status_history', 
+					'get', 
+					'/records/{RECORD_ID}/documents/{DOCUMENT_ID}/status-history', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, document_id=document_id, debug=debug)
+
+
+	def read_carenet_document_meta(self, app_info, carenet_id='', document_id='', parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_carenet_document_meta', 
+					'get', 
+					'/carenets/{CARENET_ID}/documents/{DOCUMENT_ID}/meta?{PARAMETERS}', 
+					[u'Document', u'id'], 
+					app_info, 
+					data, 
+					carenet_id=carenet_id, document_id=document_id, parameters=parameters, debug=debug)
+
+
+	def read_carenet_special_document(self, app_info, carenet_id='', special_document='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_carenet_special_document', 
+					'get', 
+					'/carenets/{CARENET_ID}/documents/special/{SPECIAL_DOCUMENT}', 
+					[], 
+					app_info, 
+					data, 
+					carenet_id=carenet_id, special_document=special_document, debug=debug)
+
+
+	def post_document_label(self, app_info, record_id='', document_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('post_document_label', 
+					'put', 
+					'/records/{RECORD_ID}/documents/{DOCUMENT_ID}/label', 
+					[u'Document', u'id', u'label', u'value'], 
+					app_info, 
+					data, 
+					record_id=record_id, document_id=document_id, debug=debug)
+
+
+	def read_recapp_document_meta(self, app_info, record_id='', app_id='', document_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_recapp_document_meta', 
+					'get', 
+					'/records/{RECORD_ID}/apps/{APP_ID}/documents/{DOCUMENT_ID}/meta', 
+					[u'Document', u'id'], 
+					app_info, 
+					data, 
+					record_id=record_id, app_id=app_id, document_id=document_id, debug=debug)
+
+
+	def put_document_ext_replace(self, app_info, record_id='', document_id='', app_id='', external_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('put_document_ext_replace', 
+					'put', 
+					'/records/{RECORD_ID}/documents/{DOCUMENT_ID}/replace/external/{APP_ID}/{EXTERNAL_ID}', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, document_id=document_id, app_id=app_id, external_id=external_id, debug=debug)
+
+
+	def get_record_owner(self, app_info, record_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('get_record_owner', 
+					'get', 
+					'/records/{RECORD_ID}/owner', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, debug=debug)
+
+
+	def set_record_owner(self, app_info, record_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('set_record_owner', 
+					'put', 
+					'/records/{RECORD_ID}/owner', 
+					[u'Account', u'email'], 
+					app_info, 
+					data, 
+					record_id=record_id, debug=debug)
+
+
+	def put_document_ext_label(self, app_info, record_id='', app_id='', external_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('put_document_ext_label', 
+					'put', 
+					'/records/{RECORD_ID}/documents/external/{APP_ID}/{EXTERNAL_ID}/label', 
+					[u'Document', u'id', u'label', u'value'], 
+					app_info, 
+					data, 
+					record_id=record_id, app_id=app_id, external_id=external_id, debug=debug)
+
+
+	def get_record_apps(self, app_info, record_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('get_record_apps', 
+					'get', 
+					'/records/{RECORD_ID}/apps/', 
+					[u'App', u'id'], 
+					app_info, 
+					data, 
+					record_id=record_id, debug=debug)
+
+
+	def read_document_ext_meta(self, app_info, record_id='', app_id='', external_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_document_ext_meta', 
+					'get', 
+					'/records/{RECORD_ID}/documents/external/{APP_ID}/{EXTERNAL_ID}/meta', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, app_id=app_id, external_id=external_id, debug=debug)
+
+
+	def read_recapp_document_ext_meta(self, app_info, record_id='', app_id='', external_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_recapp_document_ext_meta', 
+					'get', 
+					'/records/{RECORD_ID}/apps/{APP_ID}/documents/external/{EXTERNAL_ID}/meta', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, app_id=app_id, external_id=external_id, debug=debug)
+
+
+	def get_recapp_document(self, app_info, record_id='', app_id='', document_id='', parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('get_recapp_document', 
+					'get', 
+					'/records/{RECORD_ID}/apps/{APP_ID}/documents/{DOCUMENT_ID}?{PARAMETERS}', 
+					[u'Document', u'id'], 
+					app_info, 
+					data, 
+					record_id=record_id, app_id=app_id, document_id=document_id, parameters=parameters, debug=debug)
+
+
+	def get_request_token(self, app_info, data=None, debug=False): 
+		return self.utils_obj.get_response('get_request_token', 
+					'post', 
+					'/oauth/request_token', 
+					[], 
+					app_info, 
+					data, 
+					debug=debug)
+
+
+	def put_message_notification(self, app_info, account_id='', notification_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('put_message_notification', 
+					'put', 
+					'/accounts/{ACCOUNT_ID}/notifications/{NOTIFICATION_ID}', 
+					[], 
+					app_info, 
+					data, 
+					account_id=account_id, notification_id=notification_id, debug=debug)
+
+
+	def record_notify(self, app_info, record_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('record_notify', 
+					'post', 
+					'/records/{RECORD_ID}/notifications/', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, debug=debug)
+
+
+	def post_document_relate_given(self, app_info, record_id='', document_id='', rel_type='', data=None, debug=False): 
+		return self.utils_obj.get_response('post_document_relate_given', 
+					'post', 
+					'/records/{RECORD_ID}/documents/{DOCUMENT_ID}/rels/{REL_TYPE}/', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, document_id=document_id, rel_type=rel_type, debug=debug)
+
+
+	def put_recapp_document_label(self, app_info, record_id='', app_id='', document_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('put_recapp_document_label', 
+					'put', 
+					'/records/{RECORD_ID}/apps/{APP_ID}/documents/{DOCUMENT_ID}/label', 
+					[u'Document', u'id', u'label', u'value'], 
+					app_info, 
+					data, 
+					record_id=record_id, app_id=app_id, document_id=document_id, debug=debug)
+
+
+	def read_documents(self, app_info, record_id='', parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_documents', 
+					'get', 
+					'/records/{RECORD_ID}/documents/?{PARAMETERS}', 
+					[u'Documents', u'', u'Document', u'id'], 
+					app_info, 
+					data, 
+					record_id=record_id, parameters=parameters, debug=debug)
+
+
+	def delete_recapp_document(self, app_info, record_id='', app_id='', document_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('delete_recapp_document', 
+					'delete', 
+					'/records/{RECORD_ID}/apps/{APP_ID}/documents/{DOCUMENT_ID}', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, app_id=app_id, document_id=document_id, debug=debug)
+
+
+	def read_special_document(self, app_info, record_id='', special_document='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_special_document', 
+					'get', 
+					'/records/{RECORD_ID}/documents/special/{SPECIAL_DOCUMENT}', 
+					[u'Document', u'id'], 
+					app_info, 
+					data, 
+					record_id=record_id, special_document=special_document, debug=debug)
+
+
+	def message_record(self, app_info, record_id='', message_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('message_record', 
+					'post', 
+					'/records/{RECORD_ID}/inbox/{MESSAGE_ID}', 
+					[u'Result', u''], 
+					app_info, 
+					data, 
+					record_id=record_id, message_id=message_id, debug=debug)
+
+
+	def message_record_attachment(self, app_info, record_id='', message_id='', attachment_num='', data=None, debug=False): 
+		return self.utils_obj.get_response('message_record_attachment', 
+					'post', 
+					'/records/{RECORD_ID}/inbox/{MESSAGE_ID}/attachments/{ATTACHMENT_NUM}', 
+					[u'Result', u''], 
+					app_info, 
+					data, 
+					record_id=record_id, message_id=message_id, attachment_num=attachment_num, debug=debug)
+
+
+	def put_special_document(self, app_info, record_id='', special_document='', data=None, debug=False): 
+		return self.utils_obj.get_response('put_special_document', 
+					'put', 
+					'/records/{RECORD_ID}/documents/special/{SPECIAL_DOCUMENT}', 
+					[u'Document', u'id'], 
+					app_info, 
+					data, 
+					record_id=record_id, special_document=special_document, debug=debug)
+
+
+	def read_record_audit(self, app_info, record_id='', parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_record_audit', 
+					'get', 
+					'/records/{RECORD_ID}/audits/?{PARAMETERS}', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, parameters=parameters, debug=debug)
+
+
+	def read_document_audit(self, app_info, record_id='', document_id='', parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_document_audit', 
+					'get', 
+					'/records/{RECORD_ID}/audits/documents/{DOCUMENT_ID}/?{PARAMETERS}', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, document_id=document_id, parameters=parameters, debug=debug)
+
+
+	def read_function_audit(self, app_info, record_id='', document_id='', function_name='', parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_function_audit', 
+					'get', 
+					'/records/{RECORD_ID}/audits/documents/{DOCUMENT_ID}/functions/{FUNCTION_NAME}/?{PARAMETERS}', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, document_id=document_id, function_name=function_name, parameters=parameters, debug=debug)
+
+
+	def query_audit(self, app_info, record_id='', parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('query_audit', 
+					'get', 
+					'/records/{RECORD_ID}/audits/query/?{PARAMETERS}', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, parameters=parameters, debug=debug)
+
+
+	def list_apps(self, app_info, data=None, debug=False): 
+		return self.utils_obj.get_response('list_apps', 
+					'get', 
+					'/apps/', 
+					[], 
+					app_info, 
+					data, 
+					debug=debug)
+
+
+	def get_app_info(self, app_info, app_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('get_app_info', 
+					'get', 
+					'/apps/{APP_ID}', 
+					[], 
+					app_info, 
+					data, 
+					app_id=app_id, debug=debug)
+
+
+	def delete_app(self, app_info, app_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('delete_app', 
+					'delete', 
+					'/apps/{APP_ID}', 
+					[], 
+					app_info, 
+					data, 
+					app_id=app_id, debug=debug)
+
+
+	def get_record_app(self, app_info, record_id='', app_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('get_record_app', 
+					'get', 
+					'/records/{RECORD_ID}/apps/{APP_ID}', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, app_id=app_id, debug=debug)
+
+
+	def delete_record_app(self, app_info, record_id='', app_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('delete_record_app', 
+					'delete', 
+					'/records/{RECORD_ID}/apps/{APP_ID}', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, app_id=app_id, debug=debug)
+
+
+	def enable_record_app(self, app_info, record_id='', app_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('enable_record_app', 
+					'put', 
+					'/records/{RECORD_ID}/apps/{APP_ID}', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, app_id=app_id, debug=debug)
+
+
+	def list_app_records(self, app_info, app_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('list_app_records', 
+					'get', 
+					'/apps/{APP_ID}/records/', 
+					[], 
+					app_info, 
+					data, 
+					app_id=app_id, debug=debug)
+
+
+	def get_autonomous_access_token(self, app_info, app_id='', record_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('get_autonomous_access_token', 
+					'post', 
+					'/apps/{APP_ID}/records/{RECORD_ID}/access_token', 
+					[], 
+					app_info, 
+					data, 
+					app_id=app_id, record_id=record_id, debug=debug)
+
+
+	def read_app_documents(self, app_info, app_id='', parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_app_documents', 
+					'get', 
+					'/apps/{APP_ID}/documents/?{PARAMETERS}', 
+					[u'Documents', u'record_id', u'Document', u'id'], 
+					app_info, 
+					data, 
+					app_id=app_id, parameters=parameters, debug=debug)
+
+
+	def post_app_document(self, app_info, app_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('post_app_document', 
+					'post', 
+					'/apps/{APP_ID}/documents/', 
+					[u'Document', u'id'], 
+					app_info, 
+					data, 
+					app_id=app_id, debug=debug)
+
+
+	def post_app_document_ext(self, app_info, app_id='', external_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('post_app_document_ext', 
+					'put', 
+					'/apps/{APP_ID}/documents/external/{EXTERNAL_ID}', 
+					[u'Document', u'id'], 
+					app_info, 
+					data, 
+					app_id=app_id, external_id=external_id, debug=debug)
+
+
+	def read_app_document_meta(self, app_info, app_id='', document_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_app_document_meta', 
+					'get', 
+					'/apps/{APP_ID}/documents/{DOCUMENT_ID}/meta', 
+					[u'Document', u'id'], 
+					app_info, 
+					data, 
+					app_id=app_id, document_id=document_id, debug=debug)
+
+
+	def create_or_replace_app_document(self, app_info, app_id='', document_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('create_or_replace_app_document', 
+					'put', 
+					'/apps/{APP_ID}/documents/{DOCUMENT_ID}', 
+					[u'Document', u'id'], 
+					app_info, 
+					data, 
+					app_id=app_id, document_id=document_id, debug=debug)
+
+
+	def read_app_document_ext_meta(self, app_info, app_id='', external_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_app_document_ext_meta', 
+					'get', 
+					'/apps/{APP_ID}/documents/external/{EXTERNAL_ID}/meta', 
+					[], 
+					app_info, 
+					data, 
+					app_id=app_id, external_id=external_id, debug=debug)
+
+
+	def read_app_document(self, app_info, app_id='', document_id='', parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_app_document', 
+					'get', 
+					'/apps/{APP_ID}/documents/{DOCUMENT_ID}?{PARAMETERS}', 
+					[u'Document', u'id'], 
+					app_info, 
+					data, 
+					app_id=app_id, document_id=document_id, parameters=parameters, debug=debug)
+
+
+	def post_app_document_label(self, app_info, app_id='', document_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('post_app_document_label', 
+					'put', 
+					'/apps/{APP_ID}/documents/{DOCUMENT_ID}/label', 
+					[u'Document', u'id', u'label', u'value'], 
+					app_info, 
+					data, 
+					app_id=app_id, document_id=document_id, debug=debug)
+
+
+	def remove_app_document(self, app_info, app_id='', document_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('remove_app_document', 
+					'delete', 
+					'/apps/{APP_ID}/documents/{DOCUMENT_ID}', 
+					[], 
+					app_info, 
+					data, 
+					app_id=app_id, document_id=document_id, debug=debug)
+
+
+	def delete_documents(self, app_info, record_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('delete_documents', 
+					'delete', 
+					'/records/{RECORD_ID}/documents/', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, debug=debug)
+
+
+	def read_measurements(self, app_info, record_id='', lab_code='', parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_measurements', 
+					'get', 
+					'/records/{RECORD_ID}/reports/minimal/measurements/{LAB_CODE}/?{PARAMETERS}', 
+					[u'Measurements', u'record', u'Measurement', u'id'], 
+					app_info, 
+					data, 
+					record_id=record_id, lab_code=lab_code, parameters=parameters, debug=debug)
+
+
+	def read_immunizations(self, app_info, record_id='', parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_immunizations', 
+					'get', 
+					'/records/{RECORD_ID}/reports/minimal/immunizations/?{PARAMETERS}', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, parameters=parameters, debug=debug)
+
+
+	def read_allergies(self, app_info, record_id='', parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_allergies', 
+					'get', 
+					'/records/{RECORD_ID}/reports/minimal/allergies/?{PARAMETERS}', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, parameters=parameters, debug=debug)
+
+
+	def read_labs(self, app_info, record_id='', parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_labs', 
+					'get', 
+					'/records/{RECORD_ID}/reports/minimal/labs/?{PARAMETERS}', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, parameters=parameters, debug=debug)
+
+
+	def read_procedures(self, app_info, record_id='', parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_procedures', 
+					'get', 
+					'/records/{RECORD_ID}/reports/minimal/procedures/?{PARAMETERS}', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, parameters=parameters, debug=debug)
+
+
+	def read_problems(self, app_info, record_id='', parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_problems', 
+					'get', 
+					'/records/{RECORD_ID}/reports/minimal/problems/?{PARAMETERS}', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, parameters=parameters, debug=debug)
+
+
+	def read_ccr_experimental(self, app_info, record_id='', parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_ccr_experimental', 
+					'get', 
+					'/records/{RECORD_ID}/reports/experimental/ccr?{PARAMETERS}', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, parameters=parameters, debug=debug)
+
+
+	def read_medications(self, app_info, record_id='', parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_medications', 
+					'get', 
+					'/records/{RECORD_ID}/reports/minimal/medications/?{PARAMETERS}', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, parameters=parameters, debug=debug)
+
+
+	def read_equipment(self, app_info, record_id='', parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_equipment', 
+					'get', 
+					'/records/{RECORD_ID}/reports/minimal/equipment/?{PARAMETERS}', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, parameters=parameters, debug=debug)
+
+
+	def read_simple_clinical_notes(self, app_info, record_id='', parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_simple_clinical_notes', 
+					'get', 
+					'/records/{RECORD_ID}/reports/minimal/simple-clinical-notes/?{PARAMETERS}', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, parameters=parameters, debug=debug)
+
+
+	def read_vitals_category(self, app_info, record_id='', category='', parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_vitals_category', 
+					'get', 
+					'/records/{RECORD_ID}/reports/minimal/vitals/{CATEGORY}/?{PARAMETERS}', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, category=category, parameters=parameters, debug=debug)
+
+
+	def read_vitals(self, app_info, record_id='', parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_vitals', 
+					'get', 
+					'/records/{RECORD_ID}/reports/minimal/vitals/?{PARAMETERS}', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, parameters=parameters, debug=debug)
+
+
+	def read_carenet_measurements(self, app_info, carenet_id='', lab_code='', parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_carenet_measurements', 
+					'get', 
+					'/carenets/{CARENET_ID}/reports/minimal/measurements/{LAB_CODE}/?{PARAMETERS}', 
+					[u'Measurements', u'record', u'Measurement', u'id'], 
+					app_info, 
+					data, 
+					carenet_id=carenet_id, lab_code=lab_code, parameters=parameters, debug=debug)
+
+
+	def read_carenet_immunizations(self, app_info, carenet_id='', parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_carenet_immunizations', 
+					'get', 
+					'/carenets/{CARENET_ID}/reports/minimal/immunizations/?{PARAMETERS}', 
+					[], 
+					app_info, 
+					data, 
+					carenet_id=carenet_id, parameters=parameters, debug=debug)
+
+
+	def read_carenet_allergies(self, app_info, carenet_id='', parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_carenet_allergies', 
+					'get', 
+					'/carenets/{CARENET_ID}/reports/minimal/allergies/?{PARAMETERS}', 
+					[], 
+					app_info, 
+					data, 
+					carenet_id=carenet_id, parameters=parameters, debug=debug)
+
+
+	def read_carenet_procedures(self, app_info, carenet_id='', parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_carenet_procedures', 
+					'get', 
+					'/carenets/{CARENET_ID}/reports/minimal/procedures/?{PARAMETERS}', 
+					[], 
+					app_info, 
+					data, 
+					carenet_id=carenet_id, parameters=parameters, debug=debug)
+
+
+	def read_carenet_problems(self, app_info, carenet_id='', parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_carenet_problems', 
+					'get', 
+					'/carenets/{CARENET_ID}/reports/minimal/problems/?{PARAMETERS}', 
+					[], 
+					app_info, 
+					data, 
+					carenet_id=carenet_id, parameters=parameters, debug=debug)
+
+
+	def read_carenet_medications(self, app_info, carenet_id='', parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_carenet_medications', 
+					'get', 
+					'/carenets/{CARENET_ID}/reports/minimal/medications/?{PARAMETERS}', 
+					[], 
+					app_info, 
+					data, 
+					carenet_id=carenet_id, parameters=parameters, debug=debug)
+
+
+	def read_carenet_equipment(self, app_info, carenet_id='', parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_carenet_equipment', 
+					'get', 
+					'/carenets/{CARENET_ID}/reports/minimal/equipment/?{PARAMETERS}', 
+					[], 
+					app_info, 
+					data, 
+					carenet_id=carenet_id, parameters=parameters, debug=debug)
+
+
+	def read_carenet_vitals_category(self, app_info, carenet_id='', category='', parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_carenet_vitals_category', 
+					'get', 
+					'/carenets/{CARENET_ID}/reports/minimal/vitals/{CATEGORY}?{PARAMETERS}', 
+					[], 
+					app_info, 
+					data, 
+					carenet_id=carenet_id, category=category, parameters=parameters, debug=debug)
+
+
+	def read_carenet_vitals(self, app_info, carenet_id='', parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_carenet_vitals', 
+					'get', 
+					'/carenets/{CARENET_ID}/reports/minimal/vitals/?{PARAMETERS}', 
+					[], 
+					app_info, 
+					data, 
+					carenet_id=carenet_id, parameters=parameters, debug=debug)
+
+
+	def read_carenet_labs(self, app_info, carenet_id='', parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_carenet_labs', 
+					'get', 
+					'/carenets/{CARENET_ID}/reports/minimal/labs/?{PARAMETERS}', 
+					[], 
+					app_info, 
+					data, 
+					carenet_id=carenet_id, parameters=parameters, debug=debug)
+
+
+	def read_carenet_simple_clinical_notes(self, app_info, carenet_id='', parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('read_carenet_simple_clinical_notes', 
+					'get', 
+					'/carenets/{CARENET_ID}/reports/minimal/simple-clinical-notes/?{PARAMETERS}', 
+					[], 
+					app_info, 
+					data, 
+					carenet_id=carenet_id, parameters=parameters, debug=debug)
+
+
+	def get_autoshare(self, app_info, record_id='', parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('get_autoshare', 
+					'get', 
+					'/records/{RECORD_ID}/autoshare/bytype/?{PARAMETERS}', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, parameters=parameters, debug=debug)
+
+
+	def get_autoshare_bytype_all(self, app_info, record_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('get_autoshare_bytype_all', 
+					'get', 
+					'/records/{RECORD_ID}/autoshare/bytype/all', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, debug=debug)
+
+
+	def post_autoshare(self, app_info, record_id='', carenet_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('post_autoshare', 
+					'post', 
+					'/records/{RECORD_ID}/autoshare/carenets/{CARENET_ID}/bytype/set', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, carenet_id=carenet_id, debug=debug)
+
+
+	def delete_autoshare(self, app_info, record_id='', carenet_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('delete_autoshare', 
+					'post', 
+					'/records/{RECORD_ID}/autoshare/carenets/{CARENET_ID}/bytype/unset', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, carenet_id=carenet_id, debug=debug)
+
+
+	def document_nevershare_set(self, app_info, record_id='', document_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('document_nevershare_set', 
+					'put', 
+					'/records/{RECORD_ID}/documents/{DOCUMENT_ID}/nevershare', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, document_id=document_id, debug=debug)
+
+
+	def document_nevershare_remove(self, app_info, record_id='', document_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('document_nevershare_remove', 
+					'delete', 
+					'/records/{RECORD_ID}/documents/{DOCUMENT_ID}/nevershare', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, document_id=document_id, debug=debug)
+
+
+	def lookup_code(self, app_info, coding_system='', parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('lookup_code', 
+					'get', 
+					'/codes/systems/{CODING_SYSTEM}/query?{PARAMETERS}', 
+					[], 
+					app_info, 
+					data, 
+					coding_system=coding_system, parameters=parameters, debug=debug)
+
+
+	def get_account_records(self, app_info, account_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('get_account_records', 
+					'get', 
+					'/accounts/{ACCOUNT_ID}/records/', 
+					[], 
+					app_info, 
+					data, 
+					account_id=account_id, debug=debug)
+
+
+	def get_carenet_apps(self, app_info, carenet_id='', parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('get_carenet_apps', 
+					'get', 
+					'/carenets/{CARENET_ID}/apps/?{PARAMETERS}', 
+					[], 
+					app_info, 
+					data, 
+					carenet_id=carenet_id, parameters=parameters, debug=debug)
+
+
+	def get_carenet_accounts(self, app_info, carenet_id='', parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('get_carenet_accounts', 
+					'get', 
+					'/carenets/{CARENET_ID}/accounts/?{PARAMETERS}', 
+					[], 
+					app_info, 
+					data, 
+					carenet_id=carenet_id, parameters=parameters, debug=debug)
+
+
+	def post_carenet_account(self, app_info, carenet_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('post_carenet_account', 
+					'post', 
+					'/carenets/{CARENET_ID}/accounts/', 
+					[], 
+					app_info, 
+					data, 
+					carenet_id=carenet_id, debug=debug)
+
+
+	def delete_carenet_account(self, app_info, carenet_id='', account_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('delete_carenet_account', 
+					'delete', 
+					'/carenets/{CARENET_ID}/accounts/{ACCOUNT_ID}', 
+					[], 
+					app_info, 
+					data, 
+					carenet_id=carenet_id, account_id=account_id, debug=debug)
+
+
+	def delete_carenet_document(self, app_info, record_id='', document_id='', carenet_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('delete_carenet_document', 
+					'delete', 
+					'/records/{RECORD_ID}/documents/{DOCUMENT_ID}/carenets/{CARENET_ID}', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, document_id=document_id, carenet_id=carenet_id, debug=debug)
+
+
+	def create_carenet(self, app_info, record_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('create_carenet', 
+					'post', 
+					'/records/{RECORD_ID}/carenets/', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, debug=debug)
+
+
+	def delete_carenet(self, app_info, carenet_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('delete_carenet', 
+					'delete', 
+					'/carenets/{CARENET_ID}', 
+					[], 
+					app_info, 
+					data, 
+					carenet_id=carenet_id, debug=debug)
+
+
+	def rename_carenet(self, app_info, carenet_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('rename_carenet', 
+					'post', 
+					'/carenets/{CARENET_ID}/rename', 
+					[], 
+					app_info, 
+					data, 
+					carenet_id=carenet_id, debug=debug)
+
+
+	def get_record_carenets(self, app_info, record_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('get_record_carenets', 
+					'get', 
+					'/records/{RECORD_ID}/carenets/', 
+					[u'Carenets', u'record_id', u'Carenet', u'id'], 
+					app_info, 
+					data, 
+					record_id=record_id, debug=debug)
+
+
+	def get_document_carenets(self, app_info, record_id='', document_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('get_document_carenets', 
+					'get', 
+					'/records/{RECORD_ID}/documents/{DOCUMENT_ID}/carenets/', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, document_id=document_id, debug=debug)
+
+
+	def get_carenet_record(self, app_info, carenet_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('get_carenet_record', 
+					'get', 
+					'/carenets/{CARENET_ID}/record', 
+					[u'Record', u'id'], 
+					app_info, 
+					data, 
+					carenet_id=carenet_id, debug=debug)
+
+
+	def get_carenet_documents(self, app_info, carenet_id='', parameters='', data=None, debug=False): 
+		return self.utils_obj.get_response('get_carenet_documents', 
+					'get', 
+					'/carenets/{CARENET_ID}/documents/?{PARAMETERS}', 
+					[u'Documents', u'record_id', u'Document', u'id'], 
+					app_info, 
+					data, 
+					carenet_id=carenet_id, parameters=parameters, debug=debug)
+
+
+	def get_carenet_document(self, app_info, carenet_id='', document_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('get_carenet_document', 
+					'get', 
+					'/carenets/{CARENET_ID}/documents/{DOCUMENT_ID}', 
+					[], 
+					app_info, 
+					data, 
+					carenet_id=carenet_id, document_id=document_id, debug=debug)
+
+
+	def post_carenet_document(self, app_info, record_id='', document_id='', carenet_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('post_carenet_document', 
+					'put', 
+					'/records/{RECORD_ID}/documents/{DOCUMENT_ID}/carenets/{CARENET_ID}', 
+					[], 
+					app_info, 
+					data, 
+					record_id=record_id, document_id=document_id, carenet_id=carenet_id, debug=debug)
+
+
+	def get_version(self, app_info, data=None, debug=False): 
+		return self.utils_obj.get_response('get_version', 
+					'get', 
+					'/version', 
+					[], 
+					app_info, 
+					data, 
+					debug=debug)
+
+
+	def post_carenet_app(self, app_info, carenet_id='', app_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('post_carenet_app', 
+					'put', 
+					'/carenets/{CARENET_ID}/apps/{APP_ID}', 
+					[], 
+					app_info, 
+					data, 
+					carenet_id=carenet_id, app_id=app_id, debug=debug)
+
+
+	def delete_carenet_app(self, app_info, carenet_id='', app_id='', data=None, debug=False): 
+		return self.utils_obj.get_response('delete_carenet_app', 
+					'delete', 
+					'/carenets/{CARENET_ID}/apps/{APP_ID}', 
+					[], 
+					app_info, 
+					data, 
+					carenet_id=carenet_id, app_id=app_id, debug=debug)
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/urls/account.py indivo_server/indivo/urls/account.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/urls/account.py	2012-02-27 12:31:32.000000000 -0500
+++ indivo_server/indivo/urls/account.py	2012-03-23 14:53:51.000000000 -0400
@@ -8,6 +8,20 @@
     # forgotten password: Combines a reset and a secret-resend into one call
     (r'^forgot-password$', MethodDispatcher({'POST': account_forgot_password})),
 
+    # FBY: send an account a message
+    (r'^send/$', MethodDispatcher({'POST' : send_account_message})),
+
+    # FBY: get messages account sent
+    (r'^sent/$', MethodDispatcher({'GET' : account_sent})),
+
+    # FBY: read a sent message
+    (r'^sent/(?P<message_id>[^/]+)$',
+      MethodDispatcher({'GET': account_sent_message})),
+
+    # FBY: archive a sent message
+    (r'^sent/(?P<message_id>[^/]+)/archive$',
+      MethodDispatcher({'POST': account_sent_message_archive})),
+
     # reset
     (r'^reset$', MethodDispatcher({'POST': account_reset})),
 
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/urls/record_reports.py indivo_server/indivo/urls/record_reports.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/urls/record_reports.py	2012-02-27 12:31:32.000000000 -0500
+++ indivo_server/indivo/urls/record_reports.py	2012-04-26 15:10:52.000000000 -0400
@@ -14,6 +14,34 @@
    MethodDispatcher({'GET':lab_list})),
   (r'^minimal/medications/$', 
    MethodDispatcher({'GET':medication_list})),
+  (r'^minimal/medicationorders/$',
+   MethodDispatcher({'GET':medicationorder_list})),
+  (r'^minimal/medicationfills/$',
+   MethodDispatcher({'GET':medicationfill_list})),
+  (r'^minimal/medicationadministrations/$',
+   MethodDispatcher({'GET':medicationadministration_list})),
+  (r'^minimal/medicationscheduleitems/$',
+   MethodDispatcher({'GET':medicationscheduleitem_list})),
+  (r'^minimal/equipmentscheduleitems/$',
+   MethodDispatcher({'GET':equipmentscheduleitem_list})),
+  (r'^minimal/adherenceitems/$',
+   MethodDispatcher({'GET':adherenceitem_list})),
+  (r'^minimal/videomessages/$',
+   MethodDispatcher({'GET':videomessage_list})),
+  (r'^minimal/devices/$',
+   MethodDispatcher({'GET':device_list})),
+  (r'^minimal/healthmeasurements/$',
+   MethodDispatcher({'GET':healthmeasurement_list})),
+  (r'^minimal/medicationschedules/$',
+   MethodDispatcher({'GET':medicationschedule_list})),
+  (r'^minimal/healthactionoccurrences/$',
+   MethodDispatcher({'GET':healthactionoccurrence_list})),
+  (r'^minimal/healthactionschedules/$',
+   MethodDispatcher({'GET':healthactionschedule_list})),
+  (r'^minimal/healthactionplans/$',
+   MethodDispatcher({'GET':healthactionplan_list})),
+  (r'^minimal/healthactionresults/$',
+   MethodDispatcher({'GET':healthactionresult_list})),
   (r'^minimal/procedures/$', 
    MethodDispatcher({'GET':procedure_list})),
   (r'^minimal/problems/$', 
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/views/documents/document.py indivo_server/indivo/views/documents/document.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/views/documents/document.py	2012-02-27 12:31:32.000000000 -0500
+++ indivo_server/indivo/views/documents/document.py	2012-04-18 09:50:43.000000000 -0400
@@ -51,7 +51,15 @@
     """
 
     relates_to = doc.rels_as_doc_0.values('relationship__type').annotate(count=Count('relationship'))
+    for relation in relates_to:
+        docs = doc.rels_as_doc_0.filter(relationship__type=relation['relationship__type']).values('document_1_id')
+        relation['docs'] = docs
+
     is_related_from = doc.rels_as_doc_1.values('relationship__type').annotate(count=Count('relationship'))
+    for relation in is_related_from:
+        docs = doc.rels_as_doc_1.filter(relationship__type=relation['relationship__type']).values('document_0_id')
+        relation['docs'] = docs
+
     return relates_to, is_related_from
     
 
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/views/messaging.py indivo_server/indivo/views/messaging.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/views/messaging.py	2012-02-27 12:31:32.000000000 -0500
+++ indivo_server/indivo/views/messaging.py	2012-03-23 16:49:13.000000000 -0400
@@ -62,6 +62,48 @@
   account.notify_account_of_new_message()
   return DONE
 
+@transaction.commit_manually
+@handle_integrity_error('Duplicate external id. Each message requires a unique message_id')
+def send_account_message(request, account):
+  """
+  Account messages have no attachments for now, as we wouldn't know
+  which record to store them on.
+
+  request.POST may contain any of:
+
+  * *message_id*: An external identifier for the message, used for later
+    retrieval. Defaults to ``None``.
+
+  * *subject*: The message subject. Defaults to ``[no subject]``.
+
+  * *body*: The message body. Defaults to ``[no body]``.
+
+  * *severity*: The importance of the message. Options are ``low``, ``medium``,
+    ``high``. Defaults to ``low``.
+
+  After delivering the message to Indivo's inbox, this call will send an email to 
+  the account's contact address, alerting them that a new message has arrived.
+
+  Will return :http:statuscode:`200` on success, :http:statuscode:`400` if the
+  passed *message_id* is a duplicate.
+  """
+  try:
+    Message.objects.create( 
+      account             = account, 
+      sender              = request.principal,
+      recipient           = account, 
+      external_identifier = request.POST.get('message_id', None), 
+      subject             = _get_subject(request),
+      body                = request.POST.get('body', "[no body]"),
+      severity            = request.POST.get('severity', 'low'))
+    account.notify_account_of_new_message()
+  except IntegrityError: # Occurs if the same sender uses the same message_id for different messages.
+    transaction.rollback()
+    return HttpResponseBadRequest('Duplicate external id: %s. Each message requires a unique message_id'%message_id)
+  else:
+    transaction.commit()
+    return DONE
+
 @transaction.commit_on_success
 @handle_integrity_error('Duplicate external id. Each message requires a unique message_id')
 def record_send_message(request, record, message_id):
@@ -227,7 +269,6 @@
     message.save()
   return DONE
 
-
 @marsloader()
 def account_notifications(request, account, limit, offset, status, order_by):
   """ List an account's notifications.
@@ -240,3 +281,79 @@
 
   notifications = Notification.objects.filter(account = account).order_by(order_by)
   return render_template('notifications', {'notifications' : notifications})
+
+
+@marsloader()
+def account_sent(request, account, limit, offset, status, order_by):
+  """ List messages sent by account.
+
+  Messages will be ordered by *order_by* and paged by *limit* and
+  *offset*. request.GET may additionally contain:
+
+  * *include_archive*: Adds messages that have been archived (which are
+    normally omitted) to the listing. Any value will be interpreted as ``True``. 
+    Defaults to ``False``, as if it weren't passed.
+
+  Will return :http:statuscode:`200` with a list of messages on success.
+
+  """
+  messages = account.message_as_sender.order_by(order_by)
+
+  if not request.GET.get('include_archive', False):
+    messages = messages.filter(sent_archived_at=None)
+
+  return render_template('messages', {'messages' : messages, 'sent_view' : True})
+
+def account_sent_message_archive(request, account, message_id):
+  """ Archive a sent message.
+
+  This call sets a message's sent archival date as now, unless it's already set. 
+  This means that future calls to 
+  :py:meth:`~indivo.views.messaging.account_sent` will not
+  display this message by default.
+  
+  Will return :http:statuscode:`200` on success.
+
+  """
+
+  message = account.message_as_sender.get(id = message_id)
+  if not message.sent_archived_at:
+    message.sent_archived_at = datetime.datetime.utcnow()
+    message.save()
+  return DONE
+
+def account_sent_message(request, account, message_id):
+  """ Retrieve an individual message which an account sent.
+
+  This call additionally filters message content based on its
+  body-type. For example, markdown content is scrubbed of 
+  extraneous HTML, then converted to HTML content. Also, this
+  call marks the message as read.
+
+  *message_id* should be the external identifier of the message
+  as created by 
+  :py:meth:`~indivo.views.messaging.account_send_message` or
+  :py:meth:`~indivo.views.messaging.record_send_message`.
+
+  Will return :http:statuscode:`200` with XML describing the message
+  (id, sender, dates received, read, and archived, subject, body,
+  severity, etc.) on success.
+
+  """
+
+  message = account.message_as_sender.get(id = message_id)
+
+  # if message not read, mark it read
+  if not message.sent_read_at:
+    message.sent_read_at = datetime.datetime.utcnow()
+    message.save()
+
+  # markdown
+  if message.body_type == 'markdown':
+    ext = mdx_linkexpander.MessageLinkExpanderExtension({
+        'APP_BASE':'foobar',
+        'message_id': message_id
+        })
+    message.body = markdown.Markdown(safe_mode=True, output_format='html4', extensions = [ext]).convert(message.body)
+
+  return render_template('message', {'message' : message, 'sent_view' : True})
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/views/reports/adherenceitem.py indivo_server/indivo/views/reports/adherenceitem.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/views/reports/adherenceitem.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/views/reports/adherenceitem.py	2012-02-21 07:36:45.000000000 -0500
@@ -0,0 +1,37 @@
+"""
+Indivo Views -- Adherence Item
+"""
+
+from django.http import HttpResponseBadRequest, HttpResponse
+from indivo.lib.view_decorators import marsloader, DEFAULT_ORDERBY
+from indivo.lib.query import FactQuery, DATE, STRING, NUMBER
+from indivo.models import AdherenceItem
+
+ADHERENCEITEM_FILTERS = {
+  DEFAULT_ORDERBY : ('created_at', DATE)
+}
+
+ADHERENCEITEM_TEMPLATE = 'reports/adherenceitem.xml'
+
+def adherenceitem_list(*args, **kwargs):
+  """For 1:1 mapping of URLs to views. Calls _adherenceitem_list"""
+  return _adherenceitem_list(*args, **kwargs)
+
+def carenet_adherenceitem_list(*args, **kwargs):
+  """For 1:1 mapping of URLs to views. Calls _adherenceitem_list"""
+  return _adherenceitem_list(*args, **kwargs)
+
+@marsloader(query_api_support=True)
+def _adherenceitem_list(request, group_by, date_group, aggregate_by,
+             limit, offset, order_by,
+             status, date_range, filters,
+             record=None, carenet=None):
+  q = FactQuery(AdherenceItem, ADHERENCEITEM_FILTERS, 
+                group_by, date_group, aggregate_by,
+                limit, offset, order_by,
+                status, date_range, filters,
+                record, carenet)
+  try:
+    return q.render(ADHERENCEITEM_TEMPLATE)
+  except ValueError as e:
+    return HttpResponseBadRequest(str(e))
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/views/reports/device.py indivo_server/indivo/views/reports/device.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/views/reports/device.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/views/reports/device.py	2012-04-20 16:56:05.000000000 -0400
@@ -0,0 +1,57 @@
+"""
+Indivo Views -- Device
+"""
+
+from django.http import HttpResponseBadRequest, HttpResponse
+from indivo.lib.view_decorators import marsloader, DEFAULT_ORDERBY
+from indivo.lib.query import FactQuery, DATE, STRING, NUMBER
+from indivo.models import Device
+
+DEVICE_FILTERS = {
+    DEFAULT_ORDERBY : ('created_at', DATE),
+    'name' : ('name', STRING),
+    'name_type' : ('name_type', STRING),
+    'name_value' : ('name_value', STRING),
+    'name_abbrev' : ('name_abbrerv', STRING),
+    'identity' : ('identity', STRING),
+    'identity_type' : ('identity_type', STRING),
+    'identity_value' : ('identity_value', STRING),
+    'identity_abbrev' : ('identity_abbrerv', STRING),
+    'type' : ('type', STRING),
+    'type_type' : ('type_type', STRING),
+    'type_value' : ('type_value', STRING),
+    'type_abbrev' : ('type_abbrerv', STRING),
+    'indication' : ('indication', STRING),
+    'vendor' : ('vendor', STRING),
+    'vendor_type' : ('vendor_type', STRING),
+    'vendor_value' : ('vendor_value', STRING),
+    'vendor_abbrev' : ('vendor_abbrerv', STRING),
+    'description' : ('description', STRING),
+    'specification' : ('specification', STRING),
+    'certification' : ('certification', STRING),
+}
+
+DEVICE_TEMPLATE = 'reports/device.xml'
+
+def device_list(*args, **kwargs):
+    """For 1:1 mapping of URLs to views. Calls _device_list"""
+    return _device_list(*args, **kwargs)
+
+def carenet_greetings_list(*args, **kwargs):
+    """For 1:1 mapping of URLs to views. Calls _device_list"""
+    return _device_list(*args, **kwargs)
+
+@marsloader(query_api_support=True)
+def _device_list(request, group_by, date_group, aggregate_by,
+                 limit, offset, order_by,
+                 status, date_range, filters,
+                 record=None, carenet=None):
+    q = FactQuery(Device, DEVICE_FILTERS, 
+                  group_by, date_group, aggregate_by,
+                  limit, offset, order_by,
+                  status, date_range, filters,
+                  record, carenet)
+    try:
+        return q.render(DEVICE_TEMPLATE)
+    except ValueError as e:
+        return HttpResponseBadRequest(str(e))
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/views/reports/equipmentscheduleitem.py indivo_server/indivo/views/reports/equipmentscheduleitem.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/views/reports/equipmentscheduleitem.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/views/reports/equipmentscheduleitem.py	2012-02-21 07:36:45.000000000 -0500
@@ -0,0 +1,37 @@
+"""
+Indivo Views -- Equipment Schedule Item
+"""
+
+from django.http import HttpResponseBadRequest, HttpResponse
+from indivo.lib.view_decorators import marsloader, DEFAULT_ORDERBY
+from indivo.lib.query import FactQuery, DATE, STRING, NUMBER
+from indivo.models import EquipmentScheduleItem
+
+EQUIPMENTSCHEDULEITEM_FILTERS = {
+  DEFAULT_ORDERBY : ('created_at', DATE)
+}
+
+EQUIPMENTSCHEDULEITEM_TEMPLATE = 'reports/equipmentscheduleitem.xml'
+
+def equipmentscheduleitem_list(*args, **kwargs):
+  """For 1:1 mapping of URLs to views. Calls _equipmentscheduleitem_list"""
+  return _equipmentscheduleitem_list(*args, **kwargs)
+
+def carenet_equipmentscheduleitem_list(*args, **kwargs):
+  """For 1:1 mapping of URLs to views. Calls _equipmentscheduleitem_list"""
+  return _equipmentscheduleitem_list(*args, **kwargs)
+
+@marsloader(query_api_support=True)
+def _equipmentscheduleitem_list(request, group_by, date_group, aggregate_by,
+             limit, offset, order_by,
+             status, date_range, filters,
+             record=None, carenet=None):
+  q = FactQuery(EquipmentScheduleItem, EQUIPMENTSCHEDULEITEM_FILTERS, 
+                group_by, date_group, aggregate_by,
+                limit, offset, order_by,
+                status, date_range, filters,
+                record, carenet)
+  try:
+    return q.render(EQUIPMENTSCHEDULEITEM_TEMPLATE)
+  except ValueError as e:
+    return HttpResponseBadRequest(str(e))
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/views/reports/healthactionoccurrence.py indivo_server/indivo/views/reports/healthactionoccurrence.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/views/reports/healthactionoccurrence.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/views/reports/healthactionoccurrence.py	2012-04-20 12:56:59.000000000 -0400
@@ -0,0 +1,42 @@
+"""
+Indivo Views -- HealthActionOccurrence
+"""
+
+from django.http import HttpResponseBadRequest, HttpResponse
+from indivo.lib.view_decorators import marsloader, DEFAULT_ORDERBY
+from indivo.lib.query import FactQuery, DATE, STRING, NUMBER
+from indivo.models import HealthActionOccurrence
+
+HEALTHACTIONOCCURRENCE_FILTERS = {
+    DEFAULT_ORDERBY : ('created_at', DATE),
+    'name': ('name', STRING),
+    'name_type' : ('name_type', STRING),
+    'name_value' : ('name_value', STRING),
+    'name_abbrev' : ('name_abbrerv', STRING),
+    'recurrenceIndex': ('recurrenceIndex', NUMBER)
+}
+
+HEALTHACTIONOCCURRENCE_TEMPLATE = 'reports/healthactionoccurrence.xml'
+
+def healthactionoccurrence_list(*args, **kwargs):
+    """For 1:1 mapping of URLs to views. Calls _healthactionoccurrence_list"""
+    return _healthactionoccurrence_list(*args, **kwargs)
+
+def carenet_healthactionoccurrence_list(*args, **kwargs):
+    """For 1:1 mapping of URLs to views. Calls _healthactionoccurrence_list"""
+    return _healthactionoccurrence_list(*args, **kwargs)
+
+@marsloader(query_api_support=True)
+def _healthactionoccurrence_list(request, group_by, date_group, aggregate_by,
+                                 limit, offset, order_by,
+                                 status, date_range, filters,
+                                 record=None, carenet=None):
+    q = FactQuery(HealthActionOccurrence, HEALTHACTIONOCCURRENCE_FILTERS, 
+                  group_by, date_group, aggregate_by,
+                  limit, offset, order_by,
+                  status, date_range, filters,
+                  record, carenet)
+    try:
+        return q.render(HEALTHACTIONOCCURRENCE_TEMPLATE)
+    except ValueError as e:
+        return HttpResponseBadRequest(str(e))
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/views/reports/healthactionplan.py indivo_server/indivo/views/reports/healthactionplan.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/views/reports/healthactionplan.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/views/reports/healthactionplan.py	2012-04-18 09:52:28.000000000 -0400
@@ -0,0 +1,51 @@
+"""
+Indivo Views -- HealthActionPlan Message
+"""
+
+from django.http import HttpResponseBadRequest, HttpResponse
+from indivo.lib.view_decorators import marsloader, DEFAULT_ORDERBY
+from indivo.lib.query import FactQuery, DATE, STRING, NUMBER
+from indivo.models import HealthActionPlan
+
+HEALTHACTIONPLAN_FILTERS = {
+  'name' : ('name', STRING),
+  'name_type' : ('name_type', STRING),
+  'name_value' : ('name_value', STRING),
+  'name_abbrev' : ('name_abbrerv', STRING),
+  'planType' : ('planType', STRING),
+  'plannedBy' : ('plannedBy', STRING),
+  'datePlanned' : ('datePlanned', DATE),
+  'dateExpires' : ('dateExpires', DATE),
+  'indication' : ('indication', STRING),
+  'instructions' : ('instructions', STRING),
+  'system' : ('system', STRING),
+  'system_type' : ('system_type', STRING),
+  'system_value' : ('system_value', STRING),
+  'system_abbrev' : ('system_abbrerv', STRING),
+  DEFAULT_ORDERBY : ('created_at', DATE)
+}
+
+HEALTHACTIONPLAN_TEMPLATE = 'reports/healthactionplan.xml'
+
+def healthactionplan_list(*args, **kwargs):
+  """For 1:1 mapping of URLs to views. Calls _healthactionplan_list"""
+  return _healthactionplan_list(*args, **kwargs)
+
+def carenet_healthactionplan_list(*args, **kwargs):
+  """For 1:1 mapping of URLs to views. Calls _healthactionplan_list"""
+  return _healthactionplan_list(*args, **kwargs)
+
+@marsloader(query_api_support=True)
+def _healthactionplan_list(request, group_by, date_group, aggregate_by,
+             limit, offset, order_by,
+             status, date_range, filters,
+             record=None, carenet=None):
+  q = FactQuery(HealthActionPlan, HEALTHACTIONPLAN_FILTERS, 
+                group_by, date_group, aggregate_by,
+                limit, offset, order_by,
+                status, date_range, filters,
+                record, carenet)
+  try:
+    return q.render(HEALTHACTIONPLAN_TEMPLATE)
+  except ValueError as e:
+    return HttpResponseBadRequest(str(e))
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/views/reports/healthactionresult.py indivo_server/indivo/views/reports/healthactionresult.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/views/reports/healthactionresult.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/views/reports/healthactionresult.py	2012-04-18 09:52:28.000000000 -0400
@@ -0,0 +1,44 @@
+"""
+Indivo Views -- HealthActionResult Message
+"""
+
+from django.http import HttpResponseBadRequest, HttpResponse
+from indivo.lib.view_decorators import marsloader, DEFAULT_ORDERBY
+from indivo.lib.query import FactQuery, DATE, STRING, NUMBER
+from indivo.models import HealthActionResult
+
+HEALTHACTIONRESULT_FILTERS = {
+  'name' : ('name', STRING),
+  'name_type' : ('name_type', STRING),
+  'name_value' : ('name_value', STRING),
+  'name_abbrev' : ('name_abbrerv', STRING),
+  'planType' : ('planType', STRING),
+  'reportedBy' : ('reportedBy', STRING),
+  'dateReported' : ('dateReported', DATE),
+  DEFAULT_ORDERBY : ('created_at', DATE)
+}
+
+HEALTHACTIONRESULT_TEMPLATE = 'reports/healthactionresult.xml'
+
+def healthactionresult_list(*args, **kwargs):
+  """For 1:1 mapping of URLs to views. Calls _healthactionresult_list"""
+  return _healthactionresult_list(*args, **kwargs)
+
+def carenet_healthactionresult_list(*args, **kwargs):
+  """For 1:1 mapping of URLs to views. Calls _healthactionresult_list"""
+  return _healthactionresult_list(*args, **kwargs)
+
+@marsloader(query_api_support=True)
+def _healthactionresult_list(request, group_by, date_group, aggregate_by,
+             limit, offset, order_by,
+             status, date_range, filters,
+             record=None, carenet=None):
+  q = FactQuery(HealthActionResult, HEALTHACTIONRESULT_FILTERS, 
+                group_by, date_group, aggregate_by,
+                limit, offset, order_by,
+                status, date_range, filters,
+                record, carenet)
+  try:
+    return q.render(HEALTHACTIONRESULT_TEMPLATE)
+  except ValueError as e:
+    return HttpResponseBadRequest(str(e))
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/views/reports/healthactionschedule.py indivo_server/indivo/views/reports/healthactionschedule.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/views/reports/healthactionschedule.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/views/reports/healthactionschedule.py	2012-04-20 12:56:59.000000000 -0400
@@ -0,0 +1,61 @@
+"""
+Indivo Views -- HealthActionSchedule
+"""
+
+from django.http import HttpResponseBadRequest, HttpResponse
+from indivo.lib.view_decorators import marsloader, DEFAULT_ORDERBY
+from indivo.lib.query import FactQuery, DATE, STRING, NUMBER
+from indivo.models import HealthActionSchedule
+
+HEALTHACTIONSCHEDULE_FILTERS = {
+    DEFAULT_ORDERBY : ('created_at', DATE),
+    'name': ('name', STRING),
+    'name_type' : ('name_type', STRING),
+    'name_value' : ('name_value', STRING),
+    'name_abbrev' : ('name_abbrerv', STRING),    
+    'scheduledBy': ('scheduledBy', STRING),
+    'dateScheduled': ('dateScheduled', DATE),
+    'dateStart': ('dateStart', DATE),
+    'dateEnd': ('dateEnd', DATE),
+    'recurrenceRule_frequency': ('recurrenceRule_frequency', STRING),
+    'recurrenceRule_frequency_type' : ('recurrenceRule_frequency_type', STRING),
+    'recurrenceRule_frequency_value' : ('recurrenceRule_frequency_value', STRING),
+    'recurrenceRule_frequency_abbrev' : ('recurrenceRule_frequency_abbrerv', STRING),    
+    'recurrenceRule_interval': ('recurrenceRule_interval', STRING),
+    'recurrenceRule_interval_type' : ('recurrenceRule_interval_type', STRING),
+    'recurrenceRule_interval_value' : ('recurrenceRule_interval_value', STRING),
+    'recurrenceRule_interval_abbrev' : ('recurrenceRule_interval_abbrerv', STRING),    
+    'recurrenceRule_count': ('recurrenceRule_count', NUMBER),
+    'dose_textvalue' : ('dose_textvalue', STRING),
+    'dose_value' : ('dose_value', STRING),
+    'dose_unit' : ('dose_unit', STRING),
+    'dose_unit_type' : ('dose_unit_type', STRING),
+    'dose_unit_value' : ('dose_unit_value', STRING),
+    'dose_unit_abbrev' : ('dose_unit_abbrerv', STRING),
+    'instructions': ('instructions', STRING)
+}
+
+HEALTHACTIONSCHEDULE_TEMPLATE = 'reports/healthactionschedule.xml'
+
+def healthactionschedule_list(*args, **kwargs):
+    """For 1:1 mapping of URLs to views. Calls _healthactionschedule_list"""
+    return _healthactionschedule_list(*args, **kwargs)
+
+def carenet_healthactionschedule_list(*args, **kwargs):
+    """For 1:1 mapping of URLs to views. Calls _healthactionschedule_list"""
+    return _healthactionschedule_list(*args, **kwargs)
+
+@marsloader(query_api_support=True)
+def _healthactionschedule_list(request, group_by, date_group, aggregate_by,
+                               limit, offset, order_by,
+                               status, date_range, filters,
+                               record=None, carenet=None):
+    q = FactQuery(HealthActionSchedule, HEALTHACTIONSCHEDULE_FILTERS, 
+                  group_by, date_group, aggregate_by,
+                  limit, offset, order_by,
+                  status, date_range, filters,
+                  record, carenet)
+    try:
+        return q.render(HEALTHACTIONSCHEDULE_TEMPLATE)
+    except ValueError as e:
+        return HttpResponseBadRequest(str(e))
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/views/reports/healthmeasurement.py indivo_server/indivo/views/reports/healthmeasurement.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/views/reports/healthmeasurement.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/views/reports/healthmeasurement.py	2012-04-26 15:18:02.000000000 -0400
@@ -0,0 +1,54 @@
+"""
+Indivo Views -- HealthMeasurement
+"""
+
+from django.http import HttpResponseBadRequest, HttpResponse
+from indivo.lib.view_decorators import marsloader, DEFAULT_ORDERBY
+from indivo.lib.query import FactQuery, DATE, STRING, NUMBER
+from indivo.models import HealthMeasurement
+
+HEALTHMEASUREMENT_FILTERS = {
+    DEFAULT_ORDERBY : ('created_at', DATE),
+    'name' : ('name', STRING),
+    'name_type' : ('name_type', STRING),
+    'name_value' : ('name_value', STRING),
+    'name_abbrev' : ('name_abbrerv', STRING),
+    'measuredBy' : ('measuredBy', STRING),
+    'dateMeasuredStart': ('dateMeasuredStart', DATE),
+    'dateMeasuredEnd': ('dateMeasuredEnd', DATE),
+    'result_textvalue' : ('result_textvalue', STRING),
+    'result_value' : ('result_value', STRING),
+    'result_unit' : ('result_unit', STRING),
+    'result_unit_type' : ('result_unit_type', STRING),
+    'result_unit_value' : ('result_unit_value', STRING),
+    'result_unit_abbrev' : ('result_unit_abbrerv', STRING),
+    'site' : ('site', STRING),
+    'position' : ('position', STRING),
+    'technique' : ('technique', STRING),
+    'comments' : ('comments', STRING),
+}
+
+HEALTHMEASUREMENT_TEMPLATE = 'reports/healthmeasurement.xml'
+
+def healthmeasurement_list(*args, **kwargs):
+    """For 1:1 mapping of URLs to views. Calls _healthmeasurement_list"""
+    return _healthmeasurement_list(*args, **kwargs)
+
+def carenet_healthmeasurement_list(*args, **kwargs):
+    """For 1:1 mapping of URLs to views. Calls _healthmeasurement_list"""
+    return _healthmeasurement_list(*args, **kwargs)
+
+@marsloader(query_api_support=True)
+def _healthmeasurement_list(request, group_by, date_group, aggregate_by,
+                            limit, offset, order_by,
+                            status, date_range, filters,
+                            record=None, carenet=None):
+    q = FactQuery(HealthMeasurement, HEALTHMEASUREMENT_FILTERS, 
+                  group_by, date_group, aggregate_by,
+                  limit, offset, order_by,
+                  status, date_range, filters,
+                  record, carenet)
+    try:
+        return q.render(HEALTHMEASUREMENT_TEMPLATE)
+    except ValueError as e:
+        return HttpResponseBadRequest(str(e))
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/views/reports/__init__.py indivo_server/indivo/views/reports/__init__.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/views/reports/__init__.py	2012-02-27 12:31:32.000000000 -0500
+++ indivo_server/indivo/views/reports/__init__.py	2012-04-26 15:18:34.000000000 -0400
@@ -7,14 +7,28 @@
 
 """
 
-from allergy                import *
-from equipment              import *
-from immunization           import *
-from lab                    import *
-from measurement            import *
-from medication             import *
-from problem                import *
-from procedure              import *
-from simple_clinical_notes  import *
-from vitals                 import *
-from ccr import *
+from allergy                    import *
+from equipment                  import *
+from immunization               import *
+from lab                        import *
+from measurement                import *
+from medication                 import *
+from medicationscheduleitem     import *
+from equipmentscheduleitem      import *
+from medicationorder            import *
+from medicationfill             import *
+from medicationadministration   import *
+from adherenceitem              import *
+from videomessage               import *
+from problem                    import *
+from procedure                  import *
+from simple_clinical_notes      import *
+from vitals                     import *
+from ccr                        import *
+from device                     import *
+from healthmeasurement          import *
+from medicationschedule         import *
+from healthactionoccurrence     import *
+from healthactionschedule       import *
+from healthactionplan           import *
+from healthactionresult         import *
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/views/reports/medicationadministration.py indivo_server/indivo/views/reports/medicationadministration.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/views/reports/medicationadministration.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/views/reports/medicationadministration.py	2012-02-21 07:36:45.000000000 -0500
@@ -0,0 +1,37 @@
+"""
+Indivo Views -- Medication Administration
+"""
+
+from django.http import HttpResponseBadRequest, HttpResponse
+from indivo.lib.view_decorators import marsloader, DEFAULT_ORDERBY
+from indivo.lib.query import FactQuery, DATE, STRING, NUMBER
+from indivo.models import MedicationAdministration
+
+MEDICATIONADMINISTRATION_FILTERS = {
+  DEFAULT_ORDERBY : ('created_at', DATE)
+}
+
+MEDICATIONADMINISTRATION_TEMPLATE = 'reports/medicationadministration.xml'
+
+def medicationadministration_list(*args, **kwargs):
+  """For 1:1 mapping of URLs to views. Calls _medicationadministration_list"""
+  return _medicationadministration_list(*args, **kwargs)
+
+def carenet_medicationadministration_list(*args, **kwargs):
+  """For 1:1 mapping of URLs to views. Calls _medicationadministration_list"""
+  return _medicationadministration_list(*args, **kwargs)
+
+@marsloader(query_api_support=True)
+def _medicationadministration_list(request, group_by, date_group, aggregate_by,
+             limit, offset, order_by,
+             status, date_range, filters,
+             record=None, carenet=None):
+  q = FactQuery(MedicationAdministration, MEDICATIONADMINISTRATION_FILTERS, 
+                group_by, date_group, aggregate_by,
+                limit, offset, order_by,
+                status, date_range, filters,
+                record, carenet)
+  try:
+    return q.render(MEDICATIONADMINISTRATION_TEMPLATE)
+  except ValueError as e:
+    return HttpResponseBadRequest(str(e))
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/views/reports/medicationfill.py indivo_server/indivo/views/reports/medicationfill.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/views/reports/medicationfill.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/views/reports/medicationfill.py	2012-02-21 07:36:45.000000000 -0500
@@ -0,0 +1,37 @@
+"""
+Indivo Views -- Medication Fill
+"""
+
+from django.http import HttpResponseBadRequest, HttpResponse
+from indivo.lib.view_decorators import marsloader, DEFAULT_ORDERBY
+from indivo.lib.query import FactQuery, DATE, STRING, NUMBER
+from indivo.models import MedicationFill
+
+MEDICATIONFILL_FILTERS = {
+  DEFAULT_ORDERBY : ('created_at', DATE)
+}
+
+MEDICATIONFILL_TEMPLATE = 'reports/medicationfill.xml'
+
+def medicationfill_list(*args, **kwargs):
+  """For 1:1 mapping of URLs to views. Calls _medicationfill_list"""
+  return _medicationfill_list(*args, **kwargs)
+
+def carenet_medicationfill_list(*args, **kwargs):
+  """For 1:1 mapping of URLs to views. Calls _medicationfill_list"""
+  return _medicationfill_list(*args, **kwargs)
+
+@marsloader(query_api_support=True)
+def _medicationfill_list(request, group_by, date_group, aggregate_by,
+             limit, offset, order_by,
+             status, date_range, filters,
+             record=None, carenet=None):
+  q = FactQuery(MedicationFill, MEDICATIONFILL_FILTERS, 
+                group_by, date_group, aggregate_by,
+                limit, offset, order_by,
+                status, date_range, filters,
+                record, carenet)
+  try:
+    return q.render(MEDICATIONFILL_TEMPLATE)
+  except ValueError as e:
+    return HttpResponseBadRequest(str(e))
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/views/reports/medicationorder.py indivo_server/indivo/views/reports/medicationorder.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/views/reports/medicationorder.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/views/reports/medicationorder.py	2012-02-21 07:36:45.000000000 -0500
@@ -0,0 +1,37 @@
+"""
+Indivo Views -- Medication Order
+"""
+
+from django.http import HttpResponseBadRequest, HttpResponse
+from indivo.lib.view_decorators import marsloader, DEFAULT_ORDERBY
+from indivo.lib.query import FactQuery, DATE, STRING, NUMBER
+from indivo.models import MedicationOrder
+
+MEDICATIONORDER_FILTERS = {
+  DEFAULT_ORDERBY : ('created_at', DATE)
+}
+
+MEDICATIONORDER_TEMPLATE = 'reports/medicationorder.xml'
+
+def medicationorder_list(*args, **kwargs):
+  """For 1:1 mapping of URLs to views. Calls _medicationorder_list"""
+  return _medicationorder_list(*args, **kwargs)
+
+def carenet_medicationorder_list(*args, **kwargs):
+  """For 1:1 mapping of URLs to views. Calls _medicationorder_list"""
+  return _medicationorder_list(*args, **kwargs)
+
+@marsloader(query_api_support=True)
+def _medicationorder_list(request, group_by, date_group, aggregate_by,
+             limit, offset, order_by,
+             status, date_range, filters,
+             record=None, carenet=None):
+  q = FactQuery(MedicationOrder, MEDICATIONORDER_FILTERS, 
+                group_by, date_group, aggregate_by,
+                limit, offset, order_by,
+                status, date_range, filters,
+                record, carenet)
+  try:
+    return q.render(MEDICATIONORDER_TEMPLATE)
+  except ValueError as e:
+    return HttpResponseBadRequest(str(e))
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/views/reports/medicationscheduleitem.py indivo_server/indivo/views/reports/medicationscheduleitem.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/views/reports/medicationscheduleitem.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/views/reports/medicationscheduleitem.py	2012-02-21 07:36:45.000000000 -0500
@@ -0,0 +1,37 @@
+"""
+Indivo Views -- Medication Schedule Item
+"""
+
+from django.http import HttpResponseBadRequest, HttpResponse
+from indivo.lib.view_decorators import marsloader, DEFAULT_ORDERBY
+from indivo.lib.query import FactQuery, DATE, STRING, NUMBER
+from indivo.models import MedicationScheduleItem
+
+MEDICATIONSCHEDULEITEM_FILTERS = {
+  DEFAULT_ORDERBY : ('created_at', DATE)
+}
+
+MEDICATIONSCHEDULEITEM_TEMPLATE = 'reports/medicationscheduleitem.xml'
+
+def medicationscheduleitem_list(*args, **kwargs):
+  """For 1:1 mapping of URLs to views. Calls _medicationscheduleitem_list"""
+  return _medicationscheduleitem_list(*args, **kwargs)
+
+def carenet_medicationscheduleitem_list(*args, **kwargs):
+  """For 1:1 mapping of URLs to views. Calls _medicationscheduleitem_list"""
+  return _medicationscheduleitem_list(*args, **kwargs)
+
+@marsloader(query_api_support=True)
+def _medicationscheduleitem_list(request, group_by, date_group, aggregate_by,
+             limit, offset, order_by,
+             status, date_range, filters,
+             record=None, carenet=None):
+  q = FactQuery(MedicationScheduleItem, MEDICATIONSCHEDULEITEM_FILTERS, 
+                group_by, date_group, aggregate_by,
+                limit, offset, order_by,
+                status, date_range, filters,
+                record, carenet)
+  try:
+    return q.render(MEDICATIONSCHEDULEITEM_TEMPLATE)
+  except ValueError as e:
+    return HttpResponseBadRequest(str(e))
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/views/reports/medicationschedule.py indivo_server/indivo/views/reports/medicationschedule.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/views/reports/medicationschedule.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/views/reports/medicationschedule.py	2012-04-20 12:56:59.000000000 -0400
@@ -0,0 +1,61 @@
+"""
+Indivo Views -- MedicationSchedule
+"""
+
+from django.http import HttpResponseBadRequest, HttpResponse
+from indivo.lib.view_decorators import marsloader, DEFAULT_ORDERBY
+from indivo.lib.query import FactQuery, DATE, STRING, NUMBER
+from indivo.models import MedicationSchedule
+
+MEDICATIONSCHEDULE_FILTERS = {
+    DEFAULT_ORDERBY : ('created_at', DATE),
+    'name': ('name', STRING),
+    'name_type' : ('name_type', STRING),
+    'name_value' : ('name_value', STRING),
+    'name_abbrev' : ('name_abbrerv', STRING),    
+    'scheduledBy': ('scheduledBy', STRING),
+    'dateScheduled': ('dateScheduled', DATE),
+    'dateStart': ('dateStart', DATE),
+    'dateEnd': ('dateEnd', DATE),
+    'recurrenceRule_frequency': ('recurrenceRule_frequency', STRING),
+    'recurrenceRule_frequency_type' : ('recurrenceRule_frequency_type', STRING),
+    'recurrenceRule_frequency_value' : ('recurrenceRule_frequency_value', STRING),
+    'recurrenceRule_frequency_abbrev' : ('recurrenceRule_frequency_abbrerv', STRING),    
+    'recurrenceRule_interval': ('recurrenceRule_interval', STRING),
+    'recurrenceRule_interval_type' : ('recurrenceRule_interval_type', STRING),
+    'recurrenceRule_interval_value' : ('recurrenceRule_interval_value', STRING),
+    'recurrenceRule_interval_abbrev' : ('recurrenceRule_interval_abbrerv', STRING),    
+    'recurrenceRule_count': ('recurrenceRule_count', NUMBER),
+    'dose_textvalue' : ('dose_textvalue', STRING),
+    'dose_value' : ('dose_value', STRING),
+    'dose_unit' : ('dose_unit', STRING),
+    'dose_unit_type' : ('dose_unit_type', STRING),
+    'dose_unit_value' : ('dose_unit_value', STRING),
+    'dose_unit_abbrev' : ('dose_unit_abbrerv', STRING),
+    'instructions': ('instructions', STRING)
+}
+
+MEDICATIONSCHEDULE_TEMPLATE = 'reports/medicationschedule.xml'
+
+def medicationschedule_list(*args, **kwargs):
+    """For 1:1 mapping of URLs to views. Calls _medicationschedule_list"""
+    return _medicationschedule_list(*args, **kwargs)
+
+def carenet_medicationschedule_list(*args, **kwargs):
+    """For 1:1 mapping of URLs to views. Calls _medicationschedule_list"""
+    return _medicationschedule_list(*args, **kwargs)
+
+@marsloader(query_api_support=True)
+def _medicationschedule_list(request, group_by, date_group, aggregate_by,
+                             limit, offset, order_by,
+                             status, date_range, filters,
+                             record=None, carenet=None):
+    q = FactQuery(MedicationSchedule, MEDICATIONSCHEDULE_FILTERS, 
+                  group_by, date_group, aggregate_by,
+                  limit, offset, order_by,
+                  status, date_range, filters,
+                  record, carenet)
+    try:
+        return q.render(MEDICATIONSCHEDULE_TEMPLATE)
+    except ValueError as e:
+        return HttpResponseBadRequest(str(e))
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/views/reports/videomessage.py indivo_server/indivo/views/reports/videomessage.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/views/reports/videomessage.py	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/indivo/views/reports/videomessage.py	2012-02-21 07:36:45.000000000 -0500
@@ -0,0 +1,37 @@
+"""
+Indivo Views -- Video Message
+"""
+
+from django.http import HttpResponseBadRequest, HttpResponse
+from indivo.lib.view_decorators import marsloader, DEFAULT_ORDERBY
+from indivo.lib.query import FactQuery, DATE, STRING, NUMBER
+from indivo.models import VideoMessage
+
+VIDEOMESSAGE_FILTERS = {
+  DEFAULT_ORDERBY : ('created_at', DATE)
+}
+
+VIDEOMESSAGE_TEMPLATE = 'reports/videomessage.xml'
+
+def videomessage_list(*args, **kwargs):
+  """For 1:1 mapping of URLs to views. Calls _videomessage_list"""
+  return _videomessage_list(*args, **kwargs)
+
+def carenet_videomessage_list(*args, **kwargs):
+  """For 1:1 mapping of URLs to views. Calls _videomessage_list"""
+  return _videomessage_list(*args, **kwargs)
+
+@marsloader(query_api_support=True)
+def _videomessage_list(request, group_by, date_group, aggregate_by,
+             limit, offset, order_by,
+             status, date_range, filters,
+             record=None, carenet=None):
+  q = FactQuery(VideoMessage, VIDEOMESSAGE_FILTERS, 
+                group_by, date_group, aggregate_by,
+                limit, offset, order_by,
+                status, date_range, filters,
+                record, carenet)
+  try:
+    return q.render(VIDEOMESSAGE_TEMPLATE)
+  except ValueError as e:
+    return HttpResponseBadRequest(str(e))
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/indivo/views/reports/vitals.py indivo_server/indivo/views/reports/vitals.py
--- fyoung-indivo_server_1_0-3f85dc7/indivo/views/reports/vitals.py	2012-02-27 12:31:32.000000000 -0500
+++ indivo_server/indivo/views/reports/vitals.py	2012-02-28 12:37:26.000000000 -0500
@@ -14,8 +14,7 @@
 
 VITALS_FILTERS = {
   'category' : ('name', STRING),
-  'value' : ('value', NUMBER),
-  'date_measured': ('date_measured', DATE),
+  'date_measured_start': ('date_measured_start', DATE),
   DEFAULT_ORDERBY : ('created_at', DATE)
 }
 
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/README.rst indivo_server/README.rst
--- fyoung-indivo_server_1_0-3f85dc7/README.rst	2012-02-27 12:31:32.000000000 -0500
+++ indivo_server/README.rst	2012-03-01 11:48:56.000000000 -0500
@@ -1,3 +1,13 @@
+Important note about cloning
+=====================================================================
+
+For the Python import paths to work, you must do the following: 
+
+When cloning this repo, clone into indivo_server.
+
+* git clone https://github.com/fyoung/indivo_server_1_0.git indivo_server
+
+
 Welcome to Indivo
 =================
 
@@ -38,4 +48,4 @@
 GNU General Public License for more details.
 
 A copy of the GNU General Public License is located in the LICENSE.txt
-file in this repository, and at http://www.gnu.org/licenses/.
\ No newline at end of file
+file in this repository, and at http://www.gnu.org/licenses/.
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/adherenceitem.xsd indivo_server/schemas/doc_schemas/adherenceitem.xsd
--- fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/adherenceitem.xsd	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/schemas/doc_schemas/adherenceitem.xsd	2012-02-21 07:37:05.000000000 -0500
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="ISO-8859-1" ?>
+<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="http://indivo.org/vocab/xml/documents#"
+	   xmlns:indivo="http://indivo.org/vocab/xml/documents#"
+	   elementFormDefault="qualified">
+
+	<xs:include schemaLocation="codes.xsd" />
+	<xs:include schemaLocation="provider.xsd" />
+	<xs:include schemaLocation="values.xsd" />
+
+	<xs:complexType name="AdherenceItem">
+		<xs:sequence>
+			<xs:element name="name" type="indivo:CodedValue" minOccurs="1" maxOccurs="1" />
+			<xs:element name="reportedBy" type="xs:string" minOccurs="1" maxOccurs="1" />
+			<xs:element name="dateReported" type="xs:dateTime" minOccurs="1" maxOccurs="1" />
+			<xs:element name="recurrenceIndex" type="xs:integer" minOccurs="0" maxOccurs="1" />
+			<xs:element name="adherence" type="xs:boolean" minOccurs="1" maxOccurs="1" />
+			<xs:element name="nonadherenceReason" type="xs:string" minOccurs="0" maxOccurs="1" />
+		</xs:sequence>
+	</xs:complexType>
+
+  <xs:element name="AdherenceItem" type="indivo:AdherenceItem" />
+
+</xs:schema>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/device.xml indivo_server/schemas/doc_schemas/device.xml
--- fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/device.xml	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/schemas/doc_schemas/device.xml	2012-04-18 11:06:00.000000000 -0400
@@ -0,0 +1,24 @@
+<!--~
+  ~ Copyright 2012 John Moore, Scott Gilroy
+  ~
+  ~ This file is part of CollaboRhythm.
+  ~
+  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
+  ~ version.
+  ~
+  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
+  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+  ~ details.
+  ~
+  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
+  ~ <http://www.gnu.org/licenses/>.
+  -->
+<Device xmlns="http://indivo.org/vocab/xml/documents#">
+	<name>FORA D15b</name>
+	<id>3048202</id>
+	<type>2-in-1 Blood Glucose and Pressure monitor</type>
+	<indication>hypertension</indication>
+	<vendor>FORA</vendor>
+	<description>2-in-1 Blood Glucose and Pressure monitor</description>
+</Device>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/device.xsd indivo_server/schemas/doc_schemas/device.xsd
--- fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/device.xsd	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/schemas/doc_schemas/device.xsd	2012-04-18 11:04:49.000000000 -0400
@@ -0,0 +1,98 @@
+<?xml version="1.0" encoding="ISO-8859-1" ?>
+<!--~
+  ~ Copyright 2012 John Moore, Scott Gilroy
+  ~
+  ~ This file is part of CollaboRhythm.
+  ~
+  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
+  ~ version.
+  ~
+  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
+  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+  ~ details.
+  ~
+  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
+  ~ <http://www.gnu.org/licenses/>.
+  -->
+<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
+		   targetNamespace="http://indivo.org/vocab/xml/documents#"
+		   xmlns:indivo="http://indivo.org/vocab/xml/documents#"
+		   elementFormDefault="qualified">
+
+	<xs:include schemaLocation="codes.xsd"/>
+
+	<xs:complexType name="Device">
+		<xs:sequence>
+			<xs:element name="name" type="indivo:CodedValue" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Name of the device
+						Fora D40d for example
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="id" type="indivo:CodedValue" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Unique id associated with this piece of equipment
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="type" type="indivo:CodedValue" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Category of equipment
+						sphygmomanometer for example
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="indication" type="xs:string" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Reason for the device
+						Devices can also be related to problems, but some devices, such as a pedometer does not need to
+						be related to a problem
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="vendor" type="indivo:CodedValue" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Company that manufactures the device
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="description" type="xs:string" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Description of this device
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="specification" type="xs:string" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Potentially specific specifications that the device meets
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="certification" type="xs:string" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Potentially the type of FDA or other certification associated with the device
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+		</xs:sequence>
+	</xs:complexType>
+	<xs:element name="Device" type="indivo:Device">
+		<xs:annotation>
+			<xs:documentation xml:lang="en">
+				Durable health device. Each Device document should be related from any HealthActionPlan that uses it
+				with the ?device? relationship type and from any appropriate Measurement documents using the ?source?
+				relationship type.
+			</xs:documentation>
+		</xs:annotation>
+	</xs:element>
+</xs:schema>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/equipmentscheduleitem.xsd indivo_server/schemas/doc_schemas/equipmentscheduleitem.xsd
--- fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/equipmentscheduleitem.xsd	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/schemas/doc_schemas/equipmentscheduleitem.xsd	2012-02-21 07:37:05.000000000 -0500
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="ISO-8859-1" ?>
+<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="http://indivo.org/vocab/xml/documents#"
+	   xmlns:indivo="http://indivo.org/vocab/xml/documents#"
+	   elementFormDefault="qualified">
+
+	<xs:include schemaLocation="codes.xsd" />
+	<xs:include schemaLocation="provider.xsd" />
+	<xs:include schemaLocation="values.xsd" />
+
+	<xs:complexType name="RecurrenceRule">
+		<xs:sequence>
+			<xs:element name="frequency" type="indivo:CodedValue" minOccurs="1" maxOccurs="1" />
+			<xs:element name="interval" type="indivo:CodedValue" minOccurs="0" maxOccurs="1" />
+			<xs:choice>
+				<xs:element name="dateUntil" type="xs:dateTime" minOccurs="0" maxOccurs="1" />	
+				<xs:element name="count" type="xs:integer" minOccurs="0" maxOccurs="1" />
+			</xs:choice>
+		</xs:sequence>
+	</xs:complexType>
+
+	<xs:complexType name="EquipmentScheduleItem">
+		<xs:sequence>
+			<xs:element name="name" type="indivo:CodedValue" minOccurs="1" maxOccurs="1" />
+			<xs:element name="scheduledBy" type="xs:string" minOccurs="1" maxOccurs="1" />
+			<xs:element name="dateScheduled" type="xs:dateTime" minOccurs="1" maxOccurs="1" />
+			<xs:element name="dateStart" type="xs:dateTime" minOccurs="1" maxOccurs="1" />
+			<xs:element name="dateEnd" type="xs:dateTime" minOccurs="0" maxOccurs="1" />
+			<xs:element name="recurrenceRule" type="indivo:RecurrenceRule" minOccurs="0" maxOccurs="1" />	
+			<xs:element name="instructions" type="xs:string" minOccurs="0" maxOccurs="1" />	
+		</xs:sequence>
+	</xs:complexType>
+
+  <xs:element name="EquipmentScheduleItem" type="indivo:EquipmentScheduleItem" />
+
+</xs:schema>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/healthactionoccurrence.xml indivo_server/schemas/doc_schemas/healthactionoccurrence.xml
--- fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/healthactionoccurrence.xml	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/schemas/doc_schemas/healthactionoccurrence.xml	2012-04-18 11:26:07.000000000 -0400
@@ -0,0 +1,20 @@
+<!--~
+  ~ Copyright 2012 John Moore, Scott Gilroy
+  ~
+  ~ This file is part of CollaboRhythm.
+  ~
+  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
+  ~ version.
+  ~
+  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
+  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+  ~ details.
+  ~
+  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
+  ~ <http://www.gnu.org/licenses/>.
+  -->
+<HealthActionOccurrence xmlns="http://indivo.org/vocab/xml/documents#">
+	<name>Atorvastatin 40 MG Oral Tablet [Lipitor]</name>
+	<recurrenceIndex>0</recurrenceIndex>
+</HealthActionOccurrence>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/healthactionoccurrence.xsd indivo_server/schemas/doc_schemas/healthactionoccurrence.xsd
--- fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/healthactionoccurrence.xsd	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/schemas/doc_schemas/healthactionoccurrence.xsd	2012-04-18 11:25:10.000000000 -0400
@@ -0,0 +1,62 @@
+<?xml version="1.0" encoding="ISO-8859-1" ?>
+<!--~
+  ~ Copyright 2012 John Moore, Scott Gilroy
+  ~
+  ~ This file is part of CollaboRhythm.
+  ~
+  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
+  ~ version.
+  ~
+  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
+  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+  ~ details.
+  ~
+  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
+  ~ <http://www.gnu.org/licenses/>.
+  -->
+<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
+		   targetNamespace="http://indivo.org/vocab/xml/documents#"
+		   xmlns:indivo="http://indivo.org/vocab/xml/documents#"
+		   elementFormDefault="qualified">
+
+	<xs:include schemaLocation="codes.xsd"/>
+	<xs:include schemaLocation="provider.xsd"/>
+	<xs:include schemaLocation="values.xsd"/>
+
+	<xs:complexType name="HealthActionOccurrence">
+		<xs:sequence>
+			<xs:element name="name" type="indivo:CodedValue" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Name of the health action
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="recurrenceIndex" type="xs:integer" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						The number of the recurrence instance to which the HealthActionOccurrence document applies.
+						Index is 0-based, so first recurrence would have an index of 0.
+						For HealthActionSchedule documents that recur, there needs to be a way for the HealthActionOccurrence to refer to a specific occurrence. This element refers to a specific index in the recurrence count.
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+		</xs:sequence>
+	</xs:complexType>
+
+	<xs:element name="HealthActionOccurrence" type="indivo:HealthActionOccurrence">
+		<xs:annotation>
+			<xs:documentation xml:lang="en">
+				Documents are related to specific occurrences of a HealthActionSchedule by creating a
+				HeathActionOccurrence document for any appropriate occurrence. These documents may include
+				MedicationAdministration, HealthActionResult, Measurement, Annotation, etc. Each HealthActionOccurrence
+				document should be related from the appropriate HealthActionSchedule document with the
+				?healthActionOccurrence? relationship type and to the appropriate MedicationAdministration, Measurement,
+				etc with the ?healthActionResult? relationship type.
+
+				If relationships in Indivo supported an index attribute, then this document type would be unnecessary.
+			</xs:documentation>
+		</xs:annotation>
+	</xs:element>
+</xs:schema>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/healthactionplan.xml indivo_server/schemas/doc_schemas/healthactionplan.xml
--- fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/healthactionplan.xml	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/schemas/doc_schemas/healthactionplan.xml	2012-04-18 09:52:28.000000000 -0400
@@ -0,0 +1,225 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--~
+  ~ Copyright 2012 John Moore, Scott Gilroy
+  ~
+  ~ This file is part of CollaboRhythm.
+  ~
+  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
+  ~ version.
+  ~
+  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
+  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+  ~ details.
+  ~
+  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
+  ~ <http://www.gnu.org/licenses/>.
+  -->
+<HealthActionPlan xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://indivo.org/vocab/xml/documents#">
+	<name>Blood Pressure Plan</name>
+	<planType>prescribed</planType>
+	<plannedBy>rpoole@records.media.mit.edu </plannedBy>
+	<datePlanned>2009-05-16T12:51:00-04:00</datePlanned>
+	<dateExpires>2009-05-16T12:51:00-04:00</dateExpires>
+	<indication>blood pressure measurementPlans protocol</indication> <!-- optional. allows you to specify that this plan has an specific indication -->
+	<instructions>Put on the blood pressure monitor and Follow the protocol</instructions>
+	<system type="http://system.repository.coded.values/" value="1">CollaboRhythm</system>
+	
+	<actions>	
+		<action xsi:type="ActionGroup">
+			<position type="http://position.coded.values/" value="2">Seated</position>
+			<stopConditions />
+			<targets />
+			<measurementPlans/>
+			<devicePlans/>
+			<medicationPlans />
+			
+			<repeatCount>3</repeatCount> 	
+			<actions>
+				<action	xsi:type="ActionStep">
+					<position />
+					<stopConditions>
+						<stopCondition>
+							<name type="http://actions.repository.coded.values/" value="3">time</name>	
+							<value>
+								<value>3</value>
+								<unit type="http://indivo.org/codes/units#" value="m" abbrev="m">minutes</unit>
+							</value>
+							<operator type="http://comparison.operators/" value="1">Greater or equal than</operator>
+						</stopCondition>
+					</stopConditions>
+					<targets />
+					<measurementPlans/>
+					<devicePlans />
+					<medicationPlans />
+					
+					<name type="http://actions.repository/" value="1">Rest</name>	
+					<type type="http://actions.repository.type/" value="1">Rest</type>
+					<additionalDetails/>
+					<instructions>Sit for three minutes</instructions>
+				</action>
+				
+				<action	xsi:type="ActionStep">
+					<position />
+					<stopConditions />
+					<targets />
+					<measurementPlans>
+						<measurementPlan>
+							<name type="http://measures.coded.values/" value="1">BP</name>
+							<type type="http://measures.type.coded.values/" value="3">Systolic</type>
+							<aggregationFunction type="http://aggregation.coded.values/">avg</aggregationFunction>
+						</measurementPlan>
+						<measurementPlan>
+							<name type="http://measures.coded.values/" value="1">BP</name>
+							<type type="http://measures.type.coded.values/" value="3">Diastolic</type>
+							<aggregationFunction type="http://aggregation.coded.values/">avg</aggregationFunction>
+						</measurementPlan>
+						<measurementPlan>
+							<name type="http://measures.coded.values/" value="1">HR</name>
+							<type/>
+							<aggregationFunction type="http://aggregation.coded.values/">avg</aggregationFunction>
+						</measurementPlan>
+					</measurementPlans>
+					
+					<devicePlans/>
+					<medicationPlans />
+					
+					<name type="http://actions.repository/" value="1">Take Blood Pressure</name>	
+					<type type="http://actions.repository.type/" value="1">Blood Pressure</type>
+					<additionalDetails/>
+					<instructions>Take Blood Pressure while Seated</instructions>
+				</action>
+			</actions>
+		</action>
+		<action xsi:type="ActionGroup">
+			<position type="http://position.coded.values/" value="2">Lie down</position>
+			<stopConditions />
+			<targets />
+			<measurementPlans/>
+			<devicePlans/>
+			<medicationPlans />
+			
+			<repeatCount>3</repeatCount> 	
+			<actions>
+				<action	xsi:type="ActionStep">
+					<position />
+					<stopConditions>
+						<stopCondition>
+							<name type="http://actions.repository.coded.values/" value="3">time</name>	
+							<value>
+								<value>3</value>
+								<unit type="http://indivo.org/codes/units#" value="m" abbrev="m">minutes</unit>
+							</value>
+							<operator type="http://comparison.operators/" value="1">Greater or equal than</operator>
+						</stopCondition>
+					</stopConditions>
+					<targets />
+					<measurementPlans/>
+					<devicePlans />
+					<medicationPlans />
+					
+					<name type="http://actions.repository/" value="1">Rest</name>	
+					<type type="http://actions.repository.type/" value="1">Rest</type>
+					<additionalDetails/>
+					<instructions>Sit for three minutes</instructions>
+				</action>
+				
+				<action	xsi:type="ActionStep">
+					<position />
+					<stopConditions />
+					<targets />
+					<measurementPlans>
+						<measurementPlan>
+							<name type="http://measures.coded.values/" value="1">BP</name>
+							<type type="http://measures.type.coded.values/" value="3">Systolic</type>
+							<aggregationFunction type="http://aggregation.coded.values/">avg</aggregationFunction>
+						</measurementPlan>
+						<measurementPlan>
+							<name type="http://measures.coded.values/" value="1">BP</name>
+							<type type="http://measures.type.coded.values/" value="3">Diastolic</type>
+							<aggregationFunction type="http://aggregation.coded.values/">avg</aggregationFunction>
+						</measurementPlan>
+						<measurementPlan>
+							<name type="http://measures.coded.values/" value="1">HR</name>
+							<type/>
+							<aggregationFunction type="http://aggregation.coded.values/">avg</aggregationFunction>
+						</measurementPlan>
+					</measurementPlans>
+					
+					<devicePlans/>
+					<medicationPlans />
+					
+					<name type="http://actions.repository/" value="1">Take Blood Pressure</name>	
+					<type type="http://actions.repository.type/" value="1">Blood Pressure</type>
+					<additionalDetails/>
+					<instructions>Take Blood Pressure while Seated</instructions>
+				</action>
+			</actions>
+		</action>
+		<action xsi:type="ActionGroup">
+			<position type="http://position.coded.values/" value="2">Stand</position>
+			<stopConditions />
+			<targets />
+			<measurementPlans/>
+			<devicePlans/>
+			<medicationPlans />
+			
+			<repeatCount>3</repeatCount> 	
+			<actions>
+				<action	xsi:type="ActionStep">
+					<position />
+					<stopConditions>
+						<stopCondition>
+							<name type="http://actions.repository.coded.values/" value="3">time</name>	
+							<value>
+								<value>3</value>
+								<unit type="http://indivo.org/codes/units#" value="m" abbrev="m">minutes</unit>
+							</value>
+							<operator type="http://comparison.operators/" value="1">Greater or equal than</operator>
+						</stopCondition>
+					</stopConditions>
+					<targets />
+					<measurementPlans/>
+					<devicePlans />
+					<medicationPlans />
+					
+					<name type="http://actions.repository/" value="1">Rest</name>	
+					<type type="http://actions.repository.type/" value="1">Rest</type>
+					<additionalDetails/>
+					<instructions>Sit for three minutes</instructions>
+				</action>
+				
+				<action	xsi:type="ActionStep">
+					<position />
+					<stopConditions />
+					<targets />
+					<measurementPlans>
+						<measurementPlan>
+							<name type="http://measures.coded.values/" value="1">BP</name>
+							<type type="http://measures.type.coded.values/" value="3">Systolic</type>
+							<aggregationFunction type="http://aggregation.coded.values/">avg</aggregationFunction>
+						</measurementPlan>
+						<measurementPlan>
+							<name type="http://measures.coded.values/" value="1">BP</name>
+							<type type="http://measures.type.coded.values/" value="3">Diastolic</type>
+							<aggregationFunction type="http://aggregation.coded.values/">avg</aggregationFunction>
+						</measurementPlan>
+						<measurementPlan>
+							<name type="http://measures.coded.values/" value="1">HR</name>
+							<type/>
+							<aggregationFunction type="http://aggregation.coded.values/">avg</aggregationFunction>
+						</measurementPlan>
+					</measurementPlans>
+					
+					<devicePlans/>
+					<medicationPlans />
+					
+					<name type="http://actions.repository/" value="1">Take Blood Pressure</name>	
+					<type type="http://actions.repository.type/" value="1">Blood Pressure</type>
+					<additionalDetails/>
+					<instructions>Take Blood Pressure while Seated</instructions>
+				</action>
+			</actions>
+		</action>
+	</actions>
+</HealthActionPlan>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/healthactionplan.xsd indivo_server/schemas/doc_schemas/healthactionplan.xsd
--- fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/healthactionplan.xsd	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/schemas/doc_schemas/healthactionplan.xsd	2012-04-18 09:52:28.000000000 -0400
@@ -0,0 +1,425 @@
+<?xml version="1.0" encoding="iso-8859-1" ?>
+
+<!--~
+  ~ Copyright 2012 John Moore, Scott Gilroy
+  ~
+  ~ This file is part of CollaboRhythm.
+  ~
+  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
+  ~ version.
+  ~
+  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
+  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+  ~ details.
+  ~
+  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
+  ~ <http://www.gnu.org/licenses/>.
+  -->
+<xs:schema  xmlns:xs="http://www.w3.org/2001/XMLSchema"
+			xmlns:indivo="http://indivo.org/vocab/xml/documents#"
+			targetNamespace="http://indivo.org/vocab/xml/documents#"
+		   		 elementFormDefault="qualified">
+
+	<xs:include schemaLocation="codes.xsd" />
+	<xs:include schemaLocation="values.xsd" />
+
+	<xs:complexType name="HealthActionPlan">
+		<xs:sequence>
+			<xs:element name="name" type="indivo:CodedValue" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">Name of the Health Action Plan.  Required
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="planType" type="xs:string" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">Type of the Health Action Plan. All plans are ordered in some capacity,
+						whether it is prescribed by a health professional, recommended by a professional or a friend,
+						or self-prescribed. Possible values are "Prescribed", "Recommended", or "Self-prescribed".
+						Note that some patients self-prescribe health actions illegally as well as over-the-counter. Required
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="plannedBy" type="xs:string" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">Person or agent who prescribed the Health Action Plan. Currently,
+						this uses the e-mail address of the person, eventually it should use a more robust form of identity.
+						It might also use an identity for a software agent that automates reordering in the future based on patient data. Required
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="datePlanned" type="xs:dateTime" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">Date and time that the Health Action Plan was ordered. This may be
+						different than the date created in the meta data, for example if it is ordered from a mobile phone
+						and later uploaded, so it needs to be specified here. Required
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="dateExpires" type="xs:dateTime" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">Date and time that the medication will expire. If the patient should only
+						be able to fill the medication during a specific interval, this optional element can be used. Optional
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="indication" type="xs:string" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">Reason for which the Health Action Plan was ordered. Health Action Plans
+						should be related to problems, but some Health Action Plan such as vitamins do not require problems,
+						so having an indication is needed. Required
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="instructions" type="xs:string" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">Instructions for administering the Health Action Plan. Optional
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="system" type="indivo:CodedValue" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">Name of the system to use. Optional
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="actions"  minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">List of the actions of the Health Action Plan. This can contain one or more
+						actions of the type ActionGroups or ActionSteps. It generates a tree data structure were the leafs are
+						represented by ActionSteps, and the internal nodes are represented by ActionGroups. Required
+					</xs:documentation>
+				</xs:annotation>
+				<xs:complexType >
+					<xs:sequence>
+						<xs:element name="action" type="indivo:Action" minOccurs="1" maxOccurs="unbounded">
+							<xs:annotation>
+								<xs:documentation xml:lang="en">Instance of an action of the type ActionGroups or ActionSteps. Required
+								</xs:documentation>
+							</xs:annotation>
+						</xs:element>
+					</xs:sequence>
+				</xs:complexType>
+			</xs:element>
+		</xs:sequence>
+	</xs:complexType>
+
+	<xs:complexType name="Action">
+		<xs:sequence>
+			<xs:element name="position" type="indivo:CodedValue" minOccurs="0" maxOccurs="1" >
+				<xs:annotation>
+					<xs:documentation xml:lang="en">The current action has to be performed with a body in a specific position.
+						For example, you may take the blood pressure standing, lying or seating. Optional
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="stopConditions" type="indivo:stopConditions" minOccurs="0" maxOccurs="1" >
+				<xs:annotation>
+					<xs:documentation xml:lang="en">The current action and its children in the tree structure will stop when one item
+						in the list of conditions is true. Optional
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="targets" type="indivo:targets" minOccurs="0" maxOccurs="1"  >
+				<xs:annotation>
+					<xs:documentation xml:lang="en">The current action has ranged values of measures that define target zones.
+						These targets may have different severity levels. For example: maintaining a certain Heart Rate during a
+						physical exercise may be a good target, but having some range of Blood Oxygenation may be a dangerous target. Optional
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="measurementPlans" type="indivo:measurementPlans" minOccurs="0" maxOccurs="1" >
+				<xs:annotation>
+					<xs:documentation xml:lang="en">List of measurements that should be taken while the health action is performed. Optional
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="devicePlans" type="indivo:devicePlans" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">List of devices that should be used for this health action. Optional
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="medicationPlans" type="indivo:medicationPlans" minOccurs="0" maxOccurs="1" >
+				<xs:annotation>
+					<xs:documentation xml:lang="en">List of medications that should be administered during this health action. Optional
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+		</xs:sequence>
+	</xs:complexType>
+
+	<xs:complexType name="ActionGroup">
+		<xs:complexContent>
+			<xs:extension base="indivo:Action">
+				<xs:sequence>
+					<xs:element name="repeatCount" type="xs:integer" minOccurs="0" maxOccurs="1" >
+						<xs:annotation>
+							<xs:documentation xml:lang="en">Number of times the actions in the group should be repeated in the same order they were prescribed.
+								For example, if action one is rest lying for 5 minutes, and the following action is take a blood pressure reading,
+								and the repeatCount is 3 you will do the same procedure 3 times. Similarly, in the results you will find as many
+								occurrences as times every action has been repeated. In case repeatCount is not specified then its value is 1. Optional
+							</xs:documentation>
+						</xs:annotation>
+					</xs:element>
+					<xs:element name="actions" minOccurs="1" maxOccurs="1" >
+						<xs:annotation>
+							<xs:documentation xml:lang="en">List of the actions of this ActionGroup.
+								This can contain one or more actions of the type ActionGroups or ActionSteps.
+								It generates a sub tree data structure were the leafs are represented by ActionSteps,
+								and the branches are represented by ActionGroups. Required
+							</xs:documentation>
+						</xs:annotation>
+						<xs:complexType >
+							<xs:sequence>
+								<xs:element name="action" type="indivo:Action" minOccurs="1" maxOccurs="unbounded">
+									<xs:annotation>
+										<xs:documentation xml:lang="en">Instance of an action of the type ActionGroups or ActionSteps. Required
+										</xs:documentation>
+									</xs:annotation>
+								</xs:element>
+							</xs:sequence>
+						</xs:complexType>
+					</xs:element>
+				</xs:sequence>
+			</xs:extension>
+		</xs:complexContent>
+	</xs:complexType>
+
+	<xs:complexType name="ActionStep">
+		<xs:complexContent>
+			<xs:extension base="indivo:Action">
+				<xs:sequence>
+					<xs:element name="name" type="indivo:CodedValue" minOccurs="1" maxOccurs="1" >
+						<xs:annotation>
+							<xs:documentation xml:lang="en">Name of the ActionStep. Required
+							</xs:documentation>
+						</xs:annotation>
+					</xs:element>
+					<xs:element name="type" type="indivo:CodedValue" minOccurs="1" maxOccurs="1" >
+						<xs:annotation>
+							<xs:documentation xml:lang="en">Category of the ActionStep. Required
+							</xs:documentation>
+						</xs:annotation>
+					</xs:element>
+					<xs:element name="additionalDetails" type="xs:string" minOccurs="0" maxOccurs="1">
+						<xs:annotation>
+							<xs:documentation xml:lang="en">Additional Details. Optional
+							</xs:documentation>
+						</xs:annotation>
+					</xs:element>
+					<xs:element name="instructions" type="xs:string" minOccurs="0" maxOccurs="1">
+						<xs:annotation>
+							<xs:documentation xml:lang="en">Instructions for the specific ActionStep. Optional
+							</xs:documentation>
+						</xs:annotation>
+					</xs:element>
+				</xs:sequence>
+			</xs:extension>
+		</xs:complexContent>
+	</xs:complexType>
+
+
+
+	<xs:complexType name="measurementPlans">
+		<xs:sequence>
+			<xs:element name="measurementPlan" minOccurs="0" maxOccurs="unbounded">
+				<xs:complexType>
+					<xs:sequence>
+						<xs:element name="name" type="indivo:CodedValue" minOccurs="1" maxOccurs="1">
+							<xs:annotation>
+								<xs:documentation xml:lang="en">Name of the measure that has to be recorded during the execution of the Action.
+									They can be both vital signs and other kind of measures.
+									For example: Heart Rate, Blood Pressure, Adherence, Oxygenation, Distance etc. Required
+								</xs:documentation>
+							</xs:annotation>
+						</xs:element>
+						<xs:element name="type" type="indivo:CodedValue" minOccurs="0" maxOccurs="1">
+							<xs:annotation>
+								<xs:documentation xml:lang="en">Category of the measurement. Optional
+								</xs:documentation>
+							</xs:annotation>
+						</xs:element>
+						<xs:element name="aggregationFunction" type="indivo:CodedValue" minOccurs="1" maxOccurs="1">
+							<xs:annotation>
+								<xs:documentation xml:lang="en">Rule that will be use as an Aggregation function when combining the measured data.
+									For example: average, sum, minimum, maximum, counter. Required
+								</xs:documentation>
+							</xs:annotation>
+						</xs:element>
+					</xs:sequence>
+				</xs:complexType>
+			</xs:element>
+		</xs:sequence>
+	</xs:complexType>
+
+	<xs:complexType name="devicePlans">
+		<xs:sequence>
+			<xs:element name="devicePlan" minOccurs="0" maxOccurs="unbounded">
+				<xs:complexType>
+					<xs:sequence>
+						<xs:element name="name" type="indivo:CodedValue" minOccurs="0" maxOccurs="1">
+							<xs:annotation>
+								<xs:documentation xml:lang="en">Name of the device. For example, Fora D40d. Optional
+								</xs:documentation>
+							</xs:annotation>
+						</xs:element>
+						<xs:element name="type" type="indivo:CodedValue" minOccurs="0" maxOccurs="1">
+							<xs:annotation>
+								<xs:documentation xml:lang="en">Category of the device. Sphygmomanometer, for example. Optional
+								</xs:documentation>
+							</xs:annotation>
+						</xs:element>
+						<xs:element name="value" type="indivo:ValueAndUnit" minOccurs="0" maxOccurs="1">
+							<xs:annotation>
+								<xs:documentation xml:lang="en">Specification of a tuning value for the device. For example,
+									when using a dumbbell you may want to specify the weight. Optional
+								</xs:documentation>
+							</xs:annotation>
+						</xs:element>
+						<xs:element name="site" type="indivo:CodedValue" minOccurs="0" maxOccurs="1">
+							<xs:annotation>
+								<xs:documentation xml:lang="en">Site where the device has to be applied. For example, right arm. Optional
+								</xs:documentation>
+							</xs:annotation>
+						</xs:element>
+						<xs:element name="instructions" type="xs:string" minOccurs="0" maxOccurs="1">
+							<xs:annotation>
+								<xs:documentation xml:lang="en">Instructions for the specific Device. Optional
+								</xs:documentation>
+							</xs:annotation>
+						</xs:element>
+					</xs:sequence>
+				</xs:complexType>
+			</xs:element>
+		</xs:sequence>
+	</xs:complexType>
+
+	<xs:complexType name="medicationPlans">
+		<xs:sequence>
+			<xs:element name="medicationPlan" minOccurs="0" maxOccurs="unbounded">
+				<xs:complexType>
+					<xs:sequence>
+						<xs:element name="name" type="indivo:CodedValue" minOccurs="1" maxOccurs="1">
+							<xs:annotation>
+								<xs:documentation xml:lang="en">RxNorm name for the medication. This is a coded value using the url
+									http://rxnav.nlm.nih.gov/REST/rxcui/ where the value is the rxcui (RxNorm Coded Unique Identifier).
+									The rxcui should correspond to the SBD (branded drug name) or SCD (clinical drug name) that is most
+									specific for the medication and includes name and dose for each clinical drug component. Required
+								</xs:documentation>
+							</xs:annotation>
+						</xs:element>
+						<xs:element name="indication" type="xs:string" minOccurs="1" maxOccurs="1">
+							<xs:annotation>
+								<xs:documentation xml:lang="en">Reason for the medication. Medications should be related to problems, but
+									some medications such as vitamins do not require problems, so having an indication is needed. Required
+								</xs:documentation>
+							</xs:annotation>
+						</xs:element>
+						<xs:element name="dose" type="indivo:ValueAndUnit" minOccurs="1" maxOccurs="1">
+							<xs:annotation>
+								<xs:documentation xml:lang="en">Dose of the medication. Required
+								</xs:documentation>
+							</xs:annotation>
+						</xs:element>
+						<xs:element name="route" type="indivo:CodedValue" minOccurs="0" maxOccurs="1">
+							<xs:annotation>
+								<xs:documentation xml:lang="en">Route for administering the medication. Required
+								</xs:documentation>
+							</xs:annotation>
+						</xs:element>
+						<xs:element name="instructions" type="xs:string" minOccurs="0" maxOccurs="1">
+							<xs:annotation>
+								<xs:documentation xml:lang="en">Instructions for the specific Device. Optional
+								</xs:documentation>
+							</xs:annotation>
+						</xs:element>
+					</xs:sequence>
+				</xs:complexType>
+			</xs:element>
+		</xs:sequence>
+	</xs:complexType>
+
+	<xs:complexType name="stopConditions">
+		<xs:sequence>
+			<xs:element name="stopCondition" minOccurs="0" maxOccurs="unbounded">
+				<xs:complexType>
+					<xs:sequence>
+						<xs:element name="name" type="indivo:CodedValue" minOccurs="1" maxOccurs="1" >
+							<xs:annotation>
+								<xs:documentation xml:lang="en">Name of the measure that will trigger the stop condition recorded during the execution
+									of the Action. They can be both vital signs and other kind of measures.
+									For example: Heart Rate, Blood Pressure, Adherence, Oxygenation, Distance, Repetitions, Time etc. Required
+								</xs:documentation>
+							</xs:annotation>
+						</xs:element>
+						<xs:element name="value" type="indivo:ValueAndUnit" minOccurs="1" maxOccurs="1">
+							<xs:annotation>
+								<xs:documentation xml:lang="en">Value and unit that will trigger the stop condition.
+									For example, 130 bpm for a Heart Rate. Optional
+								</xs:documentation>
+							</xs:annotation>
+						</xs:element>
+						<xs:element name="operator" type="indivo:CodedValue" minOccurs="1" maxOccurs="1" >
+							<xs:annotation>
+								<xs:documentation xml:lang="en">Value and unit that will trigger the stop condition.
+									For example, 130 bpm for a Heart Rate. Optional
+								</xs:documentation>
+							</xs:annotation>
+						</xs:element>
+						<xs:element name="detail" type="indivo:CodedValue"  minOccurs="0" maxOccurs="1">
+							<xs:annotation>
+								<xs:documentation xml:lang="en">Additional Details. Optional
+								</xs:documentation>
+							</xs:annotation>
+						</xs:element>
+					</xs:sequence>
+				</xs:complexType>
+			</xs:element>
+		</xs:sequence>
+	</xs:complexType>
+
+	<xs:complexType name="targets">
+		<xs:sequence>
+			<xs:element name="target" minOccurs="0" maxOccurs="unbounded">
+				<xs:complexType>
+					<xs:sequence>
+						<xs:element name="name" type="indivo:CodedValue" minOccurs="1" maxOccurs="1"  >
+							<xs:annotation>
+								<xs:documentation xml:lang="en">Name of the measure that will be used as a target during the execution
+								of the Action. They can be both vital signs and other kind of measures.
+								For example: Heart Rate, Blood Pressure, Adherence, Oxygenation etc. Required
+								</xs:documentation>
+							</xs:annotation>
+						</xs:element>
+						<xs:element name="minimumValue"  type="indivo:ValueAndUnit"  minOccurs="0" maxOccurs="1">
+							<xs:annotation>
+								<xs:documentation xml:lang="en">Value and unit that will be the lower boundary of the target.
+									For example, 60 bpm for a Heart Rate. If you don't specify it then it will be only used the maximumValue. Optional
+								</xs:documentation>
+							</xs:annotation>
+						</xs:element>
+						<xs:element name="maximumValue"  type="indivo:ValueAndUnit"  minOccurs="0" maxOccurs="1">
+							<xs:annotation>
+								<xs:documentation xml:lang="en">Value and unit that will be the higher boundary of the target.
+									For example, 120 bpm for a Heart Rate. If you don't specify it then it will be only used the minimumValue. Optional
+								</xs:documentation>
+							</xs:annotation>
+						</xs:element>
+						<xs:element name="severityLevel" type="indivo:CodedValue"    minOccurs="1" maxOccurs="1">
+							<xs:annotation>
+								<xs:documentation xml:lang="en">Level of Severity associated with being in the range of the target.
+									For example: High would represent a danger area, Desired would represent a positive target that you have to reach. Required
+								</xs:documentation>
+							</xs:annotation>
+						</xs:element>
+					</xs:sequence>
+				</xs:complexType>
+			</xs:element>
+		</xs:sequence>
+	</xs:complexType>
+
+	<xs:element name="HealthActionPlan" type="indivo:HealthActionPlan"/>
+
+</xs:schema>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/healthactionresult.xml indivo_server/schemas/doc_schemas/healthactionresult.xml
--- fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/healthactionresult.xml	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/schemas/doc_schemas/healthactionresult.xml	2012-04-18 09:52:28.000000000 -0400
@@ -0,0 +1,167 @@
+﻿<?xml version="1.0" encoding="utf-8"?>
+<!--~
+  ~ Copyright 2012 John Moore, Scott Gilroy
+  ~
+  ~ This file is part of CollaboRhythm.
+  ~
+  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
+  ~ version.
+  ~
+  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
+  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+  ~ details.
+  ~
+  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
+  ~ <http://www.gnu.org/licenses/>.
+  -->
+<HealthActionResult xmlns="http://indivo.org/vocab/xml/documents#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" >
+	<name type="http://actions.repository.coded.values/" value="Exercise Plan"> Exercise Plan 1 </name>
+	<planType>prescribed</planType>
+	<reportedBy>rpoole</reportedBy>
+	<dateReported>2012-04-05T16:00:35.835336-04:00</dateReported>
+	<actions>
+		<action xsi:type="ActionGroupResult">
+			<measurements>
+				<measurement>
+					<name type="http://measures.coded.values/" value="1">Knee Angle</name>
+					<type type="http://measures.type.coded.values/" value="3">Extension</type>
+					<value>
+						<value>150</value>
+						<unit type="http://indivo.org/codes/units#" value="m" abbrev="m">degrees</unit>
+					</value>
+					<aggregationFunction type="http://aggregation.coded.values/">max</aggregationFunction>
+				</measurement>
+				<measurement>
+					<name type="http://measures.coded.values/" value="1">Knee Angle</name>
+					<type type="http://measures.type.coded.values/" value="3">Flexion</type>
+					<value>
+						<value>30</value>
+						<unit type="http://indivo.org/codes/units#" value="m" abbrev="m">degrees</unit>
+					</value>
+					<aggregationFunction type="http://aggregation.coded.values/">min</aggregationFunction>
+				</measurement>
+			</measurements>
+			<deviceResults>
+				<deviceResult>
+					<name type="http://devices.repository.coded.values/" value="Wocket"> Wocket</name>
+					<type type="http://equipment.coded.values/" value="1">Accelerometer</type>
+					<value/>
+					<site type="http://equipment.coded.values/" value="1">Lower Leg</site>
+				</deviceResult>
+				<deviceResult>
+					<name type="http://devices.repository.coded.values/" value="Wocket"> Wocket</name>
+					<type type="http://equipment.coded.values/" value="1">Accelerometer</type>
+					<value/>
+					<site type="http://equipment.coded.values/" value="1">Upper Leg</site>
+				</deviceResult>
+			</deviceResults>
+			<actions>
+				<action xsi:type="ActionStepResult">
+					<measurements>
+						<measurement>
+							<name type="http://measures.coded.values/" value="1">Knee Angle</name>
+							<type type="http://measures.type.coded.values/" value="3">Extension</type>
+							<value>
+								<value>150</value>
+								<unit type="http://indivo.org/codes/units#" value="m" abbrev="m">degrees</unit>
+							</value>
+							<aggregationFunction type="http://aggregation.coded.values/">max</aggregationFunction>
+						</measurement>
+						<measurement>
+							<name type="http://measures.coded.values/" value="1">Knee Angle</name>
+							<type type="http://measures.type.coded.values/" value="3">Flexion</type>
+							<value>
+								<value>30</value>
+								<unit type="http://indivo.org/codes/units#" value="m" abbrev="m">degrees</unit>
+							</value>
+							<aggregationFunction type="http://aggregation.coded.values/">min</aggregationFunction>
+						</measurement>
+					</measurements>
+					<deviceResults>
+						<deviceResult>
+							<name type="http://devices.repository.coded.values/" value="Wocket"> Wocket</name>
+							<type type="http://equipment.coded.values/" value="1">Accelerometer</type>
+							<value/>
+							<site type="http://equipment.coded.values/" value="1">Lower Leg</site>
+						</deviceResult>
+						<deviceResult>
+							<name type="http://devices.repository.coded.values/" value="Wocket"> Wocket</name>
+							<type type="http://equipment.coded.values/" value="1">Accelerometer</type>
+							<value/>
+							<site type="http://equipment.coded.values/" value="1">Upper Leg</site>
+						</deviceResult>
+					</deviceResults>
+					<medicationAdministrations />
+					<name type="http://actions.repository/" value="2">Kick Balls</name>
+					<occurrences>
+						<occurrence>
+							<startTime>2012-04-05T16:00:35.8509355-04:00</startTime>
+							<endTime>2012-04-05T16:00:43.135902-04:00</endTime>
+							<additionalDetails/>
+							<stopCondition>
+								<name />
+								<value>
+									<unit />
+								</value>
+							</stopCondition>
+							<measurements>
+								<measurement>
+									<name type="http://measures.coded.values/" value="1">Knee Angle</name>
+									<type type="http://measures.type.coded.values/" value="3">Extension</type>
+									<value>
+										<value>150</value>
+										<unit type="http://indivo.org/codes/units#" value="m" abbrev="m">degrees</unit>
+									</value>
+									<aggregationFunction type="http://aggregation.coded.values/">max</aggregationFunction>
+								</measurement>
+								<measurement>
+									<name type="http://measures.coded.values/" value="1">Knee Angle</name>
+									<type type="http://measures.type.coded.values/" value="3">Flexion</type>
+									<value>
+										<value>30</value>
+										<unit type="http://indivo.org/codes/units#" value="m" abbrev="m">degrees</unit>
+									</value>
+									<aggregationFunction type="http://aggregation.coded.values/">min</aggregationFunction>
+								</measurement>
+								<measurement>
+									<name type="http://measures.coded.values/" value="3">Adherence</name>
+									<type />
+									<value>
+										<value>0</value>
+										<unit>%</unit>
+									</value>
+									<aggregationFunction type="http://aggregation.coded.values/">avg</aggregationFunction>
+								</measurement>
+								<measurement>
+									<name type="http://measures.coded.values/" value="5">Repetitions</name>
+									<type />
+									<value>
+										<value>1</value>
+										<unit>num</unit>
+									</value>
+									<aggregationFunction type="http://aggregation.coded.values/">sum</aggregationFunction>
+								</measurement>
+							</measurements>
+							<deviceResults>
+								<deviceResult>
+									<name type="http://devices.repository.coded.values/" value="Wocket"> Wocket</name>
+									<type type="http://equipment.coded.values/" value="1">Accelerometer</type>
+									<value/>
+									<site type="http://equipment.coded.values/" value="1">Lower Leg</site>
+								</deviceResult>
+								<deviceResult>
+									<name type="http://devices.repository.coded.values/" value="Wocket"> Wocket</name>
+									<type type="http://equipment.coded.values/" value="1">Accelerometer</type>
+									<value/>
+									<site type="http://equipment.coded.values/" value="1">Upper Leg</site>
+								</deviceResult>
+							</deviceResults>
+							<medicationAdministrations />
+						</occurrence>
+					</occurrences>
+				</action>
+			</actions>
+		</action>
+	</actions>
+</HealthActionResult>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/healthactionresult.xsd indivo_server/schemas/doc_schemas/healthactionresult.xsd
--- fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/healthactionresult.xsd	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/schemas/doc_schemas/healthactionresult.xsd	2012-04-18 09:52:28.000000000 -0400
@@ -0,0 +1,296 @@
+<?xml version="1.0" encoding="iso-8859-1" ?>
+
+<!--~
+  ~ Copyright 2012 John Moore, Scott Gilroy
+  ~
+  ~ This file is part of CollaboRhythm.
+  ~
+  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
+  ~ version.
+  ~
+  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
+  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+  ~ details.
+  ~
+  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
+  ~ <http://www.gnu.org/licenses/>.
+  -->
+<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
+           targetNamespace="http://indivo.org/vocab/xml/documents#"
+		       xmlns:indivo="http://indivo.org/vocab/xml/documents#"
+		   		 elementFormDefault="qualified">
+
+	<xs:include schemaLocation="codes.xsd" />
+	<xs:include schemaLocation="values.xsd" />
+
+	<xs:complexType name="HealthActionResult">
+		<xs:sequence>
+			<xs:element name="name" type="indivo:CodedValue" minOccurs="1" maxOccurs="1" >
+				<xs:annotation>
+					<xs:documentation xml:lang="en">Name of the Health Action Plan.  Required
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="planType" type="xs:string" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">Type of the Health Action Plan. All plans are ordered in some capacity,
+									whether it is prescribed by a health professional, recommended by a professional or a friend,
+									or self-prescribed. Possible values are "Prescribed", "Recommended", or "Self-prescribed".
+									Note that some patients self-prescribe health actions illegally as well as over-the-counter. Required
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="reportedBy" type="xs:string" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">Person or device that reported the result. Required
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="dateReported" type="xs:dateTime" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">Date and time that the health action result was reported.  Required
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="actions" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">List of the actions of the Health Action Result. This can contain one or more
+						ActionsResult of the type ActionGroupsResult or ActionStepsResult. It generates a tree data structure were the leafs are
+						represented by ActionStepsResult, and the internal nodes are represented by ActionGroupsResult. Required
+					</xs:documentation>
+				</xs:annotation>
+				<xs:complexType>
+					<xs:sequence>
+						<xs:element name="action" type="indivo:ActionResult" minOccurs="1" maxOccurs="unbounded">
+							<xs:annotation>
+								<xs:documentation xml:lang="en">Instance of an action of the type ActionGroupResult or ActionStepResult. Required
+								</xs:documentation>
+							</xs:annotation>
+						</xs:element>
+					</xs:sequence>
+				</xs:complexType>
+			</xs:element>
+		</xs:sequence>
+	</xs:complexType>
+
+	<xs:complexType name="ActionResult">
+		<xs:sequence>
+			<xs:element name="measurements" type="indivo:measurements" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">List of measurements that were taken while the health action was performed. Optional
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="deviceResults" type="indivo:deviceResults" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">List of devices that were used for this health action. Optional
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="medicationAdministrations" type="indivo:medicationAdministrations" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">List of medications that were administered during this health action. Optional
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+		</xs:sequence>
+	</xs:complexType>
+
+	<xs:complexType name="ActionGroupResult">
+		<xs:complexContent>
+			<xs:extension base="indivo:ActionResult">
+				<xs:sequence>
+					<xs:element name="actions" minOccurs="0" maxOccurs="unbounded" >
+						<xs:annotation>
+							<xs:documentation xml:lang="en">List of the ActionResults of this ActionGroupResult.
+								This can contain one or more actions of the type ActionGroupResult or ActionStepResult.
+								It generates a sub tree data structure were the leafs are represented by ActionStepResult,
+								and the branches are represented by ActionGroupResult. Required
+							</xs:documentation>
+						</xs:annotation>
+						<xs:complexType>
+							<xs:sequence>
+								<xs:element name="action" type="indivo:ActionResult" minOccurs="1" maxOccurs="unbounded">
+									<xs:annotation>
+										<xs:documentation xml:lang="en">Instance of an action of the type ActionGroupResult or ActionStepResult. Required
+										</xs:documentation>
+									</xs:annotation>
+								</xs:element>
+							</xs:sequence>
+						</xs:complexType>
+					</xs:element>
+				</xs:sequence>
+			</xs:extension>
+		</xs:complexContent>
+	</xs:complexType>
+
+	<xs:complexType name="ActionStepResult">
+		<xs:complexContent>
+			<xs:extension base="indivo:ActionResult">
+				<xs:sequence>
+					<xs:element name="name" type="indivo:CodedValue" minOccurs="1" maxOccurs="1"  >
+						<xs:annotation>
+							<xs:documentation xml:lang="en">Name of the ActionStepResult. Required
+							</xs:documentation>
+						</xs:annotation>
+					</xs:element>
+					<xs:element name="occurrences" type="indivo:occurrences" minOccurs="0" maxOccurs="1">
+						<xs:annotation>
+							<xs:documentation xml:lang="en">List of all the occurrences of repetitions of this action.
+								If the action was repeated 3 times there will be 3 occurrences in this list. Optional
+							</xs:documentation>
+						</xs:annotation>
+					</xs:element>
+				</xs:sequence>
+			</xs:extension>
+		</xs:complexContent>
+	</xs:complexType>
+
+	<xs:complexType name="measurements">
+		<xs:sequence>
+			<xs:element name="measurement" minOccurs="1" maxOccurs="unbounded">
+				<xs:complexType>
+					<xs:sequence>
+						<xs:element name="name" type="indivo:CodedValue" minOccurs="1" maxOccurs="1" >
+							<xs:annotation>
+								<xs:documentation xml:lang="en">Name of the measure that was recorded during the execution of the Action.
+									They can be both vital signs and other kind of measures.
+									For example: Heart Rate, Blood Pressure, Adherence, Oxygenation, Distance etc. Required
+								</xs:documentation>
+							</xs:annotation>
+						</xs:element>
+						<xs:element name="type" type="indivo:CodedValue" minOccurs="0" maxOccurs="1">
+							<xs:annotation>
+								<xs:documentation xml:lang="en">Category of the measurement. Optional
+								</xs:documentation>
+							</xs:annotation>
+						</xs:element>
+						<xs:element name="value" type="indivo:ValueAndUnit" minOccurs="1" maxOccurs="1">
+							<xs:annotation>
+								<xs:documentation xml:lang="en">Value recorded, and calculated from the raw data using the aggregation function. Optional
+								</xs:documentation>
+							</xs:annotation>
+						</xs:element>
+						<xs:element name="aggregationFunction" type="indivo:CodedValue"  minOccurs="0" maxOccurs="1">
+							<xs:annotation>
+								<xs:documentation xml:lang="en">Rule that has been used as an Aggregation function when combining the measured data.
+									For example: average, sum, minimum, maximum, counter. Required
+								</xs:documentation>
+							</xs:annotation>
+						</xs:element>
+					</xs:sequence>
+				</xs:complexType>
+			</xs:element>
+		</xs:sequence>
+	</xs:complexType>
+
+	<xs:complexType name="deviceResults">
+		<xs:sequence>
+			<xs:element name="deviceResult" minOccurs="1" maxOccurs="unbounded">
+				<xs:complexType>
+					<xs:sequence>
+						<xs:element name="name" type="indivo:CodedValue" minOccurs="1" maxOccurs="1">
+							<xs:annotation>
+								<xs:documentation xml:lang="en">Name of the device. For example, Fora D40d. Required
+								</xs:documentation>
+							</xs:annotation>
+						</xs:element>
+						<xs:element name="type" type="indivo:CodedValue" minOccurs="1" maxOccurs="1">
+							<xs:annotation>
+								<xs:documentation xml:lang="en">Category of the device. Sphygmomanometer, for example. Optional
+								</xs:documentation>
+							</xs:annotation>
+						</xs:element>
+						<xs:element name="value" type="indivo:ValueAndUnit" minOccurs="0" maxOccurs="1">
+							<xs:annotation>
+								<xs:documentation xml:lang="en">Specification of the tuning value used for the device. For example,
+									when using a dumbbell the weight used. Optional
+								</xs:documentation>
+							</xs:annotation>
+						</xs:element>
+						<xs:element name="site" type="indivo:CodedValue" minOccurs="0" maxOccurs="1">
+							<xs:annotation>
+								<xs:documentation xml:lang="en">Site where the device was applied. For example, right arm. Optional
+								</xs:documentation>
+							</xs:annotation>
+						</xs:element>
+					</xs:sequence>
+				</xs:complexType>
+			</xs:element>
+		</xs:sequence>
+	</xs:complexType>
+
+	<xs:complexType name="medicationAdministrations">
+		<xs:sequence>
+			<xs:element name="medicationAdministration" minOccurs="0" maxOccurs="unbounded">
+				<xs:complexType>
+					<xs:sequence>
+						<xs:element name="name" type="indivo:CodedValue" minOccurs="1" maxOccurs="1">
+							<xs:annotation>
+								<xs:documentation xml:lang="en">RxNorm name for the medication. This is a coded value using the url
+									http://rxnav.nlm.nih.gov/REST/rxcui/ where the value is the rxcui (RxNorm Coded Unique Identifier).
+									The rxcui should correspond to the SBD (branded drug name) or SCD (clinical drug name) that is most
+									specific for the medication and includes name and dose for each clinical drug component. Required
+								</xs:documentation>
+							</xs:annotation>
+						</xs:element>
+						<xs:element name="dose" type="indivo:CodedValue" minOccurs="1" maxOccurs="1">
+							<xs:annotation>
+								<xs:documentation xml:lang="en">Dose of the medication. Required
+								</xs:documentation>
+							</xs:annotation>
+						</xs:element>
+						<xs:element name="route" type="indivo:ValueAndUnit" minOccurs="1" maxOccurs="1">
+							<xs:annotation>
+								<xs:documentation xml:lang="en">Route used for administering the medication. Required
+								</xs:documentation>
+							</xs:annotation>
+						</xs:element>
+					</xs:sequence>
+				</xs:complexType>
+			</xs:element>
+		</xs:sequence>
+	</xs:complexType>
+
+	<xs:complexType name="stopCondition">
+		<xs:sequence>
+			<xs:element name="name" type="indivo:CodedValue" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">Name of the measure that triggered the stop condition recorded during the execution
+						of the Action. They can be both vital signs and other kind of measures.
+						For example: Heart Rate, Blood Pressure, Adherence, Oxygenation, Distance, Repetitions, Time etc. Required
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="value" type="indivo:ValueAndUnit" minOccurs="1" maxOccurs="1" >
+				<xs:annotation>
+					<xs:documentation xml:lang="en">Value and unit that triggered the stop condition.
+						For example, 130 bpm for a Heart Rate. Optional
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+		</xs:sequence>
+	</xs:complexType>
+
+	<xs:complexType name="occurrences">
+		<xs:sequence>
+			<xs:element name="occurrence" minOccurs="1" maxOccurs="unbounded">
+				<xs:complexType>
+					<xs:sequence>
+						<xs:element name="startTime" type="xs:dateTime" minOccurs="0" />
+						<xs:element name="endTime" type="xs:dateTime" minOccurs="0" />
+						<xs:element name="additionalDetails" type="xs:string" minOccurs="0" />														
+						<xs:element name="stopCondition" type="indivo:stopCondition"  minOccurs="1" maxOccurs="1"/>
+						<xs:element name="measurements" type="indivo:measurements" minOccurs="0" maxOccurs="1" />
+						<xs:element name="deviceResults" type="indivo:deviceResults" minOccurs="0" maxOccurs="1" />
+						<xs:element name="medicationAdministrations" type="indivo:medicationAdministrations" minOccurs="0" maxOccurs="1" />
+					</xs:sequence>
+				</xs:complexType>
+			</xs:element>
+		</xs:sequence>
+	</xs:complexType>
+
+	<xs:element name="HealthActionResult" type="indivo:HealthActionResult"/>
+
+</xs:schema>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/healthactionschedule.xml indivo_server/schemas/doc_schemas/healthactionschedule.xml
--- fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/healthactionschedule.xml	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/schemas/doc_schemas/healthactionschedule.xml	2012-04-19 14:42:06.000000000 -0400
@@ -0,0 +1,31 @@
+<!--~
+  ~ Copyright 2012 John Moore, Scott Gilroy
+  ~
+  ~ This file is part of CollaboRhythm.
+  ~
+  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
+  ~ version.
+  ~
+  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
+  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+  ~ details.
+  ~
+  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
+  ~ <http://www.gnu.org/licenses/>.
+  -->
+<HealthActionSchedule xmlns="http://indivo.org/vocab/xml/documents#">
+	<name>Average Blood Pressure</name>
+	<scheduledBy>jking@records.media.mit.edu</scheduledBy>
+	<dateScheduled>2011-02-14T13:00:00-04:00</dateScheduled>
+	<dateStart>2011-02-15T10:00:00-04:00</dateStart>
+	<dateEnd>2011-02-15T14:00:00-04:00</dateEnd>
+	<recurrenceRule>
+		<frequency>DAILY</frequency>
+		<count>30</count>
+	</recurrenceRule>
+   	<dose>
+  		<value>145</value>
+  		<unit type="http://codes.indivo.org/units/" value="31">millimeters of almond milk</unit>
+	</dose>
+</HealthActionSchedule>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/healthactionschedule.xsd indivo_server/schemas/doc_schemas/healthactionschedule.xsd
--- fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/healthactionschedule.xsd	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/schemas/doc_schemas/healthactionschedule.xsd	2012-04-18 11:28:40.000000000 -0400
@@ -0,0 +1,160 @@
+<?xml version="1.0" encoding="ISO-8859-1" ?>
+<!--~
+  ~ Copyright 2012 John Moore, Scott Gilroy
+  ~
+  ~ This file is part of CollaboRhythm.
+  ~
+  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
+  ~ version.
+  ~
+  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
+  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+  ~ details.
+  ~
+  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
+  ~ <http://www.gnu.org/licenses/>.
+  -->
+<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
+		   targetNamespace="http://indivo.org/vocab/xml/documents#"
+		   xmlns:indivo="http://indivo.org/vocab/xml/documents#"
+		   elementFormDefault="qualified">
+
+	<xs:include schemaLocation="codes.xsd"/>
+	<xs:include schemaLocation="provider.xsd"/>
+	<xs:include schemaLocation="values.xsd"/>
+
+	<xs:complexType name="RecurrenceRule">
+		<xs:sequence>
+			<xs:element name="frequency" type="indivo:CodedValue" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Frequency of recurrence
+						The FREQ rule part identifies the type of recurrence rule. This rule part MUST be specified in
+						the recurrence rule. Valid values include SECONDLY, to specify repeating events based on an
+						interval of a second or more; MINUTELY, to specify repeating events based on an interval of a
+						minute or more; HOURLY, to specify repeating events based on an interval of an hour or more;
+						DAILY, to specify repeating events based on an interval of a day or more; WEEKLY, to specify
+						repeating events based on an interval of a week or more; MONTHLY, to specify repeating events
+						based on an interval of a month or more; and YEARLY, to specify repeating events based on an
+						interval of a year or more.
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="interval" type="indivo:CodedValue" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Interval of recurrence
+						The INTERVAL rule part contains a positive integer representing how often the recurrence rule
+						repeats. The default value is "1", meaning every second for a SECONDLY rule, or every minute for
+						a MINUTELY rule, every hour for an HOURLY rule, every day for a DAILY rule, every week for a
+						WEEKLY rule, every month for a MONTHLY rule and every year for a YEARLY rule.
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<!--
+   TODO: fix bugs in XMLEncoder/XMLDecoder so that we can support xs:choice
+			   <xs:choice>
+				   <xs:element name="dateUntil" type="xs:dateTime" minOccurs="0" maxOccurs="1"/>
+   -->
+			<xs:element name="count" type="xs:integer" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Number of times the item will recur
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<!--
+			   </xs:choice>
+   -->
+		</xs:sequence>
+	</xs:complexType>
+
+	<xs:complexType name="HealthActionSchedule">
+		<xs:sequence>
+			<xs:element name="name" type="indivo:CodedValue" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Name of the health action
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="scheduledBy" type="xs:string" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Person or agent that scheduled the item
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="dateScheduled" type="xs:dateTime" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Date and time that the HealthActionSchedule was originally assigned a dateStart, recurrence
+						rule, etc.
+						The date and time that the document was created in the meta-data for the document is not
+						necessarily the same as the date and time that the HealthActionSchedule was actually assigned
+						its dateStart, recurrence rule, etc. An example would be if the schedule was created on a mobile
+						phone and then uploaded later.
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="dateStart" type="xs:dateTime" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Date and time that the scheduleItem starts
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="dateEnd" type="xs:dateTime" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Date and time that the scheduleItem ends
+						If the scheduleItem has a duration, this is established by having and end time. If the
+						scheduleItem does not have a duration, then no end time is required.
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="recurrenceRule" type="indivo:RecurrenceRule" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Rule that establishes how the scheduleItem will recur.
+						Based on the Recurrence Rule from the iCalendar RFC 5545 specification
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="dose" type="indivo:ValueAndUnit" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Dose of the medication
+						This includes a value and a unit.
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="instructions" type="xs:string" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Instructions for the specific medication
+						This is an override of the instructions for the HealthActionPlan on a per HealthActionSchedule
+						basis. This allows instructions to change with each dose of a taper or other complex schedule.
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+		</xs:sequence>
+	</xs:complexType>
+
+	<xs:element name="HealthActionSchedule" type="indivo:HealthActionSchedule">
+		<xs:annotation>
+			<xs:documentation xml:lang="en">
+				It is common to schedule health action plans. The HealthActionSchedule allows a simple
+				schedule for a HealthActionPlan to be created with simple recurrence rules using specifications similar to
+				standard calendar entries. In order to create more complex schedules, for example a steroid taper,
+				multiple HealthActionSchedule documents would need to be created. The HealthActionSchedule should be related
+				from the appropriate HealthActionPlan using the ?healthActionSchedule? relationship type and to the
+				appropriate HealthActionOccurrence documents using the ?healthActionOccurrence? relationship type.
+				Eventually we should use the complete iCal standard. An xml format is in development
+				http://xml.coverpages.org/draft-daboo-et-al-icalendar-in-xml-02.txt but a schema is not currently
+			</xs:documentation>
+		</xs:annotation>
+	</xs:element>
+
+</xs:schema>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/healthmeasurement.xml indivo_server/schemas/doc_schemas/healthmeasurement.xml
--- fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/healthmeasurement.xml	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/schemas/doc_schemas/healthmeasurement.xml	2012-04-26 15:10:52.000000000 -0400
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="utf-8" ?>
+<!--~
+  ~ Copyright 2012 John Moore, Scott Gilroy
+  ~
+  ~ This file is part of CollaboRhythm.
+  ~
+  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
+  ~ version.
+  ~
+  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
+  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+  ~ details.
+  ~
+  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
+  ~ <http://www.gnu.org/licenses/>.
+  -->
+<HealthMeasurement xmlns="http://indivo.org/vocab/xml/documents#">
+	<name>Pain Report</name>
+	<measuredBy>jsmith@records.media.mit.edu</measuredBy>
+	<dateMeasuredStart>2012-01-20T22:03:31Z</dateMeasuredStart>
+	<dateMeasuredEnd>2012-01-20T22:05:21Z</dateMeasuredEnd>
+	<result>
+		<value>8.3</value>
+		<textValue>some special report encoding here</textValue>
+		<unit>MIT Pain Report Encoding v1</unit>
+	</result>
+	<site>left foot</site>
+	<position>standing</position>
+	<technique>self assessment</technique>
+	<comments>Pretty unpleasant</comments>
+</HealthMeasurement>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/healthmeasurement.xsd indivo_server/schemas/doc_schemas/healthmeasurement.xsd
--- fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/healthmeasurement.xsd	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/schemas/doc_schemas/healthmeasurement.xsd	2012-04-26 15:10:52.000000000 -0400
@@ -0,0 +1,117 @@
+<?xml version="1.0" encoding="ISO-8859-1" ?>
+<!--~
+  ~ Copyright 2012 John Moore, Scott Gilroy
+  ~
+  ~ This file is part of CollaboRhythm.
+  ~
+  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
+  ~ version.
+  ~
+  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
+  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+  ~ details.
+  ~
+  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
+  ~ <http://www.gnu.org/licenses/>.
+  -->
+<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
+		   targetNamespace="http://indivo.org/vocab/xml/documents#"
+		   xmlns:indivo="http://indivo.org/vocab/xml/documents#"
+		   elementFormDefault="qualified">
+
+	<xs:include schemaLocation="codes.xsd"/>
+	<xs:include schemaLocation="provider.xsd"/>
+	<xs:include schemaLocation="values.xsd"/>
+
+	<xs:complexType name="HealthMeasurement">
+		<xs:sequence>
+			<xs:element name="name" type="indivo:CodedValue" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Name of the vital sign
+						This is a coded value. Examples of the text are "Systolic Blood Pressure" and "Diastolic Blood
+						Pressure."
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="measuredBy" type="xs:string" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Person that measured the vital sign
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="dateMeasuredStart" type="xs:dateTime" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Date and time that the measurement started
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="dateMeasuredEnd" type="xs:dateTime" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Date and time that the measurement ended
+						Some measurements reflect a period of time. For example, a pedometer provides a step count for a
+						window of time. It is necessary to have an end date and time as well as a begin date and time to
+						represent this.
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="result" type="indivo:ValueAndUnit" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Result of the measurement
+						This has a value and a unit.
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="site" type="xs:string" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Site where the measurement was taken
+						right arm for example
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="position" type="xs:string" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Position of the subject when the measurement was taken
+						seated or supine for example
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="technique" type="xs:string" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Technique used to take the measurement
+						Auscultation or palpation for example. This optional field should be used in the case that a
+						device is not used in taking the measurement, for example, if the pulse is taken by palpation.
+						If a device is used to take the measurement, then the measurement should be related to the
+						Device document.
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="comments" type="xs:string" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Additional comments
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+		</xs:sequence>
+	</xs:complexType>
+
+	<xs:element name="HealthMeasurement" type="indivo:HealthMeasurement">
+		<xs:annotation>
+			<xs:documentation xml:lang="en">
+				Basic health measurements such as height, weight, blood pressure, etc. Each Measurement document should
+				be related from the appropriate HealthActionOccurrence document using the ?healthActionResult? relationship
+				type and to the appropriate Device document using the ?source? relationship type.
+			</xs:documentation>
+		</xs:annotation>
+	</xs:element>
+
+</xs:schema>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/medicationadministration.xsd indivo_server/schemas/doc_schemas/medicationadministration.xsd
--- fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/medicationadministration.xsd	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/schemas/doc_schemas/medicationadministration.xsd	2012-04-20 14:08:35.000000000 -0400
@@ -0,0 +1,96 @@
+<?xml version="1.0" encoding="ISO-8859-1" ?>
+<!--~
+  ~ Copyright 2011 John Moore, Scott Gilroy
+  ~
+  ~ This file is part of CollaboRhythm.
+  ~
+  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
+  ~ version.
+  ~
+  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
+  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+  ~ details.
+  ~
+  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
+  ~ <http://www.gnu.org/licenses/>.
+  -->
+<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
+		   targetNamespace="http://indivo.org/vocab/xml/documents#"
+		   xmlns:indivo="http://indivo.org/vocab/xml/documents#"
+		   elementFormDefault="qualified">
+
+	<xs:include schemaLocation="codes.xsd"/>
+	<xs:include schemaLocation="provider.xsd"/>
+	<xs:include schemaLocation="values.xsd"/>
+
+	<xs:complexType name="MedicationAdministration">
+		<xs:sequence>
+			<xs:element name="name" type="indivo:CodedValue" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						RxNorm name for the medication
+						This is a coded value using the url http://rxnav.nlm.nih.gov/REST/rxcui/ where the value is the
+						rxcui (RxNorm Coded Unique Identifier). The rxcui should correspond to the SBD (branded drug
+						name) or SCD (clinical drug name) that is most specific for the medication and includes name and
+						dose for each clinical drug component.
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="reportedBy" type="xs:string" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Person or device that reported the administration
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="dateReported" type="xs:dateTime" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Date and time that the medication administration was reported
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="dateAdministered" type="xs:dateTime" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Date and time that the medication was administered
+						If the medication was administered, it was not necessarily administered at the same time that it
+						was reported.
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="amountAdministered" type="indivo:ValueAndUnit" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Amount of medication that was administered
+						If the medication was administered, an amount was administered. This includes a value and a
+						unit.
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="amountRemaining" type="indivo:ValueAndUnit" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Amount of medication that remains after the administration
+						If the medication was administered, this value needs to be calculated by subtracting the
+						amountAdministered from the amountRemaining in the most recent MedicationAdministration
+						document. This includes a value and a unit.
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+		</xs:sequence>
+	</xs:complexType>
+
+	<xs:element name="MedicationAdministration" type="indivo:MedicationAdministration">
+		<xs:annotation>
+			<xs:documentation xml:lang="en">
+				The administration of medications is tracked using MedicationAdministration documents. Each
+				MedicationAdministration document should be related to the appropriate MedicationFill document using the
+				?source? relationship type and from the appropriate HealthActionOccurrence document using the
+				?healthActionResult? relationship type.
+			</xs:documentation>
+		</xs:annotation>
+	</xs:element>
+
+</xs:schema>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/medicationfill.xsd indivo_server/schemas/doc_schemas/medicationfill.xsd
--- fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/medicationfill.xsd	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/schemas/doc_schemas/medicationfill.xsd	2012-04-20 14:12:38.000000000 -0400
@@ -0,0 +1,121 @@
+<?xml version="1.0" encoding="ISO-8859-1" ?>
+<!--~
+  ~ Copyright 2011 John Moore, Scott Gilroy
+  ~
+  ~ This file is part of CollaboRhythm.
+  ~
+  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
+  ~ version.
+  ~
+  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
+  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+  ~ details.
+  ~
+  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
+  ~ <http://www.gnu.org/licenses/>.
+  -->
+<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
+		   targetNamespace="http://indivo.org/vocab/xml/documents#"
+		   xmlns:indivo="http://indivo.org/vocab/xml/documents#"
+		   elementFormDefault="qualified">
+
+	<xs:include schemaLocation="codes.xsd"/>
+	<xs:include schemaLocation="provider.xsd"/>
+	<xs:include schemaLocation="values.xsd"/>
+
+	<xs:complexType name="MedicationFill">
+		<xs:sequence>
+			<xs:element name="name" type="indivo:CodedValue" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						RxNorm name for the medication
+						This is a coded value using the url http://rxnav.nlm.nih.gov/REST/rxcui/ where the value is the
+						rxcui (RxNorm Coded Unique Identifier). The rxcui should correspond to the SBD (branded drug
+						name) or SCD (clinical drug name) that is most specific for the medication and includes name and
+						dose for each clinical drug component
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="filledBy" type="xs:string" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Person or pharmacy that filled the medication
+						Medications can be filled by pharmacies (for prescription medications) or by people (for
+						over-the-counter or illegal medications).
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="dateFilled" type="xs:dateTime" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Date and time that the medication was filled
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="amountFilled" type="indivo:ValueAndUnit" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Amount of medication that was filled
+						This includes a value and unit.
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="ndc" type="indivo:CodedValue" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						NDC code that specifies the exact form in which the medication was dispensed
+						This can be used as a key to retrieve a specific image of the medication.
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="fillSequenceNumber" type="xs:integer" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Fill sequence number for pharmacy use
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="lotNumber" type="xs:integer" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Lot number for pharmacy use
+						In the Lipitor example provided, the lot number is one that was recalled in December of 2010.
+						Having this info in the personal health record will allow better patient protection.
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="refillsRemaining" type="xs:integer" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Number of refills remaining for the medication
+						Like the refills element in the MedicationOrder document, this element is not used by
+						CollaboRhythm.
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="instructions" type="xs:string" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Instructions specific to this medication fill
+						Usually used by the pharmacist to provide additional instructions to those given by the person
+						who ordered the medication.
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+		</xs:sequence>
+	</xs:complexType>
+
+	<xs:element name="MedicationFill" type="indivo:MedicationFill">
+		<xs:annotation>
+			<xs:documentation xml:lang="en">
+				Fills of medications, either by a pharmacy (for a prescription medication) or by the patient (for an
+				over-the-counter or illegal medication), are tracked using MedicationFill documents. Each MedicationFill
+				document should be related from the appropriate MedicationOrder document using the ?medicationFill?
+				relationship and from the appropriate MedicationAdministration documents using the ?source?
+				relationship.
+			</xs:documentation>
+		</xs:annotation>
+	</xs:element>
+
+</xs:schema>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/medicationorder.xsd indivo_server/schemas/doc_schemas/medicationorder.xsd
--- fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/medicationorder.xsd	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/schemas/doc_schemas/medicationorder.xsd	2012-04-20 14:21:28.000000000 -0400
@@ -0,0 +1,138 @@
+<?xml version="1.0" encoding="ISO-8859-1" ?>
+<!--~
+  ~ Copyright 2011 John Moore, Scott Gilroy
+  ~
+  ~ This file is part of CollaboRhythm.
+  ~
+  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
+  ~ version.
+  ~
+  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
+  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+  ~ details.
+  ~
+  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
+  ~ <http://www.gnu.org/licenses/>.
+  -->
+<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
+		   targetNamespace="http://indivo.org/vocab/xml/documents#"
+		   xmlns:indivo="http://indivo.org/vocab/xml/documents#"
+		   elementFormDefault="qualified">
+
+	<xs:include schemaLocation="codes.xsd"/>
+	<xs:include schemaLocation="provider.xsd"/>
+	<xs:include schemaLocation="values.xsd"/>
+
+	<xs:complexType name="MedicationOrder">
+		<xs:sequence>
+			<xs:element name="name" type="indivo:CodedValue" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						RxNorm name for the medication
+						This is a coded value using the url http://rxnav.nlm.nih.gov/REST/rxcui/ where the value is the
+						rxcui (RxNorm Coded Unique Identifier). The rxcui should correspond to the SBD (branded drug
+						name) or SCD (clinical drug name) that is most specific for the medication and includes name and
+						dose for each clinical drug component.
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="orderType" type="xs:string" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Type of medication order
+						All medications are ordered in some capacity, whether it is prescribed by a health professional,
+						recommended by a professional or a friend, or self-prescribed. Possible values are ?Prescribed?,
+						?Recommended?, or ?Self-prescribed.? Note that some patients self-prescribe medications
+						illegally as well as over-the-counter.
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="orderedBy" type="xs:string" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Person or agent who prescribed the medication
+						Currently, this uses the e-mail address of the person, eventually it should use a more robust
+						form of identity. It might also use an identity for a software agent that automates reordering
+						in the future based on patient data.
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="dateOrdered" type="xs:dateTime" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Date and time that the medication was ordered
+						This may be different than the date created in the meta data, for example if it is ordered from
+						a mobile phone and later uploaded, so it needs to be specified here.
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="dateExpires" type="xs:dateTime" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Date and time that the medication will expire
+						If the patient should only be able to fill the medication during a specific interval, this
+						optional element can be used.
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="indication" type="xs:string" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Reason for the medication
+						Reason that the medication was ordered. Medications should be related to problems, but some
+						medications such as vitamins do not require problems, so having an indication is needed.
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="amountOrdered" type="indivo:ValueAndUnit" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Amount of medication ordered
+						Includes a value and a unit.
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="refills" type="xs:integer" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Number of refills allowed
+						CollaboRhythm does not use the refills element. Instead, each time that a medication is ordered,
+						either by a clinician or a software agent, a new MedicationOrder document is created. Refills
+						are based on an outdated paper-based approach to managing patient medications. This element is
+						included in the schema to allow this information to be imported from legacy systems.
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="substitutionPermitted" type="xs:boolean" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Boolean that specifies whether or not it is acceptable to substitute a generic for the ordered
+						brand medication
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="instructions" type="xs:string" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Instructions for administering the medication
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+		</xs:sequence>
+	</xs:complexType>
+
+	<xs:element name="MedicationOrder" type="indivo:MedicationOrder">
+		<xs:annotation>
+			<xs:documentation xml:lang="en">
+				A MedicationOrder document is created every time that a medication is ?ordered?, meaning that it is
+				prescribed by a provider (for prescription drugs), recommended by a health care provider, friend, etc.
+				(for over-the-counter medications), or patient self-prescribed (for over-the-counter or illegal
+				medications). A MedicationOrder document should relate to its MedicationFIll document using the
+				?medicationFill? relationship type and to its HealthActionSchedule (MedicationSchedule for now)
+				documents using the ?healthActionSchedule? relationship type.
+			</xs:documentation>
+		</xs:annotation>
+	</xs:element>
+
+</xs:schema>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/medicationscheduleitem.xsd indivo_server/schemas/doc_schemas/medicationscheduleitem.xsd
--- fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/medicationscheduleitem.xsd	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/schemas/doc_schemas/medicationscheduleitem.xsd	2012-02-21 07:37:05.000000000 -0500
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="ISO-8859-1" ?>
+<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="http://indivo.org/vocab/xml/documents#"
+	   xmlns:indivo="http://indivo.org/vocab/xml/documents#"
+	   elementFormDefault="qualified">
+
+	<xs:include schemaLocation="codes.xsd" />
+	<xs:include schemaLocation="provider.xsd" />
+	<xs:include schemaLocation="values.xsd" />
+
+	<xs:complexType name="RecurrenceRule">
+		<xs:sequence>
+			<xs:element name="frequency" type="indivo:CodedValue" minOccurs="1" maxOccurs="1" />
+			<xs:element name="interval" type="indivo:CodedValue" minOccurs="0" maxOccurs="1" />
+			<xs:choice>
+				<xs:element name="dateUntil" type="xs:dateTime" minOccurs="0" maxOccurs="1" />	
+				<xs:element name="count" type="xs:integer" minOccurs="0" maxOccurs="1" />
+			</xs:choice>
+		</xs:sequence>
+	</xs:complexType>
+
+	<xs:complexType name="MedicationScheduleItem">
+		<xs:sequence>
+			<xs:element name="name" type="indivo:CodedValue" minOccurs="1" maxOccurs="1" />
+			<xs:element name="scheduledBy" type="xs:string" minOccurs="1" maxOccurs="1" />
+			<xs:element name="dateScheduled" type="xs:dateTime" minOccurs="1" maxOccurs="1" />
+			<xs:element name="dateStart" type="xs:dateTime" minOccurs="1" maxOccurs="1" />
+			<xs:element name="dateEnd" type="xs:dateTime" minOccurs="0" maxOccurs="1" />
+			<xs:element name="recurrenceRule" type="indivo:RecurrenceRule" minOccurs="0" maxOccurs="1" />	
+			<xs:element name="dose" type="indivo:ValueAndUnit" minOccurs="1" maxOccurs="1" />	
+			<xs:element name="instructions" type="xs:string" minOccurs="0" maxOccurs="1" />	
+		</xs:sequence>
+	</xs:complexType>
+
+  <xs:element name="MedicationScheduleItem" type="indivo:MedicationScheduleItem" />
+
+</xs:schema>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/medicationschedule.xml indivo_server/schemas/doc_schemas/medicationschedule.xml
--- fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/medicationschedule.xml	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/schemas/doc_schemas/medicationschedule.xml	2012-04-19 14:46:10.000000000 -0400
@@ -0,0 +1,32 @@
+<!--~
+  ~ Copyright 2012 John Moore, Scott Gilroy
+  ~
+  ~ This file is part of CollaboRhythm.
+  ~
+  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
+  ~ version.
+  ~
+  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
+  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+  ~ details.
+  ~
+  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
+  ~ <http://www.gnu.org/licenses/>.
+  -->
+<MedicationSchedule xmlns="http://indivo.org/vocab/xml/documents#">
+    <name type="http://rxnav.nlm.nih.gov/REST/rxcui/" value="866924">Metoprolol Tartrate 25 MG Oral Tablet</name>
+    <scheduledBy>jking@records.media.mit.edu</scheduledBy>
+    <dateScheduled>2011-02-14T13:00:00-04:00</dateScheduled>
+    <dateStart>2011-07-15T00:00:00Z</dateStart>
+    <dateEnd>2011-07-16T00:00:00Z</dateEnd>
+    <recurrenceRule>
+        <frequency>DAILY</frequency>
+        <count>45</count>
+	</recurrenceRule>
+    <dose>
+        <value>1</value>
+        <unit type="http://indivo.org/codes/units#" value="tab" abbrev="tab">tablet</unit>
+    </dose>
+    <instructions>take with water</instructions>
+</MedicationSchedule>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/medicationschedule.xsd indivo_server/schemas/doc_schemas/medicationschedule.xsd
--- fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/medicationschedule.xsd	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/schemas/doc_schemas/medicationschedule.xsd	2012-04-18 11:49:47.000000000 -0400
@@ -0,0 +1,166 @@
+<?xml version="1.0" encoding="ISO-8859-1" ?>
+<!--~
+  ~ Copyright 2012 John Moore, Scott Gilroy
+  ~
+  ~ This file is part of CollaboRhythm.
+  ~
+  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
+  ~ version.
+  ~
+  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
+  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+  ~ details.
+  ~
+  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
+  ~ <http://www.gnu.org/licenses/>.
+  -->
+<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
+		   targetNamespace="http://indivo.org/vocab/xml/documents#"
+		   xmlns:indivo="http://indivo.org/vocab/xml/documents#"
+		   elementFormDefault="qualified">
+
+	<xs:include schemaLocation="codes.xsd"/>
+	<xs:include schemaLocation="provider.xsd"/>
+	<xs:include schemaLocation="values.xsd"/>
+
+	<xs:complexType name="RecurrenceRule">
+		<xs:sequence>
+			<xs:element name="frequency" type="indivo:CodedValue" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Frequency of recurrence
+						The FREQ rule part identifies the type of recurrence rule. This rule part MUST be specified in
+						the recurrence rule. Valid values include SECONDLY, to specify repeating events based on an
+						interval of a second or more; MINUTELY, to specify repeating events based on an interval of a
+						minute or more; HOURLY, to specify repeating events based on an interval of an hour or more;
+						DAILY, to specify repeating events based on an interval of a day or more; WEEKLY, to specify
+						repeating events based on an interval of a week or more; MONTHLY, to specify repeating events
+						based on an interval of a month or more; and YEARLY, to specify repeating events based on an
+						interval of a year or more.
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="interval" type="indivo:CodedValue" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Interval of recurrence
+						The INTERVAL rule part contains a positive integer representing how often the recurrence rule
+						repeats. The default value is "1", meaning every second for a SECONDLY rule, or every minute for
+						a MINUTELY rule, every hour for an HOURLY rule, every day for a DAILY rule, every week for a
+						WEEKLY rule, every month for a MONTHLY rule and every year for a YEARLY rule.
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<!--
+   TODO: fix bugs in XMLEncoder/XMLDecoder so that we can support xs:choice
+			   <xs:choice>
+				   <xs:element name="dateUntil" type="xs:dateTime" minOccurs="0" maxOccurs="1"/>
+   -->
+			<xs:element name="count" type="xs:integer" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Number of times the item will recur
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<!--
+			   </xs:choice>
+   -->
+		</xs:sequence>
+	</xs:complexType>
+
+	<xs:complexType name="MedicationSchedule">
+		<xs:sequence>
+			<xs:element name="name" type="indivo:CodedValue" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						RxNorm name for the medication
+						This is a coded value using the url http://rxnav.nlm.nih.gov/REST/rxcui/ where the value is the
+						rxcui (RxNorm Coded Unique Identifier). The rxcui should correspond to the SBD (branded drug
+						name) or SCD (clinical drug name) that is most specific for the medication and includes name and
+						dose for each clinical drug component.
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="scheduledBy" type="xs:string" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Person or agent that scheduled the item
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="dateScheduled" type="xs:dateTime" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Date and time that the HealthActionSchedule was originally assigned a dateStart, recurrence
+						rule, etc.
+						The date and time that the document was created in the meta-data for the document is not
+						necessarily the same as the date and time that the HealthActionSchedule was actually assigned
+						its dateStart, recurrence rule, etc. An example would be if the schedule was created on a mobile
+						phone and then uploaded later.
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="dateStart" type="xs:dateTime" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Date and time that the scheduleItem starts
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="dateEnd" type="xs:dateTime" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Date and time that the scheduleItem ends
+						If the scheduleItem has a duration, this is established by having and end time. If the
+						scheduleItem does not have a duration, then no end time is required.
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="recurrenceRule" type="indivo:RecurrenceRule" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Rule that establishes how the scheduleItem will recur.
+						Based on the Recurrence Rule from the iCalendar RFC 5545 specification
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="dose" type="indivo:ValueAndUnit" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Dose of the medication
+						This includes a value and a unit.
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="instructions" type="xs:string" minOccurs="0" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Instructions for the specific medication
+						This is an override of the instructions for the HealthActionPlan on a per HealthActionSchedule
+						basis. This allows instructions to change with each dose of a taper or other complex schedule.
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+		</xs:sequence>
+	</xs:complexType>
+
+	<xs:element name="MedicationSchedule" type="indivo:MedicationSchedule">
+		<xs:annotation>
+			<xs:documentation xml:lang="en">
+				It is common to schedule the administration of medications. The MedicationSchedule allows a simple
+				schedule for a medication to be created with simple recurrence rules using specifications similar to
+				standard calendar entries. In order to create more complex schedules, for example a steroid taper,
+				multiple MedicationSchedule documents would need to be created. The MedicationSchedule should be related
+				from the appropriate MedicationOrder using the ?healthActionSchedule? relationship type and to the
+				appropriate HealthActionOccurrence documents using the ?healthActionOccurrence? relationship type.
+				Eventually, MedicationSchedule will be deprecated and HealthActionSchedule will be used instead. This
+				will require using a HealthAction to specify the dose and route for the MedicationOrder. Also,
+				eventually we should use the complete iCal standard. An xml format is in development
+				http://xml.coverpages.org/draft-daboo-et-al-icalendar-in-xml-02.txt but a schema is not currently
+			</xs:documentation>
+		</xs:annotation>
+	</xs:element>
+
+</xs:schema>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/verify-all.sh indivo_server/schemas/doc_schemas/verify-all.sh
--- fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/verify-all.sh	2012-02-27 12:31:32.000000000 -0500
+++ indivo_server/schemas/doc_schemas/verify-all.sh	2012-04-26 15:10:52.000000000 -0400
@@ -4,12 +4,19 @@
 python validate_xml_with_schema.py annotation.xsd annotation.xml
 python validate_xml_with_schema.py contact.xsd contact.xml
 python validate_xml_with_schema.py demographics.xsd demographics.xml
+python validate_xml_with_schema.py device.xsd device.xml
 python validate_xml_with_schema.py equipment.xsd equipment.xml
+python validate_xml_with_schema.py healthactionoccurrence.xsd healthactionoccurrence.xml
+python validate_xml_with_schema.py healthactionplan.xsd healthactionplan.xml
+python validate_xml_with_schema.py healthactionresult.xsd healthactionresult.xml
+python validate_xml_with_schema.py healthactionschedule.xsd healthactionschedule.xml
 python validate_xml_with_schema.py hospital-api-metadata.xsd hospital-api-metadata.xml
 python validate_xml_with_schema.py immunization.xsd immunization.xml
 python validate_xml_with_schema.py lab.xsd lab.xml
 python validate_xml_with_schema.py labreport.xsd labreport.xml
+python validate_xml_with_schema.py healthmeasurement.xsd healthmeasurement.xml
 python validate_xml_with_schema.py medication.xsd medication.xml
+python validate_xml_with_schema.py medicationschedule.xsd medicationschedule.xml
 python validate_xml_with_schema.py metadata.xsd metadata.xml
 python validate_xml_with_schema.py problem.xsd problem.xml
 python validate_xml_with_schema.py procedure.xsd procedure.xml
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/videomessage.xsd indivo_server/schemas/doc_schemas/videomessage.xsd
--- fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/videomessage.xsd	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/schemas/doc_schemas/videomessage.xsd	2012-04-20 14:18:34.000000000 -0400
@@ -0,0 +1,84 @@
+<?xml version="1.0" encoding="ISO-8859-1" ?>
+<!--~
+  ~ Copyright 2011 John Moore, Scott Gilroy
+  ~
+  ~ This file is part of CollaboRhythm.
+  ~
+  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
+  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
+  ~ version.
+  ~
+  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
+  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+  ~ details.
+  ~
+  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
+  ~ <http://www.gnu.org/licenses/>.
+  -->
+<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
+		   targetNamespace="http://indivo.org/vocab/xml/documents#"
+		   xmlns:indivo="http://indivo.org/vocab/xml/documents#"
+		   elementFormDefault="qualified">
+
+	<xs:include schemaLocation="codes.xsd"/>
+	<xs:include schemaLocation="provider.xsd"/>
+	<xs:include schemaLocation="values.xsd"/>
+
+	<xs:complexType name="VideoMessage">
+		<xs:sequence>
+			<xs:element name="fileId" type="xs:string" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						ID of the video file
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="storageType" type="xs:string" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Type of video file storage, for example ?FlashMediaServer?
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="subject" type="xs:string" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Subject of the message
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="from" type="xs:string" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Person that sent the video message
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="dateRecorded" type="xs:dateTime" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Date and time that the video message was recorded
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element name="dateSent" type="xs:dateTime" minOccurs="1" maxOccurs="1">
+				<xs:annotation>
+					<xs:documentation xml:lang="en">
+						Date and time that the video message was sent
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+		</xs:sequence>
+	</xs:complexType>
+
+	<xs:element name="VideoMessage" type="indivo:VideoMessage">
+		<xs:annotation>
+			<xs:documentation xml:lang="en">
+				It is possible to send video messages to patients using the collaborative workstation. Currently they
+				are stored on the flash media server. The VideoMessage document allows the mobile application to know
+				what videos are available for a given patient.
+			</xs:documentation>
+		</xs:annotation>
+	</xs:element>
+
+</xs:schema>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/vitals.xsd indivo_server/schemas/doc_schemas/vitals.xsd
--- fyoung-indivo_server_1_0-3f85dc7/schemas/doc_schemas/vitals.xsd	2012-02-27 12:31:32.000000000 -0500
+++ indivo_server/schemas/doc_schemas/vitals.xsd	2012-02-21 07:37:05.000000000 -0500
@@ -1,23 +1,26 @@
 <?xml version="1.0" encoding="ISO-8859-1" ?>
-<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="http://indivo.org/vocab/xml/documents#" xmlns:indivo="http://indivo.org/vocab/xml/documents#"
+<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="http://indivo.org/vocab/xml/documents#"
+	   xmlns:indivo="http://indivo.org/vocab/xml/documents#"
 	   elementFormDefault="qualified">
 
-  <xs:include schemaLocation="codes.xsd" />
+	<xs:include schemaLocation="codes.xsd" />
+	<xs:include schemaLocation="provider.xsd" />
+	<xs:include schemaLocation="values.xsd" />
 
-  <xs:element name="VitalSign">
-    <xs:complexType>
-      <xs:sequence>
-        <xs:element name="dateMeasured" type="xs:dateTime" minOccurs="1" maxOccurs="1" />
-        <xs:element name="name" type="indivo:CodedValue" minOccurs="1" maxOccurs="1" />
-        <xs:element name="value" type="xs:decimal" minOccurs="1" maxOccurs="1" />
-        <xs:element name="unit" type="indivo:CodedValue" minOccurs="1" maxOccurs="1" />
+	<xs:complexType name="VitalSign">
+		<xs:sequence>
+			<xs:element name="name" type="indivo:CodedValue" minOccurs="1" maxOccurs="1" />
+			<xs:element name="measuredBy" type="xs:string" minOccurs="0" maxOccurs="1" />
+			<xs:element name="dateMeasuredStart" type="xs:dateTime" minOccurs="1" maxOccurs="1" />
+			<xs:element name="dateMeasuredEnd" type="xs:dateTime" minOccurs="0" maxOccurs="1" />
+			<xs:element name="result" type="indivo:ValueAndUnit" minOccurs="1" maxOccurs="1" />
+			<xs:element name="site" type="xs:string" minOccurs="0" maxOccurs="1" />
+			<xs:element name="position" type="xs:string" minOccurs="0" maxOccurs="1" />
+			<xs:element name="technique" type="xs:string" minOccurs="0" maxOccurs="1" />
+			<xs:element name="comments" type="xs:string" minOccurs="0" maxOccurs="1" />
+		</xs:sequence>
+	</xs:complexType>
 
-        <xs:element name="site" type="xs:string" minOccurs="0" maxOccurs="1" />
+  <xs:element name="VitalSign" type="indivo:VitalSign" />
 
-        <xs:element name="position" type="xs:string" minOccurs="0" maxOccurs="1" />
-
-        <xs:element name="comments" type="xs:string" minOccurs="0" maxOccurs="1" />
-      </xs:sequence>
-    </xs:complexType>
-  </xs:element>
 </xs:schema>
diff '--exclude=files' -Naur fyoung-indivo_server_1_0-3f85dc7/utils/indivo_data.xml indivo_server/utils/indivo_data.xml
--- fyoung-indivo_server_1_0-3f85dc7/utils/indivo_data.xml	1969-12-31 19:00:00.000000000 -0500
+++ indivo_server/utils/indivo_data.xml	2012-04-26 15:10:52.000000000 -0400
@@ -0,0 +1,190 @@
+<bootstrap>
+  <auth_systems>
+    <auth_system short_name='auth_system_example' internal_p='False' />
+  </auth_systems>
+  <accounts>
+    <account email='guest@example.org'>
+      <full_name>Guest</full_name>
+      <contact_email>guest@example.org</contact_email>
+      <username>guest</username>
+      <password>guest</password>
+      <records>
+        <record label='Guest' />
+      </records>
+    </account>
+    <account email='johnsmith@indivo.org'>
+      <full_name>John Smith</full_name>
+      <contact_email>johnsmith@example.org</contact_email>
+      <username>jsmith</username>
+      <password>password.example</password>
+      <records>
+        <record label='John S. Smith' />
+        <record label='Mary' />
+      </records>
+    </account>
+    <account email='user1@records.media.mit.edu'>
+      <full_name>User1 Testing</full_name>
+      <contact_email>sgilroy@mit.edu</contact_email>
+      <username>user1</username>
+      <password>user1-dope75</password>
+      <records>
+        <record label='User1 Testing Record' />
+      </records>
+    </account>
+    <account email='user2@records.media.mit.edu'>
+      <full_name>User2 Testing</full_name>
+      <contact_email>sgilroy@mit.edu</contact_email>
+      <username>user2</username>
+      <password>user2-dope75</password>
+      <records>
+        <record label='User2 Testing Record' />
+      </records>
+    </account>
+    <account email='user3@records.media.mit.edu'>
+      <full_name>User3 Testing</full_name>
+      <contact_email>sgilroy@mit.edu</contact_email>
+      <username>user3</username>
+      <password>user3-dope75</password>
+      <records>
+        <record label='User3 Testing Record' />
+      </records>
+    </account>
+  </accounts>
+  <status_names>
+    <status id='1' name='active' />
+    <status id='2' name='void' />
+    <status id='3' name='archived' />
+  </status_names>
+  <document_schemas>
+    <document_schema type='http://indivo.org/vocab/xml/documents#Contact' />
+    <document_schema type='http://indivo.org/vocab/xml/documents#Demographics' />
+    <document_schema type='http://indivo.org/vocab/documentrels#answers' />
+    <document_schema type='http://indivo.org/vocab/documentrels#annotation' />
+    <document_schema type='http://indivo.org/vocab/documentrels#interpretation' />
+    <document_schema type='http://indivo.org/vocab/documentrels#followup' />
+    <document_schema type='http://indivo.org/vocab/documentrels#attachment' />
+    <document_schema type='http://indivo.org/vocab/xml/documents#Survey' />
+    <document_schema type='http://indivo.org/vocab/xml/documents#SurveyAnswers' />
+    <document_schema type='http://indivo.org/vocab/xml/documents#UserPreferences' />
+    <document_schema type='http://indivo.org/vocab/xml/documents#Allergy' />
+    <document_schema type='http://indivo.org/vocab/xml/documents#Annotation' />
+    <document_schema type='http://indivo.org/vocab/xml/documents#AsthmaActionPlan' />
+    <document_schema type='http://indivo.org/vocab/xml/documents#SimpleClinicalNote' />
+    <document_schema type='http://indivo.org/vocab/xml/documents#Equipment' />
+    <document_schema type='http://indivo.org/vocab/xml/documents#HBA1C' />
+    <document_schema type='http://indivo.org/vocab/xml/documents#Immunization' />
+    <document_schema type='http://indivo.org/vocab/xml/documents#Lab' />
+    <document_schema type='http://indivo.org/vocab/xml/documents#Medication' />
+    <document_schema type='http://indivo.org/vocab/xml/documents#MedicationOrder' />
+    <document_schema type='http://indivo.org/vocab/xml/documents#MedicationFill' />
+    <document_schema type='http://indivo.org/vocab/xml/documents#MedicationAdministration' />
+    <document_schema type='http://indivo.org/vocab/xml/documents#MedicationScheduleItem' />
+    <document_schema type='http://indivo.org/vocab/xml/documents#EquipmentScheduleItem' />
+    <document_schema type='http://indivo.org/vocab/xml/documents#AdherenceItem' />
+    <document_schema type='http://indivo.org/vocab/xml/documents#VideoMessage' />
+    <document_schema type='http://indivo.org/vocab/xml/documents#Problem' />
+    <document_schema type='http://indivo.org/vocab/xml/documents#Procedure' />
+    <document_schema type='http://indivo.org/vocab/xml/documents#SchoolForm' />
+    <document_schema type='http://indivo.org/vocab/xml/documents#SimpleClinicalNote' />
+    <document_schema type='http://indivo.org/vocab/xml/documents#VitalSign' />
+    <document_schema type='http://indivo.org/vocab/xml/documents#EncryptedDocument' />
+    <document_schema type='http://indivo.org/vocab/xml/documents#Genotype' />
+    <document_schema type='http://indivo.org/vocab/xml/documents#HealthActionPlan' />
+    <document_schema type='http://indivo.org/vocab/xml/documents#HealthActionResult' />
+    <document_schema type='http://indivo.org/vocab/xml/documents#HealthActionOccurrence' />
+    <document_schema type='http://indivo.org/vocab/xml/documents#HealthActionSchedule' />
+    <document_schema type='http://indivo.org/vocab/xml/documents#Device' />
+    <document_schema type='http://indivo.org/vocab/xml/documents#HealthMeasurement' />
+    <document_schema type='http://indivo.org/vocab/xml/documents#MedicationSchedule' />
+  </document_schemas>
+  <machine_apps>
+    <machine_app name='Sample Admin App' email='sample_admin_app@apps.indivo.org'>
+      <consumer_key>sampleadmin_key</consumer_key>
+      <secret>sampleadmin_secret</secret>
+      <app_type>admin</app_type>
+    </machine_app>
+    <machine_app name='Sample Chrome App' email='chrome@apps.indivo.org'>
+      <consumer_key>chrome</consumer_key>
+      <secret>chrome</secret>
+      <app_type>chrome</app_type>
+    </machine_app>
+    <machine_app name='CollaboRhythm Admin App' email='collaboRhythmAdmin@apps.indivo.org'>
+      <consumer_key>collaboRhythmAdmin</consumer_key>
+      <secret>collaboRhythmAdmin_secret35169</secret>
+      <app_type>admin</app_type>
+    </machine_app>
+    <machine_app name='CollaboRhythm Chrome App' email='collaboRhythmChrome@apps.indivo.org'>
+      <consumer_key>collaboRhythmChrome</consumer_key>
+      <secret>collaboRhythmChrome_secret93452</secret>
+      <app_type>chrome</app_type>
+    </machine_app>
+    <machine_app name='CollaboRhythm Indivo Account Creator App' email='indivoAccountCreator@apps.indivo.org'>
+      <consumer_key>indivoAccountCreator</consumer_key>
+      <secret>indivoAccountCreator_secret93452</secret>
+      <app_type>chrome</app_type>
+    </machine_app>
+  </machine_apps>
+  <user_apps>
+    <user_app name="Children's Hospital Boston Subscription Agent" email='indivoconnector@apps.indivo.org'>
+      <consumer_key>hospital-connector</consumer_key>
+      <secret>hospital-connector-secret</secret>
+      <start_url_template>
+	http://localhost:8003/indivo/start_auth?record_id={record_id}
+      </start_url_template>
+      <callback_url>
+	http://localhost:8003/indivo/after_auth
+      </callback_url>
+      <is_autonomous>True</is_autonomous>
+      <autonomous_reason>This app connects to your record to load new data into it while you sleep.</autonomous_reason>
+      <has_ui>True</has_ui>
+    </user_app>
+    <user_app name='Allergies' email='allergies@apps.indivo.org'>
+      <consumer_key>allergies@apps.indivo.org</consumer_key>
+      <secret>allergies</secret>
+      <frameable>True</frameable>
+      <has_ui>True</has_ui>
+      <start_url_template>
+        /apps/allergies/start_auth?record_id={record_id}&amp;carenet_id={carenet_id}
+      </start_url_template>
+      <callback_url>
+        /apps/allergies/after_auth
+      </callback_url>
+    </user_app>
+    <user_app name='Labs' email='labs@apps.indivo.org'>
+      <consumer_key>labs@apps.indivo.org</consumer_key>
+      <secret>labs</secret>
+      <frameable>True</frameable>
+      <has_ui>True</has_ui>
+      <start_url_template>
+        /apps/labs/start_auth?record_id={record_id}&amp;carenet_id={carenet_id}
+      </start_url_template>
+      <callback_url>
+        /apps/labs/after_auth
+      </callback_url>
+    </user_app>
+    <user_app name='Medications' email='medications@apps.indivo.org'>
+      <consumer_key>medications@apps.indivo.org</consumer_key>
+      <secret>medications</secret>
+      <frameable>True</frameable>
+      <has_ui>True</has_ui>
+      <start_url_template>
+        /apps/medications/start_auth?record_id={record_id}&amp;carenet_id={carenet_id}
+      </start_url_template>
+      <callback_url>
+        /apps/medications/after_auth
+      </callback_url>
+    </user_app>
+    <user_app name='Problems' email='problems@apps.indivo.org'>
+      <consumer_key>problems@apps.indivo.org</consumer_key>
+      <secret>problems</secret>
+      <frameable>True</frameable>
+      <has_ui>True</has_ui>
+      <start_url_template>
+        /apps/problems/start_auth?record_id={record_id}&amp;carenet_id={carenet_id}
+      </start_url_template>
+      <callback_url>
+        /apps/problems/after_auth
+      </callback_url>
+    </user_app>
+  </user_apps>
+</bootstrap>
